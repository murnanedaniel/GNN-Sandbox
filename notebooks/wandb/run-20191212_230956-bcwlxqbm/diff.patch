diff --git a/notebooks/.ipynb_checkpoints/ToyModelTrackML-checkpoint.ipynb b/notebooks/.ipynb_checkpoints/ToyModelTrackML-checkpoint.ipynb
index 67a47fc..f0d4d06 100644
--- a/notebooks/.ipynb_checkpoints/ToyModelTrackML-checkpoint.ipynb
+++ b/notebooks/.ipynb_checkpoints/ToyModelTrackML-checkpoint.ipynb
@@ -11,7 +11,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 20,
    "metadata": {
     "cell_style": "center",
     "code_folding": []
@@ -23,6 +23,8 @@
     "import sys\n",
     "from pprint import pprint as pp\n",
     "from time import time as tt\n",
+    "sys.path.append('..')\n",
+    "sys.path.append('/global/homes/d/danieltm/.local/lib/python3.7/site-packages')\n",
     "\n",
     "# External imports\n",
     "import matplotlib.pyplot as plt\n",
@@ -32,6 +34,7 @@
     "from torch_geometric.data import Data\n",
     "from torch_geometric.data import DataLoader\n",
     "import seaborn as sns\n",
+    "import wandb\n",
     "\n",
     "import ipywidgets as widgets\n",
     "from ipywidgets import interact, interact_manual\n",
@@ -39,15 +42,112 @@
     "# Limit CPU usage on Jupyter\n",
     "os.environ['OMP_NUM_THREADS'] = '4'\n",
     "\n",
-    "# Pick up local packages\n",
-    "sys.path.append('..')\n",
-    "\n",
     "# Local imports\n",
     "from utils.toy_utils import *\n",
     "from datasets.hitgraphs_params import *\n",
     "%matplotlib inline"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 22,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: ERROR Not authenticated.  Copy a key from https://app.wandb.ai/authorize\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "API Key: ········\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: Appending key for api.wandb.ai to your netrc file: /global/homes/d/danieltm/.netrc\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/murnanedaniel/node_regression\" target=\"_blank\">https://app.wandb.ai/murnanedaniel/node_regression</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/murnanedaniel/node_regression/runs/d0vmm0na\" target=\"_blank\">https://app.wandb.ai/murnanedaniel/node_regression/runs/d0vmm0na</a><br/>\n",
+       "            "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: Network error resolved after 0:00:11.349751, resuming normal operation.\n",
+      "wandb: psutil not installed, only GPU stats will be reported.  Install with pip install psutil\n",
+      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "W&B Run: https://app.wandb.ai/murnanedaniel/node_regression/runs/d0vmm0na"
+      ]
+     },
+     "execution_count": 22,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: Network error resolved after 0:00:23.802165, resuming normal operation.\n",
+      "wandb: Network error resolved after 0:00:11.426047, resuming normal operation.\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Error in callback <function _init_jupyter.<locals>.cleanup at 0x2aaad5b3bbf8> (for post_run_cell):\n"
+     ]
+    },
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
+      "\u001b[0;32m/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/site-packages/backcall/backcall.py\u001b[0m in \u001b[0;36madapted\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    102\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m \u001b[0;31m#            print(args, kwargs, unmatched_pos, cut_positional, unmatched_kw)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 104\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0madapted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/.local/lib/python3.7/site-packages/wandb/__init__.py\u001b[0m in \u001b[0;36mcleanup\u001b[0;34m()\u001b[0m\n\u001b[1;32m    476\u001b[0m         \u001b[0;31m# shutdown async logger because _user_process_finished isn't called in jupyter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    477\u001b[0m         \u001b[0mshutdown_async_log_thread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 478\u001b[0;31m         \u001b[0mrun\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stop_jupyter_agent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    479\u001b[0m     \u001b[0mipython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevents\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'post_run_cell'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcleanup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/.local/lib/python3.7/site-packages/wandb/wandb_run.py\u001b[0m in \u001b[0;36m_stop_jupyter_agent\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    175\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    176\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_stop_jupyter_agent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 177\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jupyter_agent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    178\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msend_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/.local/lib/python3.7/site-packages/wandb/jupyter.py\u001b[0m in \u001b[0;36mstop\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpaused\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munmirror_stdout_stderr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 136\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshutdown\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    137\u001b[0m             \u001b[0mwandb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpaused\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/.local/lib/python3.7/site-packages/wandb/run_manager.py\u001b[0m in \u001b[0;36mshutdown\u001b[0;34m(self, exitcode)\u001b[0m\n\u001b[1;32m   1068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cloud\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1069\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"stopping streaming files and file change observer\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1070\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_end_file_syncing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexitcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1071\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1072\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/.local/lib/python3.7/site-packages/wandb/run_manager.py\u001b[0m in \u001b[0;36m_end_file_syncing\u001b[0;34m(self, exitcode)\u001b[0m\n\u001b[1;32m    661\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    662\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_file_pusher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 663\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_file_stream_api\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexitcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    664\u001b[0m         \u001b[0;31m# In Jupyter notebooks, wandb.init can be called multiple times in the same\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    665\u001b[0m         \u001b[0;31m# process, creating new runs each time. This ensures we get a new file stream\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/.local/lib/python3.7/site-packages/wandb/apis/file_stream.py\u001b[0m in \u001b[0;36mfinish\u001b[0;34m(self, exitcode)\u001b[0m\n\u001b[1;32m    272\u001b[0m         \"\"\"\n\u001b[1;32m    273\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_queue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexitcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 274\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_thread\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
+      "\u001b[0;32m/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mjoin\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1054\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1055\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1056\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wait_for_tstate_lock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1057\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m             \u001b[0;31m# the behavior of a negative timeout isn't documented, but\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/threading.py\u001b[0m in \u001b[0;36m_wait_for_tstate_lock\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m   1070\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlock\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# already determined that the C code is done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1071\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_stopped\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1072\u001b[0;31m         \u001b[0;32melif\u001b[0m \u001b[0mlock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1073\u001b[0m             \u001b[0mlock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelease\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1074\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
+     ]
+    }
+   ],
+   "source": [
+    "wandb.init(project=\"node_regression\")"
+   ]
+  },
   {
    "cell_type": "markdown",
    "metadata": {},
@@ -75,7 +175,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -86,7 +186,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -95,7 +195,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -105,40 +205,44 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
     "cut_full_dataset = [torch_geometric.data.Data(x=torch.from_numpy(di[0]),\n",
     "                                         edge_index=torch.from_numpy(di[1]), y_edges=torch.from_numpy(di[2]), \n",
-    "                                         y_params=(torch.from_numpy(di[3][:,0]).unsqueeze(1)*200), pid=torch.from_numpy(di[4])) for di in full_graphs]"
+    "                                         y_params=(torch.from_numpy(di[3][:,0]).unsqueeze(1)), pid=torch.from_numpy(di[4])) for di in full_graphs]"
    ]
   },
   {
    "cell_type": "markdown",
-   "metadata": {},
+   "metadata": {
+    "heading_collapsed": true
+   },
    "source": [
     "## Visualise data"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 73,
-   "metadata": {},
+   "execution_count": 49,
+   "metadata": {
+    "hidden": true
+   },
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "<matplotlib.axes._subplots.AxesSubplot at 0x2aab87910320>"
+       "<matplotlib.axes._subplots.AxesSubplot at 0x2aab7fd80cf8>"
       ]
      },
-     "execution_count": 73,
+     "execution_count": 49,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -150,7 +254,7 @@
     }
    ],
    "source": [
-    "sns.distplot(np.concatenate(np.array([di[3][:,0] for di in full_graphs]))[:10]*200)"
+    "sns.distplot(np.concatenate(np.array([di[3][:,0] for di in full_graphs]))[:100000])"
    ]
   },
   {
@@ -1434,11 +1538,74 @@
    ]
   },
   {
-   "cell_type": "code",
-   "execution_count": 54,
+   "cell_type": "markdown",
    "metadata": {},
+   "source": [
+    "How to do a double scatter..."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {
+    "code_folding": [
+     52
+    ]
+   },
    "outputs": [],
    "source": [
+    "class TwoHopAttNetwork(nn.Module):\n",
+    "    \"\"\"\n",
+    "    A module which computes new node features on the graph.\n",
+    "    For each node, it aggregates the neighbor node features\n",
+    "    (separately on the input and output side), and combines\n",
+    "    them with the node's previous features in a fully-connected\n",
+    "    network to compute the new features.\n",
+    "    \"\"\"\n",
+    "    def __init__(self, input_dim, hidden_dim, output_dim, hidden_activation=nn.ReLU,\n",
+    "                 layer_norm=True):\n",
+    "        super(TwoHopAttNetwork, self).__init__()\n",
+    "        self.network = make_mlp(input_dim*5, [hidden_dim, hidden_dim, hidden_dim, output_dim],\n",
+    "                                hidden_activation=hidden_activation,\n",
+    "                                output_activation=hidden_activation,\n",
+    "                                layer_norm=layer_norm)\n",
+    "\n",
+    "    def forward(self, x, e, edge_index):\n",
+    "        start, end = edge_index\n",
+    "        # Aggregate edge-weighted incoming/outgoing features\n",
+    "        mi = scatter_add(e[:, None] * x[start], end, dim=0, dim_size=x.shape[0])\n",
+    "        mi2 = scatter_add(e[:, None]*scatter_add(e[:, None] * x[start], end, dim=0, dim_size=x.shape[0])[start], end, dim=0, dim_size=x.shape[0])\n",
+    "        mo = scatter_add(e[:, None] * x[end], start, dim=0, dim_size=x.shape[0])\n",
+    "        mo2 = scatter_add(e[:, None]*scatter_add(e[:, None] * x[end], start, dim=0, dim_size=x.shape[0])[end], start, dim=0, dim_size=x.shape[0])\n",
+    "        node_inputs = torch.cat([mi, mi2, mo, mo2, x], dim=1)\n",
+    "        return self.network(node_inputs)\n",
+    "\n",
+    "class TwoHopNetwork(nn.Module):\n",
+    "    \"\"\"\n",
+    "    A module which computes new node features on the graph.\n",
+    "    For each node, it aggregates the neighbor node features\n",
+    "    (separately on the input and output side), and combines\n",
+    "    them with the node's previous features in a fully-connected\n",
+    "    network to compute the new features.\n",
+    "    \"\"\"\n",
+    "    def __init__(self, input_dim, hidden_dim, output_dim, hidden_activation=nn.ReLU,\n",
+    "                 layer_norm=True):\n",
+    "        super(TwoHopNetwork, self).__init__()\n",
+    "        self.network = make_mlp(input_dim*5, [hidden_dim, hidden_dim, hidden_dim, output_dim],\n",
+    "                                hidden_activation=hidden_activation,\n",
+    "                                output_activation=hidden_activation,\n",
+    "                                layer_norm=layer_norm)\n",
+    "\n",
+    "    def forward(self, x, e, edge_index):\n",
+    "        start, end = edge_index\n",
+    "        # Aggregate edge-weighted incoming/outgoing features\n",
+    "        mi = scatter_add(x[start], end, dim=0, dim_size=x.shape[0])\n",
+    "        mi2 = scatter_add(scatter_add(x[start], end, dim=0, dim_size=x.shape[0])[start], end, dim=0, dim_size=x.shape[0])\n",
+    "        mo = scatter_add(x[end], start, dim=0, dim_size=x.shape[0])\n",
+    "        mo2 = scatter_add(scatter_add(x[end], start, dim=0, dim_size=x.shape[0])[end], start, dim=0, dim_size=x.shape[0])\n",
+    "        node_inputs = torch.cat([mi, mi2, mo, mo2, x], dim=1)\n",
+    "        return self.network(node_inputs)\n",
+    "\n",
     "class Edge_Track_Net(nn.Module):\n",
     "    \"\"\"\n",
     "    Segment classification graph neural network model.\n",
@@ -1450,20 +1617,20 @@
     "        self.n_graph_iters = n_graph_iters\n",
     "        # Setup the input network\n",
     "        self.input_network = make_mlp(input_dim, [hidden_dim],\n",
-    "                                      output_activation=nn.Tanh,\n",
-    "                                      layer_norm=True)\n",
+    "                                      hidden_activation=nn.ReLU,\n",
+    "                                      layer_norm=False)\n",
     "        # Setup the edge network\n",
     "        self.edge_network = EdgeNetwork(input_dim+hidden_dim, hidden_dim,\n",
     "                                        hidden_activation, layer_norm=layer_norm)\n",
     "        # Setup the node layers\n",
-    "        self.node_network = NodeNetwork(input_dim+hidden_dim, hidden_dim, hidden_dim,\n",
-    "                                        layer_norm=True)\n",
+    "        self.node_network = TwoHopAttNetwork(input_dim+hidden_dim, hidden_dim, hidden_dim,\n",
+    "                                        hidden_activation=nn.ReLU, layer_norm=False)\n",
     "        \n",
-    "        self.output_network = NodeNetwork(input_dim+hidden_dim, hidden_dim, output_dim,\n",
-    "                                        layer_norm=False)\n",
-    "#         make_mlp(input_dim+hidden_dim, [hidden_dim, hidden_dim, hidden_dim, output_dim],\n",
+    "#         self.output_network = NodeNetwork(input_dim+hidden_dim, hidden_dim, output_dim,\n",
+    "#                                         layer_norm=False)\n",
+    "        self.output_network = make_mlp(input_dim+hidden_dim, [hidden_dim, hidden_dim, output_dim],\n",
     "                                       hidden_activation=nn.ReLU,\n",
-    "                                      output_activation=nn.ReLU,\n",
+    "                                      output_activation=None,\n",
     "                                      layer_norm=False)\n",
     "\n",
     "    def forward(self, inputs):\n",
@@ -1482,7 +1649,48 @@
     "            x = torch.cat([x, inputs.x], dim=-1)\n",
     "        # Apply final edge network\n",
     "        e = self.edge_network(x, inputs.edge_index)\n",
-    "        return e, self.output_network(x, e, inputs.edge_index)"
+    "        return e, self.output_network(x)\n",
+    "    \n",
+    "class Edge_Track_Truth_Net(nn.Module):\n",
+    "    \"\"\"\n",
+    "    Segment classification graph neural network model.\n",
+    "    Consists of an input network, an edge network, and a node network.\n",
+    "    \"\"\"\n",
+    "    def __init__(self, input_dim=3, hidden_dim=8, n_graph_iters=3,\n",
+    "                 output_dim=3, hidden_activation=nn.ReLU, layer_norm=True):\n",
+    "        super(Edge_Track_Truth_Net, self).__init__()\n",
+    "        self.n_graph_iters = n_graph_iters\n",
+    "        # Setup the input network\n",
+    "        self.input_network = make_mlp(input_dim, [hidden_dim],\n",
+    "                                      hidden_activation=nn.ReLU,\n",
+    "                                      layer_norm=False)\n",
+    "        # Setup the node layers\n",
+    "        self.node_network = TwoHopAttNetwork(input_dim+hidden_dim, hidden_dim, hidden_dim,\n",
+    "                                        hidden_activation=nn.ReLU, layer_norm=False)\n",
+    "        \n",
+    "#         self.output_network = NodeNetwork(input_dim+hidden_dim, hidden_dim, output_dim,\n",
+    "#                                         layer_norm=False)\n",
+    "        self.output_network = make_mlp(input_dim+hidden_dim, [hidden_dim, hidden_dim, hidden_dim, output_dim],\n",
+    "                                       hidden_activation=nn.ReLU,\n",
+    "                                      output_activation=None,\n",
+    "                                      layer_norm=False)\n",
+    "\n",
+    "    def forward(self, inputs):\n",
+    "        \"\"\"Apply forward pass of the model\"\"\"\n",
+    "        # Apply input network to get hidden representation\n",
+    "        x = self.input_network(inputs.x)\n",
+    "        # Shortcut connect the inputs onto the hidden representation\n",
+    "        x = torch.cat([x, inputs.x], dim=-1)\n",
+    "        # Loop over iterations of edge and node networks\n",
+    "        for i in range(self.n_graph_iters):\n",
+    "            # Apply edge network\n",
+    "            e = inputs.y_edges\n",
+    "            # Apply node network\n",
+    "            x = self.node_network(x, e, inputs.edge_index)\n",
+    "            # Shortcut connect the inputs onto the hidden representation\n",
+    "            x = torch.cat([x, inputs.x], dim=-1)\n",
+    "        # Apply final edge network\n",
+    "        return self.output_network(x)"
    ]
   },
   {
@@ -1501,19 +1709,19 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [],
    "source": [
     "train_dataset = cut_full_dataset[:int(0.2 * len(cut_full_dataset))]\n",
     "test_dataset = cut_full_dataset[int(0.9 * len(cut_full_dataset)):]\n",
-    "train_loader = DataLoader(train_dataset, batch_size=2, shuffle=True)\n",
-    "test_loader = DataLoader(test_dataset, batch_size=2, shuffle=True)"
+    "train_loader = DataLoader(train_dataset, batch_size=1, shuffle=True)\n",
+    "test_loader = DataLoader(test_dataset, batch_size=1, shuffle=True)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -1522,7 +1730,7 @@
        "200"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1533,7 +1741,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 55,
+   "execution_count": 13,
    "metadata": {},
    "outputs": [
     {
@@ -1548,33 +1756,43 @@
     "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
     "print(\"Using \", device)\n",
     "# model = Edge_Class_Net( input_dim=2, hidden_dim=64, n_graph_iters=4).to(device)\n",
-    "model = Edge_Track_Net(input_dim=3, hidden_dim=32, n_graph_iters=4, output_dim=1).to(device)\n",
+    "model = Edge_Track_Truth_Net(input_dim=3, hidden_dim=16, n_graph_iters=6, output_dim=1).to(device)\n",
     "# data = dataset[0].to(device)\n",
-    "learning_rate=0.001\n",
+    "learning_rate=0.002\n",
+    "# optimizer = torch.optim.SGD([\n",
+    "#                                 {'params': model.input_network.parameters()},\n",
+    "#                                 {'params': model.edge_network.parameters()},\n",
+    "#                                 {'params': model.node_network.parameters()},\n",
+    "#                                 {'params': model.output_network.parameters(), 'lr': learning_rate*10}], lr=learning_rate, momentum=0.9)\n",
+    "# optimizer = torch.optim.Adam([\n",
+    "#                                 {'params': model.input_network.parameters()},\n",
+    "#                                 {'params': model.edge_network.parameters()},\n",
+    "#                                 {'params': model.node_network.parameters(), 'lr': learning_rate*10},\n",
+    "#                                 {'params': model.output_network.parameters(), 'lr': learning_rate*10}], lr=learning_rate, weight_decay=1e-4)\n",
     "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-4)\n",
-    "scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.9)"
+    "scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.9)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 139,
+   "execution_count": 47,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "[<matplotlib.lines.Line2D at 0x2aab83484da0>]"
+       "[<matplotlib.lines.Line2D at 0x2aab7fcdaf60>]"
       ]
      },
-     "execution_count": 139,
+     "execution_count": 47,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
-       "<Figure size 1152x288 with 3 Axes>"
+       "<Figure size 1152x288 with 2 Axes>"
       ]
      },
      "metadata": {
@@ -1584,917 +1802,1631 @@
     }
    ],
    "source": [
-    "fig, axs = plt.subplots(1,3)\n",
+    "fig, axs = plt.subplots(1,2)\n",
     "fig.set_size_inches(16,4)\n",
-    "axs[0].plot(np.arange(len(loss_v)-10), loss_v[10:])\n",
+    "axs[0].plot(np.arange(len(loss_v_node)), loss_v_node)\n",
+    "# axs[1].plot(np.arange(len(loss_v_edge)), loss_v_edge)\n",
     "axs[1].plot(np.arange(len(acc_v_node)), acc_v_node)\n",
-    "axs[2].plot(np.arange(len(acc_v_edge)), acc_v_edge)"
+    "# axs[3].plot(np.arange(len(acc_v_edge)), acc_v_edge)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 56,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch:  1 , loss:  0.5599503517150879 , node accuracy:  0.038111395897190876 , edge accuracy:  0.7874483127827399  lr:  [0.001]\n",
-      "Epoch:  2 , loss:  0.6682133674621582 , node accuracy:  0.015668295751018683 , edge accuracy:  0.8321150353814678  lr:  [0.001]\n",
-      "Epoch:  3 , loss:  0.5618876814842224 , node accuracy:  0.02112377126953855 , edge accuracy:  0.8355207652216219  lr:  [0.001]\n",
-      "Epoch:  4 , loss:  0.734445333480835 , node accuracy:  0.02421896405351819 , edge accuracy:  0.8363695120549128  lr:  [0.001]\n",
-      "Epoch:  5 , loss:  0.5602551698684692 , node accuracy:  0.02242825347850675 , edge accuracy:  0.8370234732655845  lr:  [0.001]\n",
-      "Epoch:  6 , loss:  0.5669384002685547 , node accuracy:  0.02287129153861416 , edge accuracy:  0.8376109374701751  lr:  [0.001]\n",
-      "Epoch:  7 , loss:  0.4889724850654602 , node accuracy:  0.020894660193519564 , edge accuracy:  0.8485200864904985  lr:  [0.001]\n",
-      "Epoch:  8 , loss:  0.38022947311401367 , node accuracy:  0.022190369371594545 , edge accuracy:  0.8846958782953861  lr:  [0.001]\n",
-      "Epoch:  9 , loss:  0.35603076219558716 , node accuracy:  0.022660063948646725 , edge accuracy:  0.9033561456240042  lr:  [0.001]\n",
-      "Epoch:  10 , loss:  0.43030795454978943 , node accuracy:  0.023864331150873188 , edge accuracy:  0.912043992785652  lr:  [0.0009000000000000001]\n",
-      "Epoch:  11 , loss:  0.42047613859176636 , node accuracy:  0.024040804041532877 , edge accuracy:  0.922484200302477  lr:  [0.0009000000000000001]\n",
-      "Epoch:  12 , loss:  0.3376671075820923 , node accuracy:  0.024999088954484164 , edge accuracy:  0.9305282072930968  lr:  [0.0009000000000000001]\n",
-      "Epoch:  13 , loss:  0.30888134241104126 , node accuracy:  0.026108877362475993 , edge accuracy:  0.9328315428415174  lr:  [0.0009000000000000001]\n",
-      "Epoch:  14 , loss:  0.22948771715164185 , node accuracy:  0.026934554539233668 , edge accuracy:  0.9337742200251872  lr:  [0.0009000000000000001]\n",
-      "Epoch:  15 , loss:  0.27933305501937866 , node accuracy:  0.02833149099684576 , edge accuracy:  0.9368628239565009  lr:  [0.0009000000000000001]\n",
-      "Epoch:  16 , loss:  0.27099600434303284 , node accuracy:  0.02917336453832937 , edge accuracy:  0.93955031510614  lr:  [0.0009000000000000001]\n",
-      "Epoch:  17 , loss:  0.2604626417160034 , node accuracy:  0.02991974701278298 , edge accuracy:  0.9412265013208401  lr:  [0.0009000000000000001]\n",
-      "Epoch:  18 , loss:  0.37988629937171936 , node accuracy:  0.031116253456911595 , edge accuracy:  0.9422398482199178  lr:  [0.0009000000000000001]\n",
-      "Epoch:  19 , loss:  0.22471609711647034 , node accuracy:  0.031251560587226196 , edge accuracy:  0.9433266170469381  lr:  [0.0009000000000000001]\n",
-      "Epoch:  20 , loss:  0.3343443274497986 , node accuracy:  0.031403064082266736 , edge accuracy:  0.9442486082460727  lr:  [0.0008100000000000001]\n",
-      "Epoch:  21 , loss:  0.25551119446754456 , node accuracy:  0.031596745610447736 , edge accuracy:  0.946011622327191  lr:  [0.0008100000000000001]\n",
-      "Epoch:  22 , loss:  0.3524739742279053 , node accuracy:  0.03200131730433104 , edge accuracy:  0.9466308701475052  lr:  [0.0008100000000000001]\n",
-      "Epoch:  23 , loss:  0.21147102117538452 , node accuracy:  0.03289549160690883 , edge accuracy:  0.9472581082622752  lr:  [0.0008100000000000001]\n",
-      "Epoch:  24 , loss:  0.38444021344184875 , node accuracy:  0.032404201876888736 , edge accuracy:  0.9486311071929074  lr:  [0.0008100000000000001]\n",
-      "Epoch:  25 , loss:  0.36394181847572327 , node accuracy:  0.03299705631071106 , edge accuracy:  0.948075160260892  lr:  [0.0008100000000000001]\n",
-      "Epoch:  26 , loss:  0.401293009519577 , node accuracy:  0.0334519042200978 , edge accuracy:  0.9492716624651035  lr:  [0.0008100000000000001]\n",
-      "Epoch:  27 , loss:  0.3061547577381134 , node accuracy:  0.033214357537450716 , edge accuracy:  0.949970902011024  lr:  [0.0008100000000000001]\n",
-      "Epoch:  28 , loss:  0.23824721574783325 , node accuracy:  0.034131476690056915 , edge accuracy:  0.951233102191871  lr:  [0.0008100000000000001]\n",
-      "Epoch:  29 , loss:  0.2962646186351776 , node accuracy:  0.033924973039801215 , edge accuracy:  0.9511691798362256  lr:  [0.0008100000000000001]\n",
-      "Epoch:  30 , loss:  0.3002249300479889 , node accuracy:  0.03414699820625261 , edge accuracy:  0.9513690259786668  lr:  [0.0007290000000000002]\n",
-      "Epoch:  31 , loss:  0.21453049778938293 , node accuracy:  0.03389021834049347 , edge accuracy:  0.952017127640071  lr:  [0.0007290000000000002]\n",
-      "Epoch:  32 , loss:  0.3410756289958954 , node accuracy:  0.035327645709920405 , edge accuracy:  0.9529358339403737  lr:  [0.0007290000000000002]\n",
-      "Epoch:  33 , loss:  0.38386762142181396 , node accuracy:  0.03475706127759624 , edge accuracy:  0.9531690617574298  lr:  [0.0007290000000000002]\n",
-      "Epoch:  34 , loss:  0.3646724224090576 , node accuracy:  0.034717245214311646 , edge accuracy:  0.9528793691928871  lr:  [0.0007290000000000002]\n",
-      "Epoch:  35 , loss:  0.32825997471809387 , node accuracy:  0.03493285931972569 , edge accuracy:  0.9531853086894896  lr:  [0.0007290000000000002]\n",
-      "Epoch:  36 , loss:  0.5765171051025391 , node accuracy:  0.03487077325494293 , edge accuracy:  0.9542378968124496  lr:  [0.0007290000000000002]\n"
+      "Epoch:  1 , loss:  7.8298797607421875 , node accuracy:  10.314665316297479 %, lr:  [0.002]\n",
+      "Epoch:  2 , loss:  1.0117639303207397 , node accuracy:  10.767869025348716 %, lr:  [0.002]\n",
+      "Epoch:  3 , loss:  0.6485083103179932 , node accuracy:  11.025073900627893 %, lr:  [0.002]\n",
+      "Epoch:  4 , loss:  1.7310452461242676 , node accuracy:  11.719928129110919 %, lr:  [0.002]\n",
+      "Epoch:  5 , loss:  3.149071216583252 , node accuracy:  12.244416823256483 %, lr:  [0.0018000000000000002]\n",
+      "Epoch:  6 , loss:  3.1163299083709717 , node accuracy:  12.224189185607408 %, lr:  [0.0018000000000000002]\n",
+      "Epoch:  7 , loss:  0.7040692567825317 , node accuracy:  12.341369983022735 %, lr:  [0.0018000000000000002]\n",
+      "Epoch:  8 , loss:  1.4793506860733032 , node accuracy:  12.13693134181778 %, lr:  [0.0018000000000000002]\n",
+      "Epoch:  9 , loss:  1.5536837577819824 , node accuracy:  12.318735953998166 %, lr:  [0.0018000000000000002]\n",
+      "Epoch:  10 , loss:  1.4407217502593994 , node accuracy:  12.185198670276952 %, lr:  [0.0016200000000000001]\n",
+      "Epoch:  11 , loss:  0.8648194670677185 , node accuracy:  12.189383698756071 %, lr:  [0.0016200000000000001]\n",
+      "Epoch:  12 , loss:  2.06369948387146 , node accuracy:  12.194335982456362 %, lr:  [0.0016200000000000001]\n",
+      "Epoch:  13 , loss:  0.5239660739898682 , node accuracy:  12.255332772539518 %, lr:  [0.0016200000000000001]\n",
+      "Epoch:  14 , loss:  3.1103923320770264 , node accuracy:  12.367491535779902 %, lr:  [0.0016200000000000001]\n",
+      "Epoch:  15 , loss:  2.681072235107422 , node accuracy:  12.039489928728965 %, lr:  [0.0014580000000000003]\n",
+      "Epoch:  16 , loss:  0.9111814498901367 , node accuracy:  11.758639642542768 %, lr:  [0.0014580000000000003]\n",
+      "Epoch:  17 , loss:  2.0038809776306152 , node accuracy:  11.873588424769231 %, lr:  [0.0014580000000000003]\n",
+      "Epoch:  18 , loss:  0.657538115978241 , node accuracy:  11.901035236544786 %, lr:  [0.0014580000000000003]\n",
+      "Epoch:  19 , loss:  3.1368823051452637 , node accuracy:  11.584856334947359 %, lr:  [0.0014580000000000003]\n",
+      "Epoch:  20 , loss:  0.9791580438613892 , node accuracy:  11.83166838950339 %, lr:  [0.0013122000000000001]\n",
+      "Epoch:  21 , loss:  14.163942337036133 , node accuracy:  11.717870490108686 %, lr:  [0.0013122000000000001]\n",
+      "Epoch:  22 , loss:  10.580265045166016 , node accuracy:  11.751769220789548 %, lr:  [0.0013122000000000001]\n",
+      "Epoch:  23 , loss:  1.9701335430145264 , node accuracy:  11.664720628423876 %, lr:  [0.0013122000000000001]\n",
+      "Epoch:  24 , loss:  3.135298490524292 , node accuracy:  11.664650877949224 %, lr:  [0.0013122000000000001]\n",
+      "Epoch:  25 , loss:  2.820740222930908 , node accuracy:  11.675915579605519 %, lr:  [0.00118098]\n",
+      "Epoch:  26 , loss:  19.401948928833008 , node accuracy:  11.735412734483658 %, lr:  [0.00118098]\n",
+      "Epoch:  27 , loss:  2.0894126892089844 , node accuracy:  11.529509333311013 %, lr:  [0.00118098]\n",
+      "Epoch:  28 , loss:  1.734830379486084 , node accuracy:  11.748421198006252 %, lr:  [0.00118098]\n",
+      "Epoch:  29 , loss:  7.805884838104248 , node accuracy:  11.524208297237463 %, lr:  [0.00118098]\n",
+      "Epoch:  30 , loss:  5.154942035675049 , node accuracy:  11.54433130917456 %, lr:  [0.001062882]\n",
+      "Epoch:  31 , loss:  1.7903071641921997 , node accuracy:  11.473743828826755 %, lr:  [0.001062882]\n",
+      "Epoch:  32 , loss:  2.725918769836426 , node accuracy:  11.547504955771224 %, lr:  [0.001062882]\n",
+      "Epoch:  33 , loss:  1.4845727682113647 , node accuracy:  11.59085487576743 %, lr:  [0.001062882]\n",
+      "Epoch:  34 , loss:  3.4243240356445312 , node accuracy:  11.669742662598818 %, lr:  [0.001062882]\n",
+      "Epoch:  35 , loss:  0.8225410580635071 , node accuracy:  11.883458116932486 %, lr:  [0.0009565938000000002]\n",
+      "Epoch:  36 , loss:  5.56985330581665 , node accuracy:  11.531113594228009 %, lr:  [0.0009565938000000002]\n",
+      "Epoch:  37 , loss:  2.2502315044403076 , node accuracy:  11.629043260639389 %, lr:  [0.0009565938000000002]\n",
+      "Epoch:  38 , loss:  2.6389873027801514 , node accuracy:  11.574986642784104 %, lr:  [0.0009565938000000002]\n",
+      "Epoch:  39 , loss:  2.644425630569458 , node accuracy:  11.56372194112781 %, lr:  [0.0009565938000000002]\n",
+      "Epoch:  40 , loss:  2.377685070037842 , node accuracy:  11.564419445874329 %, lr:  [0.0008609344200000002]\n",
+      "Epoch:  41 , loss:  2.004587173461914 , node accuracy:  11.586111843491095 %, lr:  [0.0008609344200000002]\n",
+      "Epoch:  42 , loss:  1.0172009468078613 , node accuracy:  11.527312193359476 %, lr:  [0.0008609344200000002]\n",
+      "Epoch:  43 , loss:  0.7090755105018616 , node accuracy:  11.606548732564125 %, lr:  [0.0008609344200000002]\n",
+      "Epoch:  44 , loss:  0.6719939708709717 , node accuracy:  11.637831820445538 %, lr:  [0.0008609344200000002]\n",
+      "Epoch:  45 , loss:  1.5814356803894043 , node accuracy:  11.67131204827849 %, lr:  [0.0007748409780000002]\n",
+      "Epoch:  46 , loss:  0.8087761998176575 , node accuracy:  11.695724714406682 %, lr:  [0.0007748409780000002]\n",
+      "Epoch:  47 , loss:  0.5761278867721558 , node accuracy:  11.631484527252207 %, lr:  [0.0007748409780000002]\n",
+      "Epoch:  48 , loss:  0.7593028545379639 , node accuracy:  11.580357429332306 %, lr:  [0.0007748409780000002]\n",
+      "Epoch:  49 , loss:  0.47495603561401367 , node accuracy:  11.683134753732 %, lr:  [0.0007748409780000002]\n",
+      "Epoch:  50 , loss:  2.309623956680298 , node accuracy:  11.79714190455066 %, lr:  [0.0006973568802000002]\n",
+      "Epoch:  51 , loss:  0.7936303019523621 , node accuracy:  11.612442647672218 %, lr:  [0.0006973568802000002]\n",
+      "Epoch:  52 , loss:  0.909810483455658 , node accuracy:  11.752048222688154 %, lr:  [0.0006973568802000002]\n",
+      "Epoch:  53 , loss:  2.012195348739624 , node accuracy:  11.838817813155218 %, lr:  [0.0006973568802000002]\n",
+      "Epoch:  54 , loss:  1.0240366458892822 , node accuracy:  11.78322668485759 %, lr:  [0.0006973568802000002]\n",
+      "Epoch:  55 , loss:  0.6847499012947083 , node accuracy:  11.88534137974809 %, lr:  [0.0006276211921800002]\n",
+      "Epoch:  56 , loss:  2.815023183822632 , node accuracy:  11.667057269324719 %, lr:  [0.0006276211921800002]\n",
+      "Epoch:  57 , loss:  0.7649250030517578 , node accuracy:  11.97273872448702 %, lr:  [0.0006276211921800002]\n",
+      "Epoch:  58 , loss:  1.5241997241973877 , node accuracy:  11.904976138362622 %, lr:  [0.0006276211921800002]\n",
+      "Epoch:  59 , loss:  22.98513412475586 , node accuracy:  11.873379173345274 %, lr:  [0.0006276211921800002]\n",
+      "Epoch:  60 , loss:  1.226009726524353 , node accuracy:  11.875994816144724 %, lr:  [0.0005648590729620002]\n",
+      "Epoch:  61 , loss:  2.1838572025299072 , node accuracy:  11.900825985120829 %, lr:  [0.0005648590729620002]\n",
+      "Epoch:  62 , loss:  11.152305603027344 , node accuracy:  12.026376839494393 %, lr:  [0.0005648590729620002]\n",
+      "Epoch:  63 , loss:  0.7372475266456604 , node accuracy:  12.024633077628092 %, lr:  [0.0005648590729620002]\n",
+      "Epoch:  64 , loss:  1.0230926275253296 , node accuracy:  11.96942557694105 %, lr:  [0.0005648590729620002]\n",
+      "Epoch:  65 , loss:  7.844793319702148 , node accuracy:  12.10815927102384 %, lr:  [0.0005083731656658002]\n",
+      "Epoch:  66 , loss:  2.3028314113616943 , node accuracy:  12.079422075467223 %, lr:  [0.0005083731656658002]\n",
+      "Epoch:  67 , loss:  0.5736889839172363 , node accuracy:  11.920669995159317 %, lr:  [0.0005083731656658002]\n",
+      "Epoch:  68 , loss:  10.350483894348145 , node accuracy:  12.140453740787706 %, lr:  [0.0005083731656658002]\n",
+      "Epoch:  69 , loss:  0.7693389654159546 , node accuracy:  12.52934751220982 %, lr:  [0.0005083731656658002]\n",
+      "Epoch:  70 , loss:  2.8109023571014404 , node accuracy:  12.097347947452782 %, lr:  [0.0004575358490992202]\n",
+      "Epoch:  71 , loss:  2.0100276470184326 , node accuracy:  12.118377715560355 %, lr:  [0.0004575358490992202]\n",
+      "Epoch:  72 , loss:  2.4173696041107178 , node accuracy:  12.151299939596088 %, lr:  [0.0004575358490992202]\n",
+      "Epoch:  73 , loss:  0.5691433548927307 , node accuracy:  12.753839414877218 %, lr:  [0.0004575358490992202]\n",
+      "Epoch:  74 , loss:  1.4412156343460083 , node accuracy:  12.68415869069989 %, lr:  [0.0004575358490992202]\n",
+      "Epoch:  75 , loss:  11.016839027404785 , node accuracy:  13.86974238359692 %, lr:  [0.0004117822641892982]\n",
+      "Epoch:  76 , loss:  1.72090482711792 , node accuracy:  14.29895192936788 %, lr:  [0.0004117822641892982]\n",
+      "Epoch:  77 , loss:  13.964278221130371 , node accuracy:  14.26630870723075 %, lr:  [0.0004117822641892982]\n",
+      "Epoch:  78 , loss:  10.181095123291016 , node accuracy:  15.102198395460082 %, lr:  [0.0004117822641892982]\n"
      ]
     },
     {
-     "ename": "KeyboardInterrupt",
-     "evalue": "",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
-      "\u001b[0;32m<ipython-input-56-f7037618432f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     23\u001b[0m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlosses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m         \u001b[0mloss_v\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m         \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0medge_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msigmoid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0medge_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/site-packages/torch/tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph)\u001b[0m\n\u001b[1;32m    116\u001b[0m                 \u001b[0mproducts\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mDefaults\u001b[0m \u001b[0mto\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \"\"\"\n\u001b[0;32m--> 118\u001b[0;31m         \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mregister_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/site-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables)\u001b[0m\n\u001b[1;32m     91\u001b[0m     Variable._execution_engine.run_backward(\n\u001b[1;32m     92\u001b[0m         \u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_tensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m         allow_unreachable=True)  # allow_unreachable flag\n\u001b[0m\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Epoch:  79 , loss:  5.148473739624023 , node accuracy:  14.501577058231883 %, lr:  [0.0004117822641892982]\n",
+      "Epoch:  80 , loss:  9.581193923950195 , node accuracy:  14.473607117896437 %, lr:  [0.00037060403777036834]\n",
+      "Epoch:  81 , loss:  0.7985799312591553 , node accuracy:  15.182934569869749 %, lr:  [0.00037060403777036834]\n",
+      "Epoch:  82 , loss:  0.9458838701248169 , node accuracy:  13.813942003875338 %, lr:  [0.00037060403777036834]\n",
+      "Epoch:  83 , loss:  0.9360403418540955 , node accuracy:  14.14884890791682 %, lr:  [0.00037060403777036834]\n",
+      "Epoch:  84 , loss:  5.52785587310791 , node accuracy:  14.467434200889736 %, lr:  [0.00037060403777036834]\n",
+      "Epoch:  85 , loss:  0.7431200742721558 , node accuracy:  13.697737713105138 %, lr:  [0.0003335436339933315]\n",
+      "Epoch:  86 , loss:  0.7001522779464722 , node accuracy:  13.76832519345294 %, lr:  [0.0003335436339933315]\n",
+      "Epoch:  87 , loss:  0.9355418086051941 , node accuracy:  10.90213868905378 %, lr:  [0.0003335436339933315]\n",
+      "Epoch:  88 , loss:  0.5604159235954285 , node accuracy:  10.878597903858736 %, lr:  [0.0003335436339933315]\n",
+      "Epoch:  89 , loss:  1.7915538549423218 , node accuracy:  11.209075652759818 %, lr:  [0.0003335436339933315]\n",
+      "Epoch:  90 , loss:  2.347923517227173 , node accuracy:  11.356667657123406 %, lr:  [0.00030018927059399835]\n",
+      "Epoch:  91 , loss:  0.772796630859375 , node accuracy:  11.738063252520433 %, lr:  [0.00030018927059399835]\n",
+      "Epoch:  92 , loss:  2.7739486694335938 , node accuracy:  11.910312049673498 %, lr:  [0.00030018927059399835]\n",
+      "Epoch:  93 , loss:  0.5019703507423401 , node accuracy:  12.016332771144507 %, lr:  [0.00030018927059399835]\n",
+      "Epoch:  94 , loss:  0.8528554439544678 , node accuracy:  13.546204806923711 %, lr:  [0.00030018927059399835]\n",
+      "Epoch:  95 , loss:  2.1678125858306885 , node accuracy:  14.656702113857884 %, lr:  [0.0002701703435345986]\n",
+      "Epoch:  96 , loss:  2.791595935821533 , node accuracy:  14.075994537142824 %, lr:  [0.0002701703435345986]\n",
+      "Epoch:  97 , loss:  1.2867095470428467 , node accuracy:  14.553227284711673 %, lr:  [0.0002701703435345986]\n",
+      "Epoch:  98 , loss:  2.2598767280578613 , node accuracy:  14.856781350397089 %, lr:  [0.0002701703435345986]\n",
+      "Epoch:  99 , loss:  0.9299724698066711 , node accuracy:  14.41166869640548 %, lr:  [0.0002701703435345986]\n",
+      "Epoch:  100 , loss:  1.531699538230896 , node accuracy:  13.583067932777283 %, lr:  [0.0002431533091811387]\n"
      ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "[<matplotlib.lines.Line2D at 0x2aab69464ef0>]"
+      ]
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 1152x288 with 2 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
     }
    ],
    "source": [
     "model.train()\n",
-    "loss_v = []\n",
+    "loss_v_node = []\n",
+    "# loss_v_edge = []\n",
     "acc_v_node = []\n",
-    "acc_v_edge = []\n",
+    "# acc_v_edge = []\n",
     "ep = 0\n",
     "for epoch in range(100):\n",
     "    ep += 1\n",
     "    node_correct = 0\n",
-    "    edge_correct = 0\n",
+    "#     edge_correct = 0\n",
     "    node_total = 0\n",
-    "    edge_total = 0 \n",
+    "#     edge_total = 0 \n",
     "    for batch in train_loader:\n",
     "#         print(batch)\n",
     "        optimizer.zero_grad()\n",
     "        data = batch.to(device)\n",
-    "        edge_pred, node_pred = model(data)\n",
+    "        node_pred = model(data)\n",
     "#         print(edge_pred.shape, data.y_edges.shape, node_pred.shape, data.y_params.shape)\n",
     "#         print(edge_pred, data.y_edges, node_pred, data.y_params)\n",
-    "        losses = [F.binary_cross_entropy_with_logits(edge_pred.float(), data.y_edges.float()), 0.001*F.mse_loss(node_pred.float(), data.y_params.float())]\n",
+    "#         losses = [F.binary_cross_entropy_with_logits(edge_pred.float(), data.y_edges.float()), F.mse_loss(node_pred.float(), data.y_params.float())]\n",
     "#         print(node_pred, data.y_nodes)\n",
     "#         print(\"Losses: \", losses[0].item(), losses[1].item())\n",
-    "#         loss = F.mse_loss(node_pred, data.y_params.float())\n",
-    "        loss = sum(losses)\n",
-    "        loss_v.append(loss)\n",
+    "        loss = F.mse_loss(node_pred, data.y_params)\n",
+    "#         loss = sum(losses)\n",
+    "#         loss_v_edge.append(losses[0])\n",
+    "        loss_v_node.append(loss)\n",
     "        loss.backward()\n",
     "        optimizer.step()\n",
-    "        edge_pred = torch.sigmoid(edge_pred)\n",
-    "        edge_correct += ((edge_pred > 0.5) == (data.y_edges > 0.5)).sum().item()\n",
+    "#         edge_pred = torch.sigmoid(edge_pred)\n",
+    "#         edge_correct += ((edge_pred > 0.5) == (data.y_edges > 0.5)).sum().item()\n",
     "        # A \"correct\" track parameter is one where the pred. is within 5% of the truth\n",
     "#         print(node_pred, data.y_nodes)\n",
     "#         print((((node_pred - data.y_nodes)/data.y_nodes)**2 < 0.05**2).sum().item())\n",
     "        node_correct += (((node_pred - data.y_params)/data.y_params)**2 < 0.1**2).sum().item()\n",
     "        node_total += len(node_pred)\n",
-    "        edge_total += len(edge_pred)\n",
+    "#         edge_total += len(edge_pred)\n",
     "#         print(out, data.y, )\n",
     "    node_acc = node_correct/node_total\n",
-    "    edge_acc = edge_correct / edge_total\n",
+    "#     edge_acc = edge_correct / edge_total\n",
     "    scheduler.step()\n",
-    "    print(\"Epoch: \" , ep, \", loss: \", loss.item(), \", node accuracy: \", node_acc, \", edge accuracy: \", edge_acc, \" lr: \", scheduler.get_lr())\n",
+    "#     print(\"Epoch: \" , ep, \", loss: \", loss.item(), \", node accuracy: \", node_acc*100, \"%, edge accuracy: \", edge_acc*100, \"%, lr: \", scheduler.get_lr())\n",
+    "    print(\"Epoch: \" , ep, \", loss: \", loss.item(), \", node accuracy: \", node_acc*100, \"%, lr: \", scheduler.get_lr())\n",
     "    acc_v_node.append(node_acc)\n",
-    "    acc_v_edge.append(edge_acc)\n",
+    "#     acc_v_edge.append(edge_acc)\n",
     "\n",
     "#     if node_acc > 0.5:\n",
     "#         break\n",
-    "fig, axs = plt.subplots(1,3)\n",
+    "fig, axs = plt.subplots(1,2)\n",
     "fig.set_size_inches(16,4)\n",
-    "axs[0].plot(np.arange(len(loss_v)-10), loss_v[10:])\n",
+    "axs[0].plot(np.arange(len(loss_v_node)-10), loss_v_node[10:])\n",
+    "# axs[1].plot(np.arange(len(loss_v_edge)-10), loss_v_edge[10:])\n",
     "axs[1].plot(np.arange(len(acc_v_node)), acc_v_node)\n",
-    "axs[2].plot(np.arange(len(acc_v_edge)), acc_v_edge)"
+    "# axs[3].plot(np.arange(len(acc_v_edge)), acc_v_edge)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 42,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "13.484405994415283 13.484405994415283\n"
-     ]
-    }
-   ],
-   "source": [
-    "torch.cuda.empty_cache()\n",
-    "torch.cuda.reset_max_memory_allocated()\n",
-    "torch.cuda.reset_max_memory_cached()\n",
-    "print(torch.cuda.memory_allocated(0)/1024**3, torch.cuda.max_memory_allocated(0)/1024**3)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 57,
+   "execution_count": 52,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "tensor([6.3371e-01, 1.2481e-04, 9.6756e-05,  ..., 9.9400e-01, 9.9787e-01,\n",
-      "        8.2649e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 1., 1.], device='cuda:0') tensor([[ 1.5715],\n",
-      "        [ 0.5701],\n",
-      "        [13.6160],\n",
-      "        ...,\n",
-      "        [ 1.3305],\n",
-      "        [ 7.2867],\n",
-      "        [ 6.9683]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[63.3021],\n",
-      "        [63.3021],\n",
-      "        [63.3021],\n",
-      "        ...,\n",
-      "        [ 0.3630],\n",
-      "        [ 0.3630],\n",
-      "        [ 0.3630]], device='cuda:0')\n",
-      "Accuracy: 0.0375\n",
-      "tensor([9.9742e-01, 1.4877e-04, 3.3513e-04,  ..., 8.9183e-01, 7.1162e-01,\n",
-      "        7.0020e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[ 0.7292],\n",
-      "        [ 0.5435],\n",
-      "        [ 0.9654],\n",
-      "        ...,\n",
-      "        [14.1774],\n",
-      "        [13.7110],\n",
-      "        [13.0482]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.4460],\n",
-      "        [0.4460],\n",
-      "        [0.4460],\n",
-      "        ...,\n",
-      "        [1.8646],\n",
-      "        [1.8646],\n",
-      "        [1.8646]], device='cuda:0')\n",
-      "Accuracy: 0.0337\n",
-      "tensor([9.7150e-01, 1.0385e-04, 1.2531e-03,  ..., 2.0462e-03, 2.8011e-01,\n",
-      "        6.7641e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[1.1098],\n",
-      "        [0.5423],\n",
-      "        [0.5456],\n",
-      "        ...,\n",
-      "        [0.9280],\n",
-      "        [0.8626],\n",
-      "        [1.1622]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0569],\n",
-      "        [0.0569],\n",
-      "        [0.0569],\n",
-      "        ...,\n",
-      "        [8.0154],\n",
-      "        [8.0154],\n",
-      "        [8.0154]], device='cuda:0')\n",
-      "Accuracy: 0.0363\n",
-      "tensor([2.4325e-01, 1.1887e-04, 5.5876e-04,  ..., 9.6752e-01, 2.1461e-01,\n",
-      "        7.7381e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6849],\n",
-      "        [0.5458],\n",
-      "        [0.9192],\n",
-      "        ...,\n",
-      "        [0.6772],\n",
-      "        [7.2738],\n",
-      "        [6.1074]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[2.1139],\n",
-      "        [2.1139],\n",
-      "        [2.1139],\n",
-      "        ...,\n",
-      "        [3.9318],\n",
-      "        [3.9318],\n",
-      "        [3.9318]], device='cuda:0')\n",
-      "Accuracy: 0.0361\n",
-      "tensor([9.9032e-01, 1.2744e-01, 1.6800e-04,  ..., 9.8953e-01, 8.3447e-01,\n",
-      "        1.5724e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 1., 0.], device='cuda:0') tensor([[0.7098],\n",
-      "        [0.5436],\n",
-      "        [0.5460],\n",
-      "        ...,\n",
-      "        [1.0879],\n",
-      "        [2.7611],\n",
-      "        [8.4110]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[2.5095],\n",
-      "        [2.5095],\n",
-      "        [2.5095],\n",
-      "        ...,\n",
-      "        [5.1271],\n",
-      "        [5.1271],\n",
-      "        [5.1271]], device='cuda:0')\n",
-      "Accuracy: 0.0325\n",
-      "tensor([8.6973e-01, 1.6951e-04, 1.6392e-04,  ..., 9.6008e-02, 9.9416e-01,\n",
-      "        8.2875e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[ 0.8158],\n",
-      "        [ 0.5432],\n",
-      "        [ 0.6423],\n",
-      "        ...,\n",
-      "        [ 3.0944],\n",
-      "        [10.2323],\n",
-      "        [ 0.9616]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.5287],\n",
-      "        [0.5287],\n",
-      "        [0.5287],\n",
-      "        ...,\n",
-      "        [6.7962],\n",
-      "        [6.7962],\n",
-      "        [6.7962]], device='cuda:0')\n",
-      "Accuracy: 0.0351\n",
-      "tensor([9.9511e-01, 1.3140e-04, 1.4977e-04,  ..., 1.9575e-04, 9.9504e-01,\n",
-      "        9.8382e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.6525],\n",
-      "        [0.5424],\n",
-      "        [0.8683],\n",
-      "        ...,\n",
-      "        [1.4378],\n",
-      "        [2.9625],\n",
-      "        [2.0328]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[3.4463],\n",
-      "        [3.4463],\n",
-      "        [3.4463],\n",
-      "        ...,\n",
-      "        [0.5728],\n",
-      "        [0.5728],\n",
-      "        [0.5728]], device='cuda:0')\n",
-      "Accuracy: 0.0354\n",
-      "tensor([7.8903e-01, 2.8118e-03, 5.7416e-04,  ..., 4.6416e-01, 1.1951e-04,\n",
-      "        9.4196e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[3.9413],\n",
-      "        [0.9036],\n",
-      "        [9.4332],\n",
-      "        ...,\n",
-      "        [0.8195],\n",
-      "        [1.9732],\n",
-      "        [3.7097]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0314],\n",
-      "        [0.0314],\n",
-      "        [0.0314],\n",
-      "        ...,\n",
-      "        [0.0686],\n",
-      "        [0.0686],\n",
-      "        [0.0686]], device='cuda:0')\n",
-      "Accuracy: 0.0342\n",
-      "tensor([8.7638e-01, 1.0924e-04, 1.0771e-04,  ..., 1.2790e-02, 2.9906e-02,\n",
-      "        1.3434e-02], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') tensor([[0.7203],\n",
-      "        [0.5467],\n",
-      "        [1.0233],\n",
-      "        ...,\n",
-      "        [0.5462],\n",
-      "        [0.5487],\n",
-      "        [3.3905]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2186],\n",
-      "        [0.2186],\n",
-      "        [0.2186],\n",
-      "        ...,\n",
-      "        [0.0403],\n",
-      "        [0.0403],\n",
-      "        [0.0403]], device='cuda:0')\n",
-      "Accuracy: 0.0349\n",
-      "tensor([9.8768e-01, 9.7742e-05, 2.7992e-02,  ..., 1.7775e-01, 1.6944e-01,\n",
-      "        2.2894e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.7063],\n",
-      "        [0.5915],\n",
-      "        [1.0360],\n",
-      "        ...,\n",
-      "        [3.9350],\n",
-      "        [1.1334],\n",
-      "        [1.5988]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[ 0.0349],\n",
-      "        [ 0.0349],\n",
-      "        [ 0.0349],\n",
-      "        ...,\n",
-      "        [32.7402],\n",
-      "        [32.7402],\n",
-      "        [32.7402]], device='cuda:0')\n",
-      "Accuracy: 0.0358\n",
-      "tensor([9.8840e-01, 1.9351e-04, 2.5222e-04,  ..., 4.7956e-03, 1.0587e-03,\n",
-      "        9.4449e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') tensor([[0.9140],\n",
-      "        [0.5431],\n",
-      "        [0.5767],\n",
-      "        ...,\n",
-      "        [0.5397],\n",
-      "        [0.7263],\n",
-      "        [8.6720]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.3607],\n",
-      "        [0.3607],\n",
-      "        [0.3607],\n",
-      "        ...,\n",
-      "        [0.1135],\n",
-      "        [0.1135],\n",
-      "        [0.1135]], device='cuda:0')\n",
-      "Accuracy: 0.0335\n",
-      "tensor([8.6358e-02, 1.4355e-01, 1.9970e-04,  ..., 9.9696e-01, 8.0943e-04,\n",
-      "        9.7098e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 1., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[7.1680],\n",
-      "        [0.5435],\n",
-      "        [0.9238],\n",
-      "        ...,\n",
-      "        [0.6047],\n",
-      "        [2.3098],\n",
-      "        [5.3418]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[4.3154],\n",
-      "        [4.3154],\n",
-      "        [4.3154],\n",
-      "        ...,\n",
-      "        [0.2060],\n",
-      "        [0.2060],\n",
-      "        [0.2060]], device='cuda:0')\n",
-      "Accuracy: 0.0345\n",
-      "tensor([4.3749e-01, 1.7056e-04, 1.1816e-04,  ..., 9.6023e-01, 9.9551e-01,\n",
-      "        1.8150e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 1., 0.], device='cuda:0') tensor([[ 0.7187],\n",
-      "        [ 0.5534],\n",
-      "        [ 0.8164],\n",
-      "        ...,\n",
-      "        [15.4443],\n",
-      "        [ 6.8037],\n",
-      "        [ 5.4404]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[2.2738],\n",
-      "        [2.2738],\n",
-      "        [2.2738],\n",
-      "        ...,\n",
-      "        [0.0978],\n",
-      "        [0.0978],\n",
-      "        [0.0978]], device='cuda:0')\n",
-      "Accuracy: 0.0350\n",
-      "tensor([9.2696e-05, 8.7801e-05, 9.5737e-05,  ..., 8.8211e-01, 1.6481e-03,\n",
-      "        9.2225e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([0., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.7574],\n",
-      "        [0.9120],\n",
-      "        [7.5483],\n",
-      "        ...,\n",
-      "        [0.5395],\n",
-      "        [0.8428],\n",
-      "        [6.1476]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[30.9913],\n",
-      "        [30.9913],\n",
-      "        [30.9913],\n",
-      "        ...,\n",
-      "        [ 0.3478],\n",
-      "        [ 0.3478],\n",
-      "        [ 0.3478]], device='cuda:0')\n",
-      "Accuracy: 0.0341\n",
-      "tensor([4.6446e-01, 1.5978e-04, 1.7472e-01,  ..., 5.8727e-01, 5.0097e-01,\n",
-      "        5.0055e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6067],\n",
-      "        [0.5435],\n",
-      "        [1.0965],\n",
-      "        ...,\n",
-      "        [0.9453],\n",
-      "        [0.8330],\n",
-      "        [1.0036]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2520],\n",
-      "        [0.2520],\n",
-      "        [0.2520],\n",
-      "        ...,\n",
-      "        [0.3966],\n",
-      "        [0.3966],\n",
-      "        [0.3966]], device='cuda:0')\n",
-      "Accuracy: 0.0348\n",
-      "tensor([7.9539e-01, 1.2997e-01, 1.9766e-04,  ..., 9.3179e-01, 1.4623e-02,\n",
-      "        9.8409e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.5707],\n",
-      "        [0.6216],\n",
-      "        [0.8513],\n",
-      "        ...,\n",
-      "        [0.6348],\n",
-      "        [0.6736],\n",
-      "        [0.8960]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0417],\n",
-      "        [0.0417],\n",
-      "        [0.0417],\n",
-      "        ...,\n",
-      "        [0.2276],\n",
-      "        [0.2276],\n",
-      "        [0.2276]], device='cuda:0')\n",
-      "Accuracy: 0.0355\n"
+      "tensor([[ 8.9318],\n",
+      "        [11.8650],\n",
+      "        [11.2290],\n",
+      "        ...,\n",
+      "        [ 0.7272],\n",
+      "        [ 0.6703],\n",
+      "        [ 0.7702]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.2125],\n",
+      "        [15.2125],\n",
+      "        [15.2125],\n",
+      "        ...,\n",
+      "        [ 0.5958],\n",
+      "        [ 0.5958],\n",
+      "        [ 0.5958]], device='cuda:0')\n",
+      "Accuracy: 39.7417%\n",
+      "tensor([[13.8930],\n",
+      "        [14.0282],\n",
+      "        [17.2821],\n",
+      "        ...,\n",
+      "        [ 1.9400],\n",
+      "        [ 1.5565],\n",
+      "        [ 1.8785]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[40.8148],\n",
+      "        [40.8148],\n",
+      "        [40.8148],\n",
+      "        ...,\n",
+      "        [ 1.7936],\n",
+      "        [ 1.7936],\n",
+      "        [ 1.7936]], device='cuda:0')\n",
+      "Accuracy: 40.2185%\n",
+      "tensor([[0.6895],\n",
+      "        [0.6651],\n",
+      "        [0.6577],\n",
+      "        ...,\n",
+      "        [1.0724],\n",
+      "        [1.4556],\n",
+      "        [1.4310]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9864],\n",
+      "        [18.9864],\n",
+      "        [18.9864],\n",
+      "        ...,\n",
+      "        [ 0.6766],\n",
+      "        [ 0.6766],\n",
+      "        [ 0.6766]], device='cuda:0')\n",
+      "Accuracy: 40.0350%\n",
+      "tensor([[1.1658],\n",
+      "        [1.1077],\n",
+      "        [0.6554],\n",
+      "        ...,\n",
+      "        [0.8939],\n",
+      "        [0.8615],\n",
+      "        [0.7666]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9864],\n",
+      "        [18.9864],\n",
+      "        [18.9864],\n",
+      "        ...,\n",
+      "        [ 0.6721],\n",
+      "        [ 0.6721],\n",
+      "        [ 0.6721]], device='cuda:0')\n",
+      "Accuracy: 40.3253%\n",
+      "tensor([[2.3222],\n",
+      "        [2.5033],\n",
+      "        [2.3553],\n",
+      "        ...,\n",
+      "        [0.9325],\n",
+      "        [0.8848],\n",
+      "        [0.8664]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[2.8667],\n",
+      "        [2.8667],\n",
+      "        [2.8667],\n",
+      "        ...,\n",
+      "        [0.8440],\n",
+      "        [0.8440],\n",
+      "        [0.8440]], device='cuda:0')\n",
+      "Accuracy: 40.4110%\n",
+      "tensor([[12.1352],\n",
+      "        [14.0357],\n",
+      "        [17.5757],\n",
+      "        ...,\n",
+      "        [ 0.7509],\n",
+      "        [ 0.8472],\n",
+      "        [ 0.9719]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.9097],\n",
+      "        [15.9097],\n",
+      "        [15.9097],\n",
+      "        ...,\n",
+      "        [ 0.8866],\n",
+      "        [ 0.8866],\n",
+      "        [ 0.8866]], device='cuda:0')\n",
+      "Accuracy: 40.0428%\n",
+      "tensor([[0.9942],\n",
+      "        [1.1208],\n",
+      "        [1.1194],\n",
+      "        ...,\n",
+      "        [0.9826],\n",
+      "        [0.8489],\n",
+      "        [0.9707]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.6542],\n",
+      "        [1.6542],\n",
+      "        [1.6542],\n",
+      "        ...,\n",
+      "        [1.2293],\n",
+      "        [1.2293],\n",
+      "        [1.2293]], device='cuda:0')\n",
+      "Accuracy: 38.8717%\n",
+      "tensor([[ 3.4424],\n",
+      "        [ 5.2534],\n",
+      "        [23.1656],\n",
+      "        ...,\n",
+      "        [ 0.8685],\n",
+      "        [ 0.5717],\n",
+      "        [ 0.5412]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[45.7979],\n",
+      "        [45.7979],\n",
+      "        [45.7979],\n",
+      "        ...,\n",
+      "        [ 0.5170],\n",
+      "        [ 0.5170],\n",
+      "        [ 0.5170]], device='cuda:0')\n",
+      "Accuracy: 39.7613%\n",
+      "tensor([[ 9.1288],\n",
+      "        [11.8913],\n",
+      "        [11.2297],\n",
+      "        ...,\n",
+      "        [ 0.7391],\n",
+      "        [ 0.9998],\n",
+      "        [ 0.6972]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.2125],\n",
+      "        [15.2125],\n",
+      "        [15.2125],\n",
+      "        ...,\n",
+      "        [ 1.6608],\n",
+      "        [ 1.6608],\n",
+      "        [ 1.6608]], device='cuda:0')\n",
+      "Accuracy: 40.3495%\n",
+      "tensor([[ 9.4903],\n",
+      "        [ 8.7859],\n",
+      "        [10.1595],\n",
+      "        ...,\n",
+      "        [ 1.2201],\n",
+      "        [ 1.3347],\n",
+      "        [ 1.2632]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[12.6091],\n",
+      "        [12.6091],\n",
+      "        [12.6091],\n",
+      "        ...,\n",
+      "        [ 1.7351],\n",
+      "        [ 1.7351],\n",
+      "        [ 1.7351]], device='cuda:0')\n",
+      "Accuracy: 39.1402%\n",
+      "tensor([[28.3547],\n",
+      "        [63.4533],\n",
+      "        [81.7252],\n",
+      "        ...,\n",
+      "        [ 0.7373],\n",
+      "        [ 0.6272],\n",
+      "        [ 0.6428]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[214.2887],\n",
+      "        [214.2887],\n",
+      "        [214.2887],\n",
+      "        ...,\n",
+      "        [  0.6889],\n",
+      "        [  0.6889],\n",
+      "        [  0.6889]], device='cuda:0')\n",
+      "Accuracy: 38.7976%\n",
+      "tensor([[1.1035],\n",
+      "        [1.3030],\n",
+      "        [2.1136],\n",
+      "        ...,\n",
+      "        [0.5246],\n",
+      "        [0.5279],\n",
+      "        [0.5917]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[77.3769],\n",
+      "        [77.3769],\n",
+      "        [77.3769],\n",
+      "        ...,\n",
+      "        [ 0.5297],\n",
+      "        [ 0.5297],\n",
+      "        [ 0.5297]], device='cuda:0')\n",
+      "Accuracy: 39.7328%\n",
+      "tensor([[0.9875],\n",
+      "        [0.9888],\n",
+      "        [0.9942],\n",
+      "        ...,\n",
+      "        [1.1358],\n",
+      "        [0.9484],\n",
+      "        [1.0132]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0031],\n",
+      "        [1.0031],\n",
+      "        [1.0031],\n",
+      "        ...,\n",
+      "        [1.0928],\n",
+      "        [1.0928],\n",
+      "        [1.0928]], device='cuda:0')\n",
+      "Accuracy: 39.4175%\n",
+      "tensor([[14.6370],\n",
+      "        [19.4894],\n",
+      "        [18.1789],\n",
+      "        ...,\n",
+      "        [ 0.9971],\n",
+      "        [ 0.8656],\n",
+      "        [ 0.9496]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[10.8352],\n",
+      "        [10.8352],\n",
+      "        [10.8352],\n",
+      "        ...,\n",
+      "        [ 0.6337],\n",
+      "        [ 0.6337],\n",
+      "        [ 0.6337]], device='cuda:0')\n",
+      "Accuracy: 39.8321%\n",
+      "tensor([[2.1587],\n",
+      "        [2.2499],\n",
+      "        [2.0766],\n",
+      "        ...,\n",
+      "        [0.8286],\n",
+      "        [1.1595],\n",
+      "        [1.3049]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.9701],\n",
+      "        [1.9701],\n",
+      "        [1.9701],\n",
+      "        ...,\n",
+      "        [0.6973],\n",
+      "        [0.6973],\n",
+      "        [0.6973]], device='cuda:0')\n",
+      "Accuracy: 39.2101%\n",
+      "tensor([[1.1895],\n",
+      "        [1.2553],\n",
+      "        [1.3382],\n",
+      "        ...,\n",
+      "        [0.6514],\n",
+      "        [0.6962],\n",
+      "        [0.6892]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.6419],\n",
+      "        [1.6419],\n",
+      "        [1.6419],\n",
+      "        ...,\n",
+      "        [0.7746],\n",
+      "        [0.7746],\n",
+      "        [0.7746]], device='cuda:0')\n",
+      "Accuracy: 39.8810%\n",
+      "tensor([[0.6917],\n",
+      "        [0.6471],\n",
+      "        [0.6083],\n",
+      "        ...,\n",
+      "        [0.9881],\n",
+      "        [0.6713],\n",
+      "        [0.7153]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[9.5957],\n",
+      "        [9.5957],\n",
+      "        [9.5957],\n",
+      "        ...,\n",
+      "        [0.5030],\n",
+      "        [0.5053],\n",
+      "        [0.5053]], device='cuda:0')\n",
+      "Accuracy: 39.1109%\n",
+      "tensor([[ 7.0304],\n",
+      "        [20.3012],\n",
+      "        [30.0342],\n",
+      "        ...,\n",
+      "        [ 0.7923],\n",
+      "        [ 1.3118],\n",
+      "        [ 1.0547]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[103.9713],\n",
+      "        [103.9713],\n",
+      "        [103.9713],\n",
+      "        ...,\n",
+      "        [  0.5964],\n",
+      "        [  0.5964],\n",
+      "        [  0.5964]], device='cuda:0')\n",
+      "Accuracy: 39.0858%\n",
+      "tensor([[ 9.0399],\n",
+      "        [11.7952],\n",
+      "        [11.1465],\n",
+      "        ...,\n",
+      "        [ 0.6030],\n",
+      "        [ 0.7784],\n",
+      "        [ 0.8715]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.2125],\n",
+      "        [15.2125],\n",
+      "        [15.2125],\n",
+      "        ...,\n",
+      "        [ 0.8757],\n",
+      "        [ 0.8757],\n",
+      "        [ 0.8757]], device='cuda:0')\n",
+      "Accuracy: 39.4866%\n",
+      "tensor([[0.9135],\n",
+      "        [1.0143],\n",
+      "        [1.2914],\n",
+      "        ...,\n",
+      "        [0.8385],\n",
+      "        [0.8471],\n",
+      "        [0.7578]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0432],\n",
+      "        [1.0432],\n",
+      "        [1.0432],\n",
+      "        ...,\n",
+      "        [0.5182],\n",
+      "        [0.5182],\n",
+      "        [0.5182]], device='cuda:0')\n",
+      "Accuracy: 40.1606%\n",
+      "tensor([[1.6345],\n",
+      "        [1.6915],\n",
+      "        [1.5431],\n",
+      "        ...,\n",
+      "        [0.6044],\n",
+      "        [0.7311],\n",
+      "        [0.9333]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.9438],\n",
+      "        [1.9438],\n",
+      "        [1.9438],\n",
+      "        ...,\n",
+      "        [0.5980],\n",
+      "        [0.5980],\n",
+      "        [0.5980]], device='cuda:0')\n",
+      "Accuracy: 39.1989%\n",
+      "tensor([[10.2383],\n",
+      "        [ 8.0740],\n",
+      "        [ 7.1587],\n",
+      "        ...,\n",
+      "        [ 1.0393],\n",
+      "        [ 1.1273],\n",
+      "        [ 1.0783]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.2037],\n",
+      "        [7.2037],\n",
+      "        [7.2037],\n",
+      "        ...,\n",
+      "        [1.1689],\n",
+      "        [1.1689],\n",
+      "        [1.1689]], device='cuda:0')\n",
+      "Accuracy: 39.5244%\n",
+      "tensor([[0.7564],\n",
+      "        [0.7558],\n",
+      "        [0.6647],\n",
+      "        ...,\n",
+      "        [0.6475],\n",
+      "        [0.6273],\n",
+      "        [0.6765]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7752],\n",
+      "        [0.7752],\n",
+      "        [0.7752],\n",
+      "        ...,\n",
+      "        [0.5488],\n",
+      "        [0.5488],\n",
+      "        [0.5488]], device='cuda:0')\n",
+      "Accuracy: 40.0390%\n",
+      "tensor([[ 2.1219],\n",
+      "        [ 4.1635],\n",
+      "        [31.8953],\n",
+      "        ...,\n",
+      "        [ 0.7448],\n",
+      "        [ 0.6810],\n",
+      "        [ 0.6063]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[103.9713],\n",
+      "        [103.9713],\n",
+      "        [103.9713],\n",
+      "        ...,\n",
+      "        [  0.6936],\n",
+      "        [  0.6936],\n",
+      "        [  0.6936]], device='cuda:0')\n",
+      "Accuracy: 40.3640%\n",
+      "tensor([[5.5135],\n",
+      "        [4.3961],\n",
+      "        [4.6118],\n",
+      "        ...,\n",
+      "        [0.6515],\n",
+      "        [0.7172],\n",
+      "        [0.7335]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[4.7416],\n",
+      "        [4.7416],\n",
+      "        [4.7416],\n",
+      "        ...,\n",
+      "        [0.5174],\n",
+      "        [0.5174],\n",
+      "        [0.5174]], device='cuda:0')\n",
+      "Accuracy: 41.8565%\n",
+      "tensor([[0.7226],\n",
+      "        [0.8478],\n",
+      "        [0.6117],\n",
+      "        ...,\n",
+      "        [0.7012],\n",
+      "        [0.7081],\n",
+      "        [0.6395]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.2959],\n",
+      "        [18.2959],\n",
+      "        [18.2959],\n",
+      "        ...,\n",
+      "        [ 0.5716],\n",
+      "        [ 0.5716],\n",
+      "        [ 0.5716]], device='cuda:0')\n",
+      "Accuracy: 39.6079%\n",
+      "tensor([[0.7796],\n",
+      "        [0.8318],\n",
+      "        [0.7697],\n",
+      "        ...,\n",
+      "        [0.9296],\n",
+      "        [0.9273],\n",
+      "        [1.0580]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.8145],\n",
+      "        [0.8145],\n",
+      "        [0.5644],\n",
+      "        ...,\n",
+      "        [1.2768],\n",
+      "        [1.2768],\n",
+      "        [1.2768]], device='cuda:0')\n",
+      "Accuracy: 39.3381%\n",
+      "tensor([[10.2519],\n",
+      "        [ 8.6586],\n",
+      "        [ 7.7297],\n",
+      "        ...,\n",
+      "        [ 1.2707],\n",
+      "        [ 1.0032],\n",
+      "        [ 0.6826]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[12.3305],\n",
+      "        [12.3305],\n",
+      "        [12.3305],\n",
+      "        ...,\n",
+      "        [ 0.6648],\n",
+      "        [ 0.6648],\n",
+      "        [ 0.6648]], device='cuda:0')\n",
+      "Accuracy: 38.8127%\n",
+      "tensor([[0.9996],\n",
+      "        [0.8601],\n",
+      "        [0.9708],\n",
+      "        ...,\n",
+      "        [0.6847],\n",
+      "        [0.6144],\n",
+      "        [0.5791]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.2671],\n",
+      "        [1.2671],\n",
+      "        [1.2671],\n",
+      "        ...,\n",
+      "        [0.6528],\n",
+      "        [0.6528],\n",
+      "        [0.6528]], device='cuda:0')\n",
+      "Accuracy: 40.3468%\n",
+      "tensor([[19.1213],\n",
+      "        [16.8965],\n",
+      "        [17.0006],\n",
+      "        ...,\n",
+      "        [ 1.2032],\n",
+      "        [ 1.2859],\n",
+      "        [ 1.1205]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[11.3675],\n",
+      "        [11.3675],\n",
+      "        [11.3675],\n",
+      "        ...,\n",
+      "        [ 1.1216],\n",
+      "        [ 1.1216],\n",
+      "        [ 1.1216]], device='cuda:0')\n",
+      "Accuracy: 40.6948%\n",
+      "tensor([[3.6168],\n",
+      "        [5.2099],\n",
+      "        [5.1324],\n",
+      "        ...,\n",
+      "        [2.8753],\n",
+      "        [3.4861],\n",
+      "        [2.0596]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[5.4117],\n",
+      "        [5.4117],\n",
+      "        [5.4117],\n",
+      "        ...,\n",
+      "        [1.7091],\n",
+      "        [1.7091],\n",
+      "        [1.7091]], device='cuda:0')\n",
+      "Accuracy: 40.0502%\n",
+      "tensor([[10.3463],\n",
+      "        [ 8.6515],\n",
+      "        [ 7.7605],\n",
+      "        ...,\n",
+      "        [ 0.6446],\n",
+      "        [ 0.6453],\n",
+      "        [ 0.7479]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[12.3305],\n",
+      "        [12.3305],\n",
+      "        [12.3305],\n",
+      "        ...,\n",
+      "        [ 0.5811],\n",
+      "        [ 0.5811],\n",
+      "        [ 0.5811]], device='cuda:0')\n",
+      "Accuracy: 39.0119%\n",
+      "tensor([[0.9783],\n",
+      "        [1.0397],\n",
+      "        [1.0651],\n",
+      "        ...,\n",
+      "        [0.6647],\n",
+      "        [0.7699],\n",
+      "        [0.8835]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[41.3389],\n",
+      "        [41.3389],\n",
+      "        [41.3389],\n",
+      "        ...,\n",
+      "        [ 2.3012],\n",
+      "        [ 2.3012],\n",
+      "        [ 2.3012]], device='cuda:0')\n",
+      "Accuracy: 40.6840%\n",
+      "tensor([[0.6630],\n",
+      "        [0.6878],\n",
+      "        [0.6975],\n",
+      "        ...,\n",
+      "        [0.8447],\n",
+      "        [0.8768],\n",
+      "        [1.0330]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7537],\n",
+      "        [0.7537],\n",
+      "        [0.7537],\n",
+      "        ...,\n",
+      "        [0.7055],\n",
+      "        [0.7055],\n",
+      "        [0.7055]], device='cuda:0')\n",
+      "Accuracy: 39.3853%\n",
+      "tensor([[3.9761],\n",
+      "        [4.5978],\n",
+      "        [6.2752],\n",
+      "        ...,\n",
+      "        [0.6555],\n",
+      "        [0.9929],\n",
+      "        [0.9387]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[114.3767],\n",
+      "        [114.3767],\n",
+      "        [114.3767],\n",
+      "        ...,\n",
+      "        [  0.5394],\n",
+      "        [  0.5394],\n",
+      "        [  0.5394]], device='cuda:0')\n",
+      "Accuracy: 40.5195%\n",
+      "tensor([[0.9683],\n",
+      "        [1.0184],\n",
+      "        [1.0687],\n",
+      "        ...,\n",
+      "        [2.1319],\n",
+      "        [2.1325],\n",
+      "        [2.3955]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[2.1535],\n",
+      "        [2.1535],\n",
+      "        [2.1535],\n",
+      "        ...,\n",
+      "        [2.0440],\n",
+      "        [2.0440],\n",
+      "        [2.0440]], device='cuda:0')\n",
+      "Accuracy: 40.0183%\n",
+      "tensor([[1.0741],\n",
+      "        [1.1577],\n",
+      "        [1.1884],\n",
+      "        ...,\n",
+      "        [0.7665],\n",
+      "        [0.7874],\n",
+      "        [0.8470]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0568],\n",
+      "        [1.0568],\n",
+      "        [1.0568],\n",
+      "        ...,\n",
+      "        [0.5111],\n",
+      "        [0.5111],\n",
+      "        [0.5111]], device='cuda:0')\n",
+      "Accuracy: 38.4389%\n",
+      "tensor([[1.6255],\n",
+      "        [1.6056],\n",
+      "        [1.8206],\n",
+      "        ...,\n",
+      "        [0.7076],\n",
+      "        [0.8283],\n",
+      "        [0.8569]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.5487],\n",
+      "        [1.5487],\n",
+      "        [1.5487],\n",
+      "        ...,\n",
+      "        [0.8363],\n",
+      "        [0.8363],\n",
+      "        [0.8363]], device='cuda:0')\n",
+      "Accuracy: 39.5117%\n",
+      "tensor([[0.6603],\n",
+      "        [1.6645],\n",
+      "        [4.5902],\n",
+      "        ...,\n",
+      "        [0.7540],\n",
+      "        [0.7077],\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "tensor([9.9341e-01, 2.5245e-04, 1.8199e-04,  ..., 9.0931e-02, 8.6608e-01,\n",
-      "        1.8489e-03], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 0.], device='cuda:0') tensor([[0.5448],\n",
-      "        [0.5467],\n",
-      "        [0.8112],\n",
-      "        ...,\n",
-      "        [1.7237],\n",
-      "        [1.7570],\n",
-      "        [5.0801]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.1209],\n",
-      "        [0.1209],\n",
-      "        [0.1209],\n",
-      "        ...,\n",
-      "        [2.2227],\n",
-      "        [2.2227],\n",
-      "        [2.2227]], device='cuda:0')\n",
-      "Accuracy: 0.0350\n",
-      "tensor([3.5646e-01, 1.3433e-04, 2.6260e-04,  ..., 5.4933e-04, 5.9468e-04,\n",
-      "        9.8144e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.7382],\n",
-      "        [0.5465],\n",
-      "        [0.6196],\n",
-      "        ...,\n",
-      "        [1.1391],\n",
-      "        [1.2705],\n",
-      "        [1.7194]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0023],\n",
-      "        [0.0023],\n",
-      "        [0.0023],\n",
-      "        ...,\n",
-      "        [0.1175],\n",
-      "        [0.1175],\n",
-      "        [0.1175]], device='cuda:0')\n",
-      "Accuracy: 0.0338\n",
-      "tensor([3.0108e-02, 1.3733e-03, 8.1862e-05,  ..., 1.4494e-03, 6.4844e-01,\n",
-      "        1.0903e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([0., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[7.9655],\n",
-      "        [1.5169],\n",
-      "        [0.7510],\n",
-      "        ...,\n",
-      "        [1.3972],\n",
-      "        [3.3405],\n",
-      "        [1.0085]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[51.9062],\n",
-      "        [51.9062],\n",
-      "        [51.9062],\n",
-      "        ...,\n",
-      "        [ 0.2006],\n",
-      "        [ 0.2006],\n",
-      "        [ 0.2006]], device='cuda:0')\n",
-      "Accuracy: 0.0340\n",
-      "tensor([4.4391e-01, 1.0845e-04, 9.7740e-05,  ..., 9.9425e-01, 2.3081e-04,\n",
-      "        9.7540e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.7346],\n",
-      "        [0.5472],\n",
-      "        [0.5459],\n",
-      "        ...,\n",
-      "        [0.5880],\n",
-      "        [0.8285],\n",
-      "        [2.3015]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0423],\n",
-      "        [0.0423],\n",
-      "        [0.0423],\n",
-      "        ...,\n",
-      "        [0.3633],\n",
-      "        [0.3633],\n",
-      "        [0.3633]], device='cuda:0')\n",
-      "Accuracy: 0.0356\n",
-      "tensor([8.6055e-01, 1.6129e-04, 1.2192e-04,  ..., 1.9832e-01, 1.3138e-01,\n",
-      "        3.0419e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[3.3039],\n",
-      "        [0.6548],\n",
-      "        [0.6124],\n",
-      "        ...,\n",
-      "        [0.9618],\n",
-      "        [1.2512],\n",
-      "        [2.3853]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[ 0.1545],\n",
-      "        [ 0.1545],\n",
-      "        [ 0.1545],\n",
-      "        ...,\n",
-      "        [18.5391],\n",
-      "        [18.5391],\n",
-      "        [18.5391]], device='cuda:0')\n",
-      "Accuracy: 0.0352\n",
-      "tensor([0.4641, 0.4169, 0.7636,  ..., 0.9914, 0.9883, 0.9748], device='cuda:0',\n",
-      "       grad_fn=<SigmoidBackward>) tensor([1., 0., 1.,  ..., 1., 1., 1.], device='cuda:0') tensor([[ 9.2842],\n",
-      "        [10.4451],\n",
-      "        [ 7.8896],\n",
-      "        ...,\n",
-      "        [ 1.4973],\n",
-      "        [ 1.1776],\n",
-      "        [ 1.7480]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[83.8616],\n",
-      "        [83.8616],\n",
-      "        [83.8616],\n",
-      "        ...,\n",
-      "        [ 0.0908],\n",
-      "        [ 0.0908],\n",
-      "        [ 0.0908]], device='cuda:0')\n",
-      "Accuracy: 0.0336\n",
-      "tensor([8.6679e-01, 2.9149e-03, 1.2847e-04,  ..., 9.8813e-01, 9.9544e-01,\n",
-      "        9.9051e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 1., 1.], device='cuda:0') tensor([[0.8661],\n",
-      "        [0.5415],\n",
-      "        [0.5461],\n",
-      "        ...,\n",
-      "        [0.7583],\n",
-      "        [1.5500],\n",
-      "        [1.8687]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[2.6424],\n",
-      "        [2.6424],\n",
-      "        [2.6424],\n",
-      "        ...,\n",
-      "        [0.4221],\n",
-      "        [0.4221],\n",
-      "        [0.4221]], device='cuda:0')\n",
-      "Accuracy: 0.0348\n",
-      "tensor([5.3342e-01, 1.5163e-04, 1.2795e-04,  ..., 4.2354e-02, 3.2658e-04,\n",
-      "        9.8938e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.9908],\n",
-      "        [0.5889],\n",
-      "        [0.8017],\n",
+      "        [0.6972]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[34.2068],\n",
+      "        [34.2068],\n",
+      "        [34.2068],\n",
       "        ...,\n",
-      "        [1.0144],\n",
-      "        [1.4240],\n",
-      "        [4.2202]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[3.3233],\n",
-      "        [3.3233],\n",
-      "        [3.3233],\n",
-      "        ...,\n",
-      "        [0.6371],\n",
-      "        [0.6371],\n",
-      "        [0.6371]], device='cuda:0')\n",
-      "Accuracy: 0.0381\n",
-      "tensor([9.6733e-01, 2.6323e-04, 2.2965e-04,  ..., 9.3327e-01, 3.5791e-03,\n",
-      "        9.8144e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6911],\n",
-      "        [0.5462],\n",
-      "        [0.5439],\n",
-      "        ...,\n",
-      "        [0.9134],\n",
-      "        [7.5918],\n",
-      "        [1.0038]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[10.6444],\n",
-      "        [10.6444],\n",
-      "        [10.6444],\n",
-      "        ...,\n",
-      "        [ 0.2166],\n",
-      "        [ 0.2166],\n",
-      "        [ 0.2166]], device='cuda:0')\n",
-      "Accuracy: 0.0332\n",
-      "tensor([9.8665e-01, 1.0347e-04, 8.7657e-05,  ..., 3.9000e-03, 9.8597e-01,\n",
-      "        4.2907e-03], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 0.], device='cuda:0') tensor([[0.7773],\n",
-      "        [0.5452],\n",
-      "        [3.0912],\n",
-      "        ...,\n",
-      "        [1.2596],\n",
-      "        [1.2275],\n",
-      "        [1.6707]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.4743],\n",
-      "        [0.4743],\n",
-      "        [0.4743],\n",
-      "        ...,\n",
-      "        [0.1173],\n",
-      "        [0.1173],\n",
-      "        [0.1173]], device='cuda:0')\n",
-      "Accuracy: 0.0351\n",
-      "tensor([7.3535e-01, 1.3217e-04, 1.1330e-04,  ..., 2.4735e-04, 2.8507e-03,\n",
-      "        8.7266e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.8854],\n",
-      "        [0.5451],\n",
-      "        [0.6782],\n",
-      "        ...,\n",
-      "        [0.6149],\n",
-      "        [0.9327],\n",
-      "        [0.9552]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.6060],\n",
-      "        [1.6060],\n",
-      "        [1.6060],\n",
-      "        ...,\n",
-      "        [0.0386],\n",
-      "        [0.0386],\n",
-      "        [0.0386]], device='cuda:0')\n",
-      "Accuracy: 0.0348\n",
-      "tensor([9.7652e-01, 8.5466e-05, 2.7331e-04,  ..., 1.6046e-01, 5.7225e-04,\n",
-      "        9.8357e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.7516],\n",
-      "        [0.5424],\n",
-      "        [0.5460],\n",
-      "        ...,\n",
-      "        [0.9380],\n",
-      "        [1.7524],\n",
-      "        [4.1151]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0254],\n",
-      "        [0.0254],\n",
-      "        [0.0254],\n",
-      "        ...,\n",
-      "        [0.1382],\n",
-      "        [0.1382],\n",
-      "        [0.1382]], device='cuda:0')\n",
-      "Accuracy: 0.0359\n",
-      "tensor([4.6875e-01, 2.8193e-01, 1.7245e-04,  ..., 1.4696e-02, 3.4589e-02,\n",
-      "        8.3899e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.8937],\n",
-      "        [0.6325],\n",
-      "        [0.8045],\n",
-      "        ...,\n",
-      "        [1.8717],\n",
-      "        [2.4681],\n",
-      "        [5.7391]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0755],\n",
-      "        [0.0755],\n",
-      "        [0.0755],\n",
-      "        ...,\n",
-      "        [8.9241],\n",
-      "        [8.9241],\n",
-      "        [8.9241]], device='cuda:0')\n",
-      "Accuracy: 0.0348\n",
-      "tensor([5.7931e-01, 1.9722e-01, 5.3190e-04,  ..., 1.7703e-03, 1.9580e-04,\n",
-      "        2.2929e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.5925],\n",
-      "        [0.7365],\n",
-      "        [0.6088],\n",
-      "        ...,\n",
-      "        [0.5674],\n",
-      "        [0.6823],\n",
-      "        [1.2497]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.5226],\n",
-      "        [0.5226],\n",
-      "        [0.5226],\n",
-      "        ...,\n",
-      "        [0.0704],\n",
-      "        [0.0704],\n",
-      "        [0.0704]], device='cuda:0')\n",
-      "Accuracy: 0.0352\n",
-      "tensor([7.6390e-01, 4.5444e-03, 1.1119e-04,  ..., 9.8995e-01, 5.4751e-01,\n",
-      "        3.9858e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6109],\n",
-      "        [0.5443],\n",
-      "        [0.5476],\n",
-      "        ...,\n",
-      "        [6.4189],\n",
-      "        [0.8579],\n",
-      "        [7.5937]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.1732],\n",
-      "        [0.1732],\n",
-      "        [0.1732],\n",
-      "        ...,\n",
-      "        [0.5081],\n",
-      "        [0.5081],\n",
-      "        [0.5081]], device='cuda:0')\n",
-      "Accuracy: 0.0370\n",
-      "tensor([9.8327e-01, 1.3564e-04, 1.3634e-04,  ..., 7.9088e-01, 5.0286e-01,\n",
-      "        5.7304e-02], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 0.], device='cuda:0') tensor([[0.7074],\n",
-      "        [0.5430],\n",
-      "        [1.2764],\n",
-      "        ...,\n",
-      "        [6.5383],\n",
-      "        [1.2499],\n",
-      "        [1.2671]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.0848],\n",
-      "        [1.0848],\n",
-      "        [1.0848],\n",
-      "        ...,\n",
-      "        [1.2075],\n",
-      "        [1.2075],\n",
-      "        [1.2075]], device='cuda:0')\n",
-      "Accuracy: 0.0368\n",
-      "tensor([4.7669e-02, 5.2056e-04, 6.5352e-02,  ..., 9.8914e-01, 9.3796e-02,\n",
-      "        8.5225e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.8733],\n",
-      "        [0.9494],\n",
-      "        [0.8729],\n",
-      "        ...,\n",
-      "        [1.3489],\n",
-      "        [1.8896],\n",
-      "        [1.8478]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.1149],\n",
-      "        [1.1149],\n",
-      "        [1.1149],\n",
-      "        ...,\n",
-      "        [0.3781],\n",
-      "        [0.3781],\n",
-      "        [0.3781]], device='cuda:0')\n",
-      "Accuracy: 0.0349\n",
-      "tensor([8.4347e-01, 1.4776e-04, 4.5167e-04,  ..., 1.6111e-04, 9.9050e-01,\n",
-      "        9.9732e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.5422],\n",
-      "        [0.7242],\n",
-      "        [0.5855],\n",
-      "        ...,\n",
-      "        [8.0421],\n",
-      "        [3.3055],\n",
-      "        [8.1637]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.0212e-01],\n",
-      "        [1.0212e-01],\n",
-      "        [1.0212e-01],\n",
-      "        ...,\n",
-      "        [1.3067e+02],\n",
-      "        [1.3067e+02],\n",
-      "        [1.3067e+02]], device='cuda:0')\n",
-      "Accuracy: 0.0357\n"
+      "        [ 0.5591],\n",
+      "        [ 0.5591],\n",
+      "        [ 0.5591]], device='cuda:0')\n",
+      "Accuracy: 40.2999%\n",
+      "tensor([[10.2161],\n",
+      "        [ 8.5189],\n",
+      "        [ 7.6812],\n",
+      "        ...,\n",
+      "        [ 0.6470],\n",
+      "        [ 0.6614],\n",
+      "        [ 0.5862]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[12.3305],\n",
+      "        [12.3305],\n",
+      "        [12.3305],\n",
+      "        ...,\n",
+      "        [ 0.5768],\n",
+      "        [ 0.5768],\n",
+      "        [ 0.5768]], device='cuda:0')\n",
+      "Accuracy: 40.0605%\n",
+      "tensor([[0.9681],\n",
+      "        [1.0175],\n",
+      "        [1.0679],\n",
+      "        ...,\n",
+      "        [0.6423],\n",
+      "        [0.6531],\n",
+      "        [0.6582]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[2.1535],\n",
+      "        [2.1535],\n",
+      "        [2.1535],\n",
+      "        ...,\n",
+      "        [0.5419],\n",
+      "        [0.5419],\n",
+      "        [0.5419]], device='cuda:0')\n",
+      "Accuracy: 39.3605%\n",
+      "tensor([[0.9883],\n",
+      "        [0.9892],\n",
+      "        [0.9956],\n",
+      "        ...,\n",
+      "        [0.7058],\n",
+      "        [0.7919],\n",
+      "        [0.9199]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0031],\n",
+      "        [1.0031],\n",
+      "        [1.0031],\n",
+      "        ...,\n",
+      "        [0.7900],\n",
+      "        [0.7900],\n",
+      "        [0.7900]], device='cuda:0')\n",
+      "Accuracy: 39.9850%\n",
+      "tensor([[1.4345],\n",
+      "        [1.4077],\n",
+      "        [1.2925],\n",
+      "        ...,\n",
+      "        [1.1382],\n",
+      "        [1.3562],\n",
+      "        [1.0842]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.5719],\n",
+      "        [1.5719],\n",
+      "        [1.5719],\n",
+      "        ...,\n",
+      "        [1.4316],\n",
+      "        [1.4316],\n",
+      "        [1.4316]], device='cuda:0')\n",
+      "Accuracy: 39.1546%\n",
+      "tensor([[3.0630],\n",
+      "        [2.7623],\n",
+      "        [3.2913],\n",
+      "        ...,\n",
+      "        [0.6739],\n",
+      "        [0.5828],\n",
+      "        [0.6157]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[49.4070],\n",
+      "        [49.4070],\n",
+      "        [49.4070],\n",
+      "        ...,\n",
+      "        [ 0.5294],\n",
+      "        [ 0.5294],\n",
+      "        [ 0.5294]], device='cuda:0')\n",
+      "Accuracy: 40.2626%\n",
+      "tensor([[11.9847],\n",
+      "        [13.2803],\n",
+      "        [10.4962],\n",
+      "        ...,\n",
+      "        [ 0.7002],\n",
+      "        [ 0.5775],\n",
+      "        [ 0.5533]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[103.9713],\n",
+      "        [103.9713],\n",
+      "        [103.9713],\n",
+      "        ...,\n",
+      "        [  0.5163],\n",
+      "        [  0.5163],\n",
+      "        [  0.5163]], device='cuda:0')\n",
+      "Accuracy: 40.2963%\n",
+      "tensor([[1.0355],\n",
+      "        [0.8637],\n",
+      "        [0.8407],\n",
+      "        ...,\n",
+      "        [1.0183],\n",
+      "        [0.8709],\n",
+      "        [0.9781]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.4545],\n",
+      "        [7.4545],\n",
+      "        [7.4545],\n",
+      "        ...,\n",
+      "        [0.5515],\n",
+      "        [0.5515],\n",
+      "        [0.5515]], device='cuda:0')\n",
+      "Accuracy: 39.2724%\n",
+      "tensor([[1.6573],\n",
+      "        [1.7834],\n",
+      "        [1.5776],\n",
+      "        ...,\n",
+      "        [0.7427],\n",
+      "        [0.7284],\n",
+      "        [0.8567]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.6736],\n",
+      "        [1.6736],\n",
+      "        [1.6736],\n",
+      "        ...,\n",
+      "        [0.5688],\n",
+      "        [0.5688],\n",
+      "        [0.5688]], device='cuda:0')\n",
+      "Accuracy: 40.3407%\n",
+      "tensor([[11.2320],\n",
+      "        [13.0427],\n",
+      "        [16.5677],\n",
+      "        ...,\n",
+      "        [ 0.6959],\n",
+      "        [ 0.6481],\n",
+      "        [ 0.7528]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.9097],\n",
+      "        [15.9097],\n",
+      "        [15.9097],\n",
+      "        ...,\n",
+      "        [ 0.5118],\n",
+      "        [ 0.5118],\n",
+      "        [ 0.5118]], device='cuda:0')\n",
+      "Accuracy: 39.8308%\n",
+      "tensor([[3.6314],\n",
+      "        [5.2184],\n",
+      "        [5.1166],\n",
+      "        ...,\n",
+      "        [0.6317],\n",
+      "        [0.6797],\n",
+      "        [0.5500]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[5.4117],\n",
+      "        [5.4117],\n",
+      "        [5.4117],\n",
+      "        ...,\n",
+      "        [0.5336],\n",
+      "        [0.5336],\n",
+      "        [0.5336]], device='cuda:0')\n",
+      "Accuracy: 39.5466%\n",
+      "tensor([[ 0.6881],\n",
+      "        [11.6658],\n",
+      "        [ 6.5289],\n",
+      "        ...,\n",
+      "        [ 0.6949],\n",
+      "        [ 0.7447],\n",
+      "        [ 0.8752]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9864],\n",
+      "        [18.9864],\n",
+      "        [18.9864],\n",
+      "        ...,\n",
+      "        [ 0.5053],\n",
+      "        [ 0.5053],\n",
+      "        [ 0.5053]], device='cuda:0')\n",
+      "Accuracy: 39.3142%\n",
+      "tensor([[8.2489],\n",
+      "        [7.2578],\n",
+      "        [7.3865],\n",
+      "        ...,\n",
+      "        [0.6723],\n",
+      "        [0.6653],\n",
+      "        [0.6261]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.0816],\n",
+      "        [7.0816],\n",
+      "        [7.0816],\n",
+      "        ...,\n",
+      "        [0.6795],\n",
+      "        [0.6795],\n",
+      "        [0.6795]], device='cuda:0')\n",
+      "Accuracy: 39.4279%\n",
+      "tensor([[42.7952],\n",
+      "        [48.9230],\n",
+      "        [46.6251],\n",
+      "        ...,\n",
+      "        [ 0.6276],\n",
+      "        [ 0.6505],\n",
+      "        [ 0.5349]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[214.2887],\n",
+      "        [214.2887],\n",
+      "        [214.2887],\n",
+      "        ...,\n",
+      "        [  0.5513],\n",
+      "        [  0.5513],\n",
+      "        [  0.5513]], device='cuda:0')\n",
+      "Accuracy: 40.1457%\n",
+      "tensor([[1.6206],\n",
+      "        [1.4773],\n",
+      "        [2.0015],\n",
+      "        ...,\n",
+      "        [0.8882],\n",
+      "        [0.9505],\n",
+      "        [0.8475]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[2.0819],\n",
+      "        [2.0819],\n",
+      "        [2.0819],\n",
+      "        ...,\n",
+      "        [0.9285],\n",
+      "        [0.9285],\n",
+      "        [0.9285]], device='cuda:0')\n",
+      "Accuracy: 40.2122%\n",
+      "tensor([[1.3236],\n",
+      "        [1.3064],\n",
+      "        [1.1554],\n",
+      "        ...,\n",
+      "        [0.6435],\n",
+      "        [0.6298],\n",
+      "        [0.6163]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.2227],\n",
+      "        [1.2227],\n",
+      "        [1.2227],\n",
+      "        ...,\n",
+      "        [0.5580],\n",
+      "        [0.5580],\n",
+      "        [0.5580]], device='cuda:0')\n",
+      "Accuracy: 39.8365%\n",
+      "tensor([[0.6796],\n",
+      "        [0.7947],\n",
+      "        [0.8771],\n",
+      "        ...,\n",
+      "        [0.7633],\n",
+      "        [0.9490],\n",
+      "        [1.0927]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.4249],\n",
+      "        [18.4249],\n",
+      "        [18.4249],\n",
+      "        ...,\n",
+      "        [ 0.8176],\n",
+      "        [ 0.8176],\n",
+      "        [ 0.8176]], device='cuda:0')\n",
+      "Accuracy: 37.5792%\n",
+      "tensor([[1.0066],\n",
+      "        [0.8420],\n",
+      "        [0.9938],\n",
+      "        ...,\n",
+      "        [0.7329],\n",
+      "        [0.8331],\n",
+      "        [0.7742]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.7756],\n",
+      "        [1.7756],\n",
+      "        [1.7756],\n",
+      "        ...,\n",
+      "        [0.8164],\n",
+      "        [0.8164],\n",
+      "        [0.8164]], device='cuda:0')\n",
+      "Accuracy: 40.5097%\n",
+      "tensor([[0.7226],\n",
+      "        [0.8432],\n",
+      "        [0.6172],\n",
+      "        ...,\n",
+      "        [1.5072],\n",
+      "        [1.1013],\n",
+      "        [1.3276]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[9.5957],\n",
+      "        [9.5957],\n",
+      "        [9.5957],\n",
+      "        ...,\n",
+      "        [1.1248],\n",
+      "        [1.1248],\n",
+      "        [1.1248]], device='cuda:0')\n",
+      "Accuracy: 39.2459%\n",
+      "tensor([[1.1484],\n",
+      "        [1.2153],\n",
+      "        [1.1721],\n",
+      "        ...,\n",
+      "        [0.6316],\n",
+      "        [0.6301],\n",
+      "        [0.6537]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7752],\n",
+      "        [0.7752],\n",
+      "        [0.7752],\n",
+      "        ...,\n",
+      "        [0.5931],\n",
+      "        [0.5931],\n",
+      "        [0.5931]], device='cuda:0')\n",
+      "Accuracy: 40.2219%\n",
+      "tensor([[2.6271],\n",
+      "        [2.6988],\n",
+      "        [3.3629],\n",
+      "        ...,\n",
+      "        [0.6870],\n",
+      "        [0.6212],\n",
+      "        [0.6703]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[3.5017],\n",
+      "        [3.5017],\n",
+      "        [3.5017],\n",
+      "        ...,\n",
+      "        [0.6006],\n",
+      "        [0.6006],\n",
+      "        [0.6006]], device='cuda:0')\n",
+      "Accuracy: 39.0849%\n",
+      "tensor([[0.6733],\n",
+      "        [0.6504],\n",
+      "        [0.6597],\n",
+      "        ...,\n",
+      "        [1.0149],\n",
+      "        [1.2987],\n",
+      "        [0.9066]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6718],\n",
+      "        [0.6718],\n",
+      "        [0.6718],\n",
+      "        ...,\n",
+      "        [0.6416],\n",
+      "        [0.6416],\n",
+      "        [0.6416]], device='cuda:0')\n",
+      "Accuracy: 40.3180%\n",
+      "tensor([[0.9803],\n",
+      "        [0.9679],\n",
+      "        [0.9910],\n",
+      "        ...,\n",
+      "        [0.6828],\n",
+      "        [0.6682],\n",
+      "        [0.6200]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[5.4676],\n",
+      "        [5.4676],\n",
+      "        [5.4676],\n",
+      "        ...,\n",
+      "        [0.7276],\n",
+      "        [0.7276],\n",
+      "        [0.7276]], device='cuda:0')\n",
+      "Accuracy: 40.6631%\n",
+      "tensor([[14.7487],\n",
+      "        [19.8781],\n",
+      "        [18.3167],\n",
+      "        ...,\n",
+      "        [ 0.6486],\n",
+      "        [ 0.6342],\n",
+      "        [ 0.6402]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[10.8352],\n",
+      "        [10.8352],\n",
+      "        [10.8352],\n",
+      "        ...,\n",
+      "        [ 0.6237],\n",
+      "        [ 0.6237],\n",
+      "        [ 0.6237]], device='cuda:0')\n",
+      "Accuracy: 39.3348%\n",
+      "tensor([[1.0005],\n",
+      "        [1.1341],\n",
+      "        [1.1276],\n",
+      "        ...,\n",
+      "        [0.6037],\n",
+      "        [0.6033],\n",
+      "        [0.5284]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6658],\n",
+      "        [0.6658],\n",
+      "        [0.6658],\n",
+      "        ...,\n",
+      "        [0.5664],\n",
+      "        [0.5664],\n",
+      "        [0.5664]], device='cuda:0')\n",
+      "Accuracy: 40.1885%\n",
+      "tensor([[16.8904],\n",
+      "        [20.8417],\n",
+      "        [20.3371],\n",
+      "        ...,\n",
+      "        [ 0.7235],\n",
+      "        [ 0.6742],\n",
+      "        [ 0.7453]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[62.8775],\n",
+      "        [62.8775],\n",
+      "        [62.8775],\n",
+      "        ...,\n",
+      "        [ 0.7276],\n",
+      "        [ 0.7276],\n",
+      "        [ 0.7276]], device='cuda:0')\n",
+      "Accuracy: 39.7209%\n",
+      "tensor([[0.8520],\n",
+      "        [0.8058],\n",
+      "        [1.3407],\n",
+      "        ...,\n",
+      "        [0.8619],\n",
+      "        [0.9751],\n",
+      "        [0.8014]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.1269],\n",
+      "        [1.1269],\n",
+      "        [1.1269],\n",
+      "        ...,\n",
+      "        [0.7729],\n",
+      "        [0.7729],\n",
+      "        [0.7729]], device='cuda:0')\n",
+      "Accuracy: 40.4717%\n",
+      "tensor([[0.6712],\n",
+      "        [0.6263],\n",
+      "        [0.5953],\n",
+      "        ...,\n",
+      "        [0.5279],\n",
+      "        [0.5198],\n",
+      "        [0.5139]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[9.9181],\n",
+      "        [9.9181],\n",
+      "        [9.9181],\n",
+      "        ...,\n",
+      "        [0.5163],\n",
+      "        [0.5163],\n",
+      "        [0.5163]], device='cuda:0')\n",
+      "Accuracy: 39.5578%\n",
+      "tensor([[0.8464],\n",
+      "        [0.8655],\n",
+      "        [0.9052],\n",
+      "        ...,\n",
+      "        [0.8541],\n",
+      "        [0.9607],\n",
+      "        [0.9901]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[28.2485],\n",
+      "        [28.2485],\n",
+      "        [28.2485],\n",
+      "        ...,\n",
+      "        [ 0.5693],\n",
+      "        [ 0.5693],\n",
+      "        [ 0.5693]], device='cuda:0')\n",
+      "Accuracy: 38.7823%\n",
+      "tensor([[0.9980],\n",
+      "        [0.8870],\n",
+      "        [0.9275],\n",
+      "        ...,\n",
+      "        [1.7981],\n",
+      "        [1.4017],\n",
+      "        [1.2597]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.8174],\n",
+      "        [1.8174],\n",
+      "        [1.8174],\n",
+      "        ...,\n",
+      "        [1.5891],\n",
+      "        [1.5891],\n",
+      "        [1.5891]], device='cuda:0')\n",
+      "Accuracy: 39.9508%\n",
+      "tensor([[0.9969],\n",
+      "        [0.9015],\n",
+      "        [0.9987],\n",
+      "        ...,\n",
+      "        [0.6854],\n",
+      "        [0.7988],\n",
+      "        [0.6971]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6272],\n",
+      "        [0.6272],\n",
+      "        [0.6272],\n",
+      "        ...,\n",
+      "        [0.5574],\n",
+      "        [0.5574],\n",
+      "        [0.5574]], device='cuda:0')\n",
+      "Accuracy: 39.1757%\n",
+      "tensor([[5.6407],\n",
+      "        [5.8813],\n",
+      "        [5.0981],\n",
+      "        ...,\n",
+      "        [0.6493],\n",
+      "        [0.5865],\n",
+      "        [0.6767]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[4.2333],\n",
+      "        [4.2333],\n",
+      "        [4.2333],\n",
+      "        ...,\n",
+      "        [0.6468],\n",
+      "        [0.6468],\n",
+      "        [0.6468]], device='cuda:0')\n",
+      "Accuracy: 39.7403%\n",
+      "tensor([[2.6274],\n",
+      "        [2.7943],\n",
+      "        [3.6031],\n",
+      "        ...,\n",
+      "        [1.1684],\n",
+      "        [1.0011],\n",
+      "        [1.0178]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[3.5017],\n",
+      "        [3.5017],\n",
+      "        [3.5017],\n",
+      "        ...,\n",
+      "        [1.0661],\n",
+      "        [1.0661],\n",
+      "        [1.0661]], device='cuda:0')\n",
+      "Accuracy: 38.7006%\n",
+      "tensor([[3.1372],\n",
+      "        [4.5701],\n",
+      "        [7.6276],\n",
+      "        ...,\n",
+      "        [0.5648],\n",
+      "        [0.6136],\n",
+      "        [0.7399]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9803],\n",
+      "        [18.9803],\n",
+      "        [18.9803],\n",
+      "        ...,\n",
+      "        [ 0.7229],\n",
+      "        [ 0.7229],\n",
+      "        [ 0.7229]], device='cuda:0')\n",
+      "Accuracy: 39.4491%\n",
+      "tensor([[12.9539],\n",
+      "        [12.2334],\n",
+      "        [11.3214],\n",
+      "        ...,\n",
+      "        [ 0.6566],\n",
+      "        [ 0.5275],\n",
+      "        [ 0.5185]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[10.0892],\n",
+      "        [10.0892],\n",
+      "        [10.0892],\n",
+      "        ...,\n",
+      "        [ 0.5517],\n",
+      "        [ 0.5517],\n",
+      "        [ 0.5517]], device='cuda:0')\n",
+      "Accuracy: 40.2761%\n",
+      "tensor([[3.6755],\n",
+      "        [3.6912],\n",
+      "        [4.2473],\n",
+      "        ...,\n",
+      "        [0.8420],\n",
+      "        [0.9263],\n",
+      "        [0.8659]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[4.1409],\n",
+      "        [4.1409],\n",
+      "        [4.1409],\n",
+      "        ...,\n",
+      "        [0.6053],\n",
+      "        [0.6053],\n",
+      "        [0.6053]], device='cuda:0')\n",
+      "Accuracy: 39.6207%\n",
+      "tensor([[0.9930],\n",
+      "        [1.1189],\n",
+      "        [1.1182],\n",
+      "        ...,\n",
+      "        [1.0980],\n",
+      "        [0.9079],\n",
+      "        [0.9797]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.6542],\n",
+      "        [1.6542],\n",
+      "        [1.6542],\n",
+      "        ...,\n",
+      "        [1.0477],\n",
+      "        [1.0477],\n",
+      "        [1.0477]], device='cuda:0')\n",
+      "Accuracy: 40.8742%\n",
+      "tensor([[2.3119],\n",
+      "        [3.0012],\n",
+      "        [3.4853],\n",
+      "        ...,\n",
+      "        [0.7756],\n",
+      "        [0.8348],\n",
+      "        [0.7605]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[4.2260],\n",
+      "        [4.2260],\n",
+      "        [4.2260],\n",
+      "        ...,\n",
+      "        [0.8264],\n",
+      "        [0.8264],\n",
+      "        [0.8264]], device='cuda:0')\n",
+      "Accuracy: 39.4977%\n",
+      "tensor([[0.9552],\n",
+      "        [0.9512],\n",
+      "        [1.1259],\n",
+      "        ...,\n",
+      "        [0.7132],\n",
+      "        [0.8764],\n",
+      "        [0.7109]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9803],\n",
+      "        [18.9803],\n",
+      "        [18.9803],\n",
+      "        ...,\n",
+      "        [ 0.5077],\n",
+      "        [ 0.5077],\n",
+      "        [ 0.5077]], device='cuda:0')\n",
+      "Accuracy: 40.1390%\n",
+      "tensor([[1.0961],\n",
+      "        [1.0131],\n",
+      "        [0.9886],\n",
+      "        ...,\n",
+      "        [0.9215],\n",
+      "        [0.8816],\n",
+      "        [1.0348]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6300],\n",
+      "        [0.6300],\n",
+      "        [0.6300],\n",
+      "        ...,\n",
+      "        [0.6538],\n",
+      "        [0.6538],\n",
+      "        [0.6538]], device='cuda:0')\n",
+      "Accuracy: 39.7940%\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "tensor([1.9595e-01, 4.9849e-01, 9.5157e-05,  ..., 8.5482e-01, 4.3373e-01,\n",
-      "        8.3115e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[ 0.7067],\n",
-      "        [ 3.8614],\n",
-      "        [10.1679],\n",
-      "        ...,\n",
-      "        [ 0.8682],\n",
-      "        [ 0.5501],\n",
-      "        [ 1.4535]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.3448e+02],\n",
-      "        [1.3448e+02],\n",
-      "        [1.3448e+02],\n",
-      "        ...,\n",
-      "        [6.0341e-02],\n",
-      "        [6.0341e-02],\n",
-      "        [6.0341e-02]], device='cuda:0')\n",
-      "Accuracy: 0.0353\n",
-      "tensor([0.3161, 0.1951, 0.2565,  ..., 0.0008, 0.4652, 0.3716], device='cuda:0',\n",
-      "       grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[1.5366],\n",
-      "        [0.5426],\n",
-      "        [0.5455],\n",
+      "tensor([[0.9016],\n",
+      "        [1.0014],\n",
+      "        [1.2399],\n",
+      "        ...,\n",
+      "        [0.6275],\n",
+      "        [0.6268],\n",
+      "        [0.6755]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0432],\n",
+      "        [1.0432],\n",
+      "        [1.0432],\n",
+      "        ...,\n",
+      "        [0.6954],\n",
+      "        [0.6954],\n",
+      "        [0.6954]], device='cuda:0')\n",
+      "Accuracy: 39.1318%\n",
+      "tensor([[0.9803],\n",
+      "        [0.9692],\n",
+      "        [0.9925],\n",
+      "        ...,\n",
+      "        [0.5200],\n",
+      "        [0.5255],\n",
+      "        [0.5377]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[5.4676],\n",
+      "        [5.4676],\n",
+      "        [5.4676],\n",
+      "        ...,\n",
+      "        [0.5036],\n",
+      "        [0.5036],\n",
+      "        [0.5036]], device='cuda:0')\n",
+      "Accuracy: 39.6506%\n",
+      "tensor([[19.0480],\n",
+      "        [23.0835],\n",
+      "        [21.6653],\n",
+      "        ...,\n",
+      "        [ 1.5495],\n",
+      "        [ 1.5566],\n",
+      "        [ 1.3213]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[66.0761],\n",
+      "        [66.0761],\n",
+      "        [66.0761],\n",
+      "        ...,\n",
+      "        [ 1.1489],\n",
+      "        [ 1.1489],\n",
+      "        [ 1.1489]], device='cuda:0')\n",
+      "Accuracy: 39.7656%\n",
+      "tensor([[10.7145],\n",
+      "        [ 6.7402],\n",
+      "        [ 8.7517],\n",
+      "        ...,\n",
+      "        [ 0.8141],\n",
+      "        [ 0.7114],\n",
+      "        [ 0.8462]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[9.6110],\n",
+      "        [9.6110],\n",
+      "        [9.6110],\n",
+      "        ...,\n",
+      "        [0.7663],\n",
+      "        [0.7663],\n",
+      "        [0.7663]], device='cuda:0')\n",
+      "Accuracy: 38.7527%\n",
+      "tensor([[10.4775],\n",
+      "        [ 8.1635],\n",
+      "        [ 6.9152],\n",
+      "        ...,\n",
+      "        [ 0.8971],\n",
+      "        [ 1.0843],\n",
+      "        [ 0.8726]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.2037],\n",
+      "        [7.2037],\n",
+      "        [7.2037],\n",
       "        ...,\n",
+      "        [0.8917],\n",
+      "        [0.8917],\n",
+      "        [0.8917]], device='cuda:0')\n",
+      "Accuracy: 38.9668%\n",
+      "tensor([[32.4640],\n",
+      "        [32.3690],\n",
+      "        [43.8462],\n",
+      "        ...,\n",
+      "        [ 1.8761],\n",
+      "        [ 1.6347],\n",
+      "        [ 1.5169]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[77.1132],\n",
+      "        [77.1132],\n",
+      "        [77.1132],\n",
+      "        ...,\n",
+      "        [ 1.6917],\n",
+      "        [ 1.6917],\n",
+      "        [ 1.6917]], device='cuda:0')\n",
+      "Accuracy: 39.9223%\n",
+      "tensor([[0.9733],\n",
+      "        [0.9466],\n",
+      "        [0.9591],\n",
+      "        ...,\n",
+      "        [0.5838],\n",
+      "        [0.5999],\n",
+      "        [0.7291]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.9247],\n",
+      "        [0.9247],\n",
+      "        [0.9247],\n",
+      "        ...,\n",
+      "        [0.5667],\n",
+      "        [0.5667],\n",
+      "        [0.5667]], device='cuda:0')\n",
+      "Accuracy: 39.6083%\n",
+      "tensor([[1.0348],\n",
+      "        [0.8618],\n",
+      "        [0.8457],\n",
+      "        ...,\n",
+      "        [0.8780],\n",
+      "        [0.9837],\n",
+      "        [0.5215]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.4545],\n",
+      "        [7.4545],\n",
+      "        [7.4545],\n",
+      "        ...,\n",
+      "        [1.2338],\n",
+      "        [1.2338],\n",
+      "        [1.2338]], device='cuda:0')\n",
+      "Accuracy: 39.0186%\n",
+      "tensor([[1.0539],\n",
+      "        [1.0836],\n",
+      "        [1.0144],\n",
+      "        ...,\n",
+      "        [0.9879],\n",
+      "        [0.8594],\n",
+      "        [0.7651]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6624],\n",
+      "        [0.6624],\n",
+      "        [0.6624],\n",
+      "        ...,\n",
+      "        [1.0003],\n",
+      "        [1.0003],\n",
+      "        [1.0003]], device='cuda:0')\n",
+      "Accuracy: 40.4452%\n",
+      "tensor([[0.6560],\n",
+      "        [0.7484],\n",
+      "        [0.8034],\n",
+      "        ...,\n",
+      "        [0.8664],\n",
+      "        [0.8966],\n",
+      "        [0.7544]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.5559],\n",
+      "        [0.5559],\n",
+      "        [0.5559],\n",
+      "        ...,\n",
+      "        [1.0908],\n",
+      "        [1.0908],\n",
+      "        [1.1814]], device='cuda:0')\n",
+      "Accuracy: 39.5069%\n",
+      "tensor([[0.6713],\n",
+      "        [0.6502],\n",
+      "        [0.6608],\n",
+      "        ...,\n",
+      "        [1.1412],\n",
+      "        [1.2072],\n",
+      "        [0.9134]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6718],\n",
+      "        [0.6718],\n",
+      "        [0.6718],\n",
+      "        ...,\n",
+      "        [1.1390],\n",
+      "        [1.1390],\n",
+      "        [1.1390]], device='cuda:0')\n",
+      "Accuracy: 39.1823%\n",
+      "tensor([[1.6302],\n",
+      "        [1.2663],\n",
+      "        [1.7483],\n",
+      "        ...,\n",
+      "        [0.7675],\n",
+      "        [0.7321],\n",
+      "        [0.6926]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.7191],\n",
+      "        [1.7191],\n",
+      "        [1.7191],\n",
+      "        ...,\n",
+      "        [0.7097],\n",
+      "        [0.7097],\n",
+      "        [0.7097]], device='cuda:0')\n",
+      "Accuracy: 40.5287%\n",
+      "tensor([[0.9975],\n",
+      "        [0.9531],\n",
+      "        [0.9131],\n",
+      "        ...,\n",
+      "        [1.1248],\n",
+      "        [0.7863],\n",
+      "        [1.0304]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[3.8672],\n",
+      "        [3.8672],\n",
+      "        [3.8672],\n",
+      "        ...,\n",
+      "        [0.5144],\n",
+      "        [0.5074],\n",
+      "        [0.5074]], device='cuda:0')\n",
+      "Accuracy: 40.6298%\n",
+      "tensor([[0.8473],\n",
+      "        [0.8746],\n",
+      "        [0.7258],\n",
+      "        ...,\n",
+      "        [0.6936],\n",
+      "        [0.7743],\n",
+      "        [0.7342]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0484],\n",
+      "        [1.0484],\n",
+      "        [1.0484],\n",
+      "        ...,\n",
+      "        [0.7965],\n",
+      "        [0.7965],\n",
+      "        [0.7965]], device='cuda:0')\n",
+      "Accuracy: 39.0264%\n",
+      "tensor([[8.5380],\n",
+      "        [7.4409],\n",
+      "        [8.9080],\n",
+      "        ...,\n",
+      "        [0.9483],\n",
+      "        [0.8375],\n",
+      "        [0.7380]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[6.1454],\n",
+      "        [6.1454],\n",
+      "        [6.1454],\n",
+      "        ...,\n",
+      "        [0.8144],\n",
+      "        [0.8144],\n",
+      "        [0.8144]], device='cuda:0')\n",
+      "Accuracy: 39.3465%\n",
+      "tensor([[0.9399],\n",
+      "        [0.9246],\n",
+      "        [0.9130],\n",
+      "        ...,\n",
+      "        [0.6532],\n",
+      "        [0.6188],\n",
+      "        [0.6643]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7312],\n",
+      "        [0.7312],\n",
+      "        [0.7312],\n",
+      "        ...,\n",
+      "        [0.6452],\n",
+      "        [0.6452],\n",
+      "        [0.6452]], device='cuda:0')\n",
+      "Accuracy: 38.6133%\n",
+      "tensor([[17.3492],\n",
+      "        [21.3735],\n",
+      "        [20.9378],\n",
+      "        ...,\n",
+      "        [ 0.7750],\n",
+      "        [ 0.7245],\n",
+      "        [ 0.8494]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[62.8775],\n",
+      "        [62.8775],\n",
+      "        [62.8775],\n",
+      "        ...,\n",
+      "        [ 1.1988],\n",
+      "        [ 0.5820],\n",
+      "        [ 0.5820]], device='cuda:0')\n",
+      "Accuracy: 40.3640%\n",
+      "tensor([[0.7486],\n",
+      "        [0.7896],\n",
+      "        [0.9446],\n",
+      "        ...,\n",
+      "        [0.9740],\n",
+      "        [0.8918],\n",
+      "        [0.8121]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.9247],\n",
+      "        [0.9247],\n",
+      "        [0.9247],\n",
+      "        ...,\n",
+      "        [0.6448],\n",
+      "        [0.6448],\n",
+      "        [0.6448]], device='cuda:0')\n",
+      "Accuracy: 38.9745%\n",
+      "tensor([[0.7439],\n",
+      "        [0.7359],\n",
+      "        [0.6380],\n",
+      "        ...,\n",
+      "        [0.5949],\n",
+      "        [0.8614],\n",
+      "        [0.9297]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7752],\n",
+      "        [0.7752],\n",
+      "        [0.7752],\n",
+      "        ...,\n",
+      "        [0.6405],\n",
+      "        [0.6405],\n",
+      "        [0.6405]], device='cuda:0')\n",
+      "Accuracy: 40.1297%\n",
+      "tensor([[1.0853],\n",
+      "        [1.0139],\n",
+      "        [1.0190],\n",
+      "        ...,\n",
+      "        [1.0269],\n",
+      "        [1.0126],\n",
+      "        [0.8494]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0948],\n",
+      "        [1.0948],\n",
       "        [1.0948],\n",
-      "        [1.4515],\n",
-      "        [4.6992]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0791],\n",
-      "        [0.0791],\n",
-      "        [0.0791],\n",
-      "        ...,\n",
-      "        [0.4389],\n",
-      "        [0.4389],\n",
-      "        [0.4389]], device='cuda:0')\n",
-      "Accuracy: 0.0350\n",
-      "tensor([6.1782e-01, 9.1888e-04, 1.2533e-04,  ..., 9.7308e-01, 1.7723e-04,\n",
-      "        9.8832e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.1526],\n",
-      "        [0.9570],\n",
-      "        [0.6574],\n",
-      "        ...,\n",
-      "        [3.2503],\n",
-      "        [1.7889],\n",
-      "        [1.2714]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2002],\n",
-      "        [0.2002],\n",
-      "        [0.2002],\n",
-      "        ...,\n",
-      "        [0.7439],\n",
-      "        [0.7439],\n",
-      "        [0.7439]], device='cuda:0')\n",
-      "Accuracy: 0.0351\n",
-      "tensor([0.5141, 0.1407, 0.5748,  ..., 0.9726, 0.0903, 0.7708], device='cuda:0',\n",
-      "       grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6482],\n",
-      "        [0.5417],\n",
-      "        [1.0431],\n",
-      "        ...,\n",
-      "        [0.5490],\n",
-      "        [0.7944],\n",
-      "        [6.8744]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0854],\n",
-      "        [0.0854],\n",
-      "        [0.0854],\n",
-      "        ...,\n",
-      "        [0.3277],\n",
-      "        [0.3277],\n",
-      "        [0.3277]], device='cuda:0')\n",
-      "Accuracy: 0.0344\n",
-      "tensor([9.4967e-01, 1.9661e-04, 1.2988e-04,  ..., 8.0945e-01, 9.2410e-02,\n",
-      "        9.7857e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.0679],\n",
-      "        [0.5420],\n",
-      "        [0.5454],\n",
-      "        ...,\n",
-      "        [3.0806],\n",
-      "        [1.5062],\n",
-      "        [7.9585]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2910],\n",
-      "        [0.2910],\n",
-      "        [0.2910],\n",
-      "        ...,\n",
-      "        [0.1204],\n",
-      "        [0.1204],\n",
-      "        [0.1204]], device='cuda:0')\n",
-      "Accuracy: 0.0367\n",
-      "tensor([5.0405e-01, 1.1651e-04, 1.2058e-01,  ..., 5.6051e-03, 9.4491e-01,\n",
-      "        9.7349e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.6300],\n",
-      "        [0.7620],\n",
-      "        [0.6761],\n",
       "        ...,\n",
-      "        [0.5419],\n",
-      "        [0.9048],\n",
-      "        [4.7914]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.5109],\n",
-      "        [0.5109],\n",
-      "        [0.5109],\n",
-      "        ...,\n",
-      "        [0.1410],\n",
-      "        [0.1410],\n",
-      "        [0.1410]], device='cuda:0')\n",
-      "Accuracy: 0.0372\n",
-      "tensor([0.3892, 0.0886, 0.0253,  ..., 0.1251, 0.0016, 0.7245], device='cuda:0',\n",
-      "       grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[ 2.6081],\n",
-      "        [ 0.5434],\n",
-      "        [ 0.5428],\n",
-      "        ...,\n",
-      "        [ 2.4864],\n",
-      "        [ 2.4090],\n",
-      "        [15.0986]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.0438],\n",
-      "        [1.0438],\n",
-      "        [1.0438],\n",
-      "        ...,\n",
-      "        [1.8620],\n",
-      "        [1.8620],\n",
-      "        [1.8620]], device='cuda:0')\n",
-      "Accuracy: 0.0347\n",
-      "tensor([8.3795e-01, 1.0678e-04, 1.7930e-04,  ..., 9.8179e-01, 4.2272e-01,\n",
-      "        4.1965e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.7973],\n",
-      "        [0.5431],\n",
-      "        [0.6561],\n",
-      "        ...,\n",
-      "        [0.5996],\n",
-      "        [0.5500],\n",
-      "        [2.7891]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.9852],\n",
-      "        [1.9852],\n",
-      "        [1.9852],\n",
-      "        ...,\n",
-      "        [0.0100],\n",
-      "        [0.0100],\n",
-      "        [0.0100]], device='cuda:0')\n",
-      "Accuracy: 0.0356\n",
-      "tensor([4.4137e-01, 7.3130e-04, 1.2012e-04,  ..., 9.3023e-01, 1.3134e-01,\n",
-      "        8.5316e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.8385],\n",
-      "        [0.5448],\n",
-      "        [0.5467],\n",
-      "        ...,\n",
-      "        [0.6612],\n",
-      "        [1.0554],\n",
-      "        [5.1643]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.7683],\n",
-      "        [0.7683],\n",
-      "        [0.7683],\n",
-      "        ...,\n",
-      "        [0.0732],\n",
-      "        [0.0732],\n",
-      "        [0.0732]], device='cuda:0')\n",
-      "Accuracy: 0.0355\n",
-      "tensor([1.9255e-01, 1.3474e-04, 1.1974e-03,  ..., 8.4294e-01, 6.4017e-04,\n",
-      "        9.7782e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.2746],\n",
-      "        [0.6322],\n",
-      "        [0.9034],\n",
-      "        ...,\n",
-      "        [1.1458],\n",
-      "        [1.3878],\n",
-      "        [1.7722]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[4.5390],\n",
-      "        [4.5390],\n",
-      "        [4.5390],\n",
-      "        ...,\n",
-      "        [0.7533],\n",
-      "        [0.7533],\n",
-      "        [0.7533]], device='cuda:0')\n",
-      "Accuracy: 0.0364\n",
-      "tensor([8.0751e-04, 8.8880e-05, 1.2780e-04,  ..., 2.1240e-03, 9.8284e-01,\n",
-      "        9.9026e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([0., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[3.3026],\n",
-      "        [3.1837],\n",
-      "        [0.8561],\n",
-      "        ...,\n",
-      "        [0.5356],\n",
-      "        [0.8326],\n",
-      "        [6.9366]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[14.8994],\n",
-      "        [14.8994],\n",
-      "        [14.8994],\n",
-      "        ...,\n",
-      "        [ 0.2008],\n",
-      "        [ 0.2008],\n",
-      "        [ 0.2008]], device='cuda:0')\n",
-      "Accuracy: 0.0342\n",
-      "tensor([9.9185e-01, 1.0765e-04, 9.1675e-05,  ..., 2.4229e-02, 9.7195e-01,\n",
-      "        9.0920e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.7104],\n",
-      "        [0.5441],\n",
-      "        [0.5452],\n",
-      "        ...,\n",
-      "        [1.2240],\n",
-      "        [1.1488],\n",
-      "        [0.9144]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.5634],\n",
-      "        [1.5634],\n",
-      "        [1.5634],\n",
-      "        ...,\n",
-      "        [1.9763],\n",
-      "        [1.9763],\n",
-      "        [1.9763]], device='cuda:0')\n",
-      "Accuracy: 0.0341\n",
-      "tensor([9.8652e-01, 1.3592e-04, 2.0944e-04,  ..., 8.6725e-01, 1.3076e-02,\n",
-      "        9.9441e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.7453],\n",
-      "        [0.5453],\n",
-      "        [0.5456],\n",
-      "        ...,\n",
-      "        [0.5436],\n",
-      "        [0.9128],\n",
-      "        [0.9530]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[10.9352],\n",
-      "        [10.9352],\n",
-      "        [10.9352],\n",
-      "        ...,\n",
-      "        [ 0.2870],\n",
-      "        [ 0.2870],\n",
-      "        [ 0.2870]], device='cuda:0')\n",
-      "Accuracy: 0.0357\n",
-      "tensor([2.5748e-01, 8.3904e-05, 4.6140e-01,  ..., 9.9685e-01, 1.1448e-02,\n",
-      "        7.5961e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.0213],\n",
-      "        [0.5444],\n",
-      "        [0.7075],\n",
-      "        ...,\n",
-      "        [0.7741],\n",
-      "        [3.9515],\n",
-      "        [2.3138]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0163],\n",
-      "        [0.0163],\n",
-      "        [0.0163],\n",
-      "        ...,\n",
-      "        [6.3676],\n",
-      "        [6.3676],\n",
-      "        [6.3676]], device='cuda:0')\n",
-      "Accuracy: 0.0344\n",
-      "tensor([4.4654e-01, 1.7093e-04, 8.6026e-05,  ..., 2.3539e-01, 4.6134e-03,\n",
-      "        8.4370e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.9188],\n",
-      "        [0.6421],\n",
-      "        [0.5606],\n",
-      "        ...,\n",
-      "        [1.3088],\n",
-      "        [1.6571],\n",
-      "        [2.0567]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2370],\n",
-      "        [0.2370],\n",
-      "        [0.2370],\n",
-      "        ...,\n",
-      "        [0.1704],\n",
-      "        [0.1704],\n",
-      "        [0.1704]], device='cuda:0')\n",
-      "Accuracy: 0.0341\n",
-      "tensor([2.2003e-01, 5.1669e-01, 3.2341e-04,  ..., 5.6173e-02, 3.2754e-03,\n",
-      "        8.9267e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') tensor([[0.8634],\n",
-      "        [0.5831],\n",
-      "        [0.7467],\n",
-      "        ...,\n",
-      "        [1.3825],\n",
-      "        [1.5989],\n",
-      "        [2.9171]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2142],\n",
-      "        [0.2142],\n",
-      "        [0.2142],\n",
-      "        ...,\n",
-      "        [0.3064],\n",
-      "        [0.3064],\n",
-      "        [0.3064]], device='cuda:0')\n",
-      "Accuracy: 0.0325\n"
+      "        [0.8433],\n",
+      "        [0.8433],\n",
+      "        [0.8433]], device='cuda:0')\n",
+      "Accuracy: 39.8106%\n",
+      "tensor([[0.7379],\n",
+      "        [0.7385],\n",
+      "        [0.6666],\n",
+      "        ...,\n",
+      "        [0.7068],\n",
+      "        [0.8132],\n",
+      "        [0.8594]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.9289],\n",
+      "        [0.9289],\n",
+      "        [0.9289],\n",
+      "        ...,\n",
+      "        [0.5385],\n",
+      "        [0.5385],\n",
+      "        [0.5385]], device='cuda:0')\n",
+      "Accuracy: 40.2084%\n",
+      "tensor([[35.6363],\n",
+      "        [40.4104],\n",
+      "        [31.6950],\n",
+      "        ...,\n",
+      "        [ 0.9692],\n",
+      "        [ 1.0891],\n",
+      "        [ 1.0799]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[81.0337],\n",
+      "        [81.0337],\n",
+      "        [81.0337],\n",
+      "        ...,\n",
+      "        [ 0.7141],\n",
+      "        [ 0.7141],\n",
+      "        [ 0.7141]], device='cuda:0')\n",
+      "Accuracy: 39.1416%\n"
      ]
     }
    ],
@@ -2503,1298 +3435,45 @@
     "for batch in test_loader:\n",
     "#     print(batch)\n",
     "    data = batch.to(device)\n",
-    "    edge_pred, node_pred = model(data)\n",
-    "    edge_pred = torch.sigmoid(edge_pred)\n",
-    "    print(edge_pred, data.y_edges, node_pred, data.y_params)\n",
+    "    node_pred = model(data)\n",
+    "#     edge_pred = torch.sigmoid(edge_pred)\n",
+    "#     print(edge_pred, data.y_edges, node_pred, data.y_params)\n",
+    "    print(node_pred, data.y_params)\n",
+    "#     edge_correct = ((edge_pred > 0.5) == (data.y_edges > 0.5)).sum().item()\n",
     "    correct = (((node_pred - data.y_params)/data.y_params)**2 < 0.1**2).sum().item()\n",
-    "    acc = correct / (len(node_pred))\n",
-    "    print('Accuracy: {:.4f}'.format(acc))"
+    "    acc = correct / (len(node_pred))*100\n",
+    "#     edge_acc = edge_correct / len(edge_pred)*100\n",
+    "#     print('Accuracy: {:.4f}%'.format(acc), ', edge accuracy: {:.4f}%'.format(edge_acc))\n",
+    "    print('Accuracy: {:.4f}%'.format(acc))"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 123,
+   "execution_count": 42,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "False True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "False True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False True\n",
-      "False False\n",
-      "False True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False True\n",
-      "False False\n",
-      "True False\n"
+      "13.484405994415283 13.484405994415283\n"
      ]
     }
    ],
    "source": [
-    "for pred, dat in zip(edge_pred, data.y):\n",
-    "    print(pred.item() < 0.5, dat.item() < 0.5)"
+    "torch.cuda.empty_cache()\n",
+    "torch.cuda.reset_max_memory_allocated()\n",
+    "torch.cuda.reset_max_memory_cached()\n",
+    "print(torch.cuda.memory_allocated(0)/1024**3, torch.cuda.max_memory_allocated(0)/1024**3)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "print(full_graphs[0][0])"
    ]
   },
   {
diff --git a/notebooks/ToyModelTrackML.ipynb b/notebooks/ToyModelTrackML.ipynb
index 92f07eb..812b13f 100644
--- a/notebooks/ToyModelTrackML.ipynb
+++ b/notebooks/ToyModelTrackML.ipynb
@@ -23,6 +23,10 @@
     "import sys\n",
     "from pprint import pprint as pp\n",
     "from time import time as tt\n",
+    "sys.path.append('..')\n",
+    "\n",
+    "sys.path.append('/global/common/cori_cle7/software/jupyter/19-11/lib/python3.7/site-packages')\n",
+    "sys.path.append('/global/homes/d/danieltm/.local/lib/python3.7/site-packages')\n",
     "\n",
     "# External imports\n",
     "import matplotlib.pyplot as plt\n",
@@ -32,6 +36,7 @@
     "from torch_geometric.data import Data\n",
     "from torch_geometric.data import DataLoader\n",
     "import seaborn as sns\n",
+    "import wandb\n",
     "\n",
     "import ipywidgets as widgets\n",
     "from ipywidgets import interact, interact_manual\n",
@@ -39,9 +44,6 @@
     "# Limit CPU usage on Jupyter\n",
     "os.environ['OMP_NUM_THREADS'] = '4'\n",
     "\n",
-    "# Pick up local packages\n",
-    "sys.path.append('..')\n",
-    "\n",
     "# Local imports\n",
     "from utils.toy_utils import *\n",
     "from datasets.hitgraphs_params import *\n",
@@ -95,7 +97,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -111,34 +113,38 @@
    "source": [
     "cut_full_dataset = [torch_geometric.data.Data(x=torch.from_numpy(di[0]),\n",
     "                                         edge_index=torch.from_numpy(di[1]), y_edges=torch.from_numpy(di[2]), \n",
-    "                                         y_params=(torch.from_numpy(di[3][:,0]).unsqueeze(1)*200), pid=torch.from_numpy(di[4])) for di in full_graphs]"
+    "                                         y_params=(torch.from_numpy(di[3][:,0]).unsqueeze(1)), pid=torch.from_numpy(di[4])) for di in full_graphs]"
    ]
   },
   {
    "cell_type": "markdown",
-   "metadata": {},
+   "metadata": {
+    "heading_collapsed": true
+   },
    "source": [
     "## Visualise data"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 73,
-   "metadata": {},
+   "execution_count": 49,
+   "metadata": {
+    "hidden": true
+   },
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "<matplotlib.axes._subplots.AxesSubplot at 0x2aab87910320>"
+       "<matplotlib.axes._subplots.AxesSubplot at 0x2aab7fd80cf8>"
       ]
      },
-     "execution_count": 73,
+     "execution_count": 49,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -150,7 +156,7 @@
     }
    ],
    "source": [
-    "sns.distplot(np.concatenate(np.array([di[3][:,0] for di in full_graphs]))[:10]*200)"
+    "sns.distplot(np.concatenate(np.array([di[3][:,0] for di in full_graphs]))[:100000])"
    ]
   },
   {
@@ -1434,11 +1440,74 @@
    ]
   },
   {
-   "cell_type": "code",
-   "execution_count": 7,
+   "cell_type": "markdown",
    "metadata": {},
+   "source": [
+    "How to do a double scatter..."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {
+    "code_folding": [
+     52
+    ]
+   },
    "outputs": [],
    "source": [
+    "class TwoHopAttNetwork(nn.Module):\n",
+    "    \"\"\"\n",
+    "    A module which computes new node features on the graph.\n",
+    "    For each node, it aggregates the neighbor node features\n",
+    "    (separately on the input and output side), and combines\n",
+    "    them with the node's previous features in a fully-connected\n",
+    "    network to compute the new features.\n",
+    "    \"\"\"\n",
+    "    def __init__(self, input_dim, hidden_dim, output_dim, hidden_activation=nn.ReLU,\n",
+    "                 layer_norm=True):\n",
+    "        super(TwoHopAttNetwork, self).__init__()\n",
+    "        self.network = make_mlp(input_dim*5, [hidden_dim, hidden_dim, hidden_dim, output_dim],\n",
+    "                                hidden_activation=hidden_activation,\n",
+    "                                output_activation=hidden_activation,\n",
+    "                                layer_norm=layer_norm)\n",
+    "\n",
+    "    def forward(self, x, e, edge_index):\n",
+    "        start, end = edge_index\n",
+    "        # Aggregate edge-weighted incoming/outgoing features\n",
+    "        mi = scatter_add(e[:, None] * x[start], end, dim=0, dim_size=x.shape[0])\n",
+    "        mi2 = scatter_add(e[:, None]*scatter_add(e[:, None] * x[start], end, dim=0, dim_size=x.shape[0])[start], end, dim=0, dim_size=x.shape[0])\n",
+    "        mo = scatter_add(e[:, None] * x[end], start, dim=0, dim_size=x.shape[0])\n",
+    "        mo2 = scatter_add(e[:, None]*scatter_add(e[:, None] * x[end], start, dim=0, dim_size=x.shape[0])[end], start, dim=0, dim_size=x.shape[0])\n",
+    "        node_inputs = torch.cat([mi, mi2, mo, mo2, x], dim=1)\n",
+    "        return self.network(node_inputs)\n",
+    "\n",
+    "class TwoHopNetwork(nn.Module):\n",
+    "    \"\"\"\n",
+    "    A module which computes new node features on the graph.\n",
+    "    For each node, it aggregates the neighbor node features\n",
+    "    (separately on the input and output side), and combines\n",
+    "    them with the node's previous features in a fully-connected\n",
+    "    network to compute the new features.\n",
+    "    \"\"\"\n",
+    "    def __init__(self, input_dim, hidden_dim, output_dim, hidden_activation=nn.ReLU,\n",
+    "                 layer_norm=True):\n",
+    "        super(TwoHopNetwork, self).__init__()\n",
+    "        self.network = make_mlp(input_dim*5, [hidden_dim, hidden_dim, hidden_dim, output_dim],\n",
+    "                                hidden_activation=hidden_activation,\n",
+    "                                output_activation=hidden_activation,\n",
+    "                                layer_norm=layer_norm)\n",
+    "\n",
+    "    def forward(self, x, e, edge_index):\n",
+    "        start, end = edge_index\n",
+    "        # Aggregate edge-weighted incoming/outgoing features\n",
+    "        mi = scatter_add(x[start], end, dim=0, dim_size=x.shape[0])\n",
+    "        mi2 = scatter_add(scatter_add(x[start], end, dim=0, dim_size=x.shape[0])[start], end, dim=0, dim_size=x.shape[0])\n",
+    "        mo = scatter_add(x[end], start, dim=0, dim_size=x.shape[0])\n",
+    "        mo2 = scatter_add(scatter_add(x[end], start, dim=0, dim_size=x.shape[0])[end], start, dim=0, dim_size=x.shape[0])\n",
+    "        node_inputs = torch.cat([mi, mi2, mo, mo2, x], dim=1)\n",
+    "        return self.network(node_inputs)\n",
+    "\n",
     "class Edge_Track_Net(nn.Module):\n",
     "    \"\"\"\n",
     "    Segment classification graph neural network model.\n",
@@ -1450,21 +1519,21 @@
     "        self.n_graph_iters = n_graph_iters\n",
     "        # Setup the input network\n",
     "        self.input_network = make_mlp(input_dim, [hidden_dim],\n",
-    "                                      output_activation=nn.Tanh,\n",
-    "                                      layer_norm=True)\n",
+    "                                      hidden_activation=nn.ReLU,\n",
+    "                                      layer_norm=False)\n",
     "        # Setup the edge network\n",
     "        self.edge_network = EdgeNetwork(input_dim+hidden_dim, hidden_dim,\n",
     "                                        hidden_activation, layer_norm=layer_norm)\n",
     "        # Setup the node layers\n",
-    "        self.node_network = NodeNetwork(input_dim+hidden_dim, hidden_dim, hidden_dim,\n",
-    "                                        layer_norm=True)\n",
+    "        self.node_network = TwoHopAttNetwork(input_dim+hidden_dim, hidden_dim, hidden_dim,\n",
+    "                                        hidden_activation=nn.ReLU, layer_norm=False)\n",
     "        \n",
-    "        self.output_network = NodeNetwork(input_dim+hidden_dim, hidden_dim, output_dim,\n",
-    "                                        layer_norm=False)\n",
-    "#         make_mlp(input_dim+hidden_dim, [hidden_dim, hidden_dim, hidden_dim, output_dim],\n",
-    "#                                        hidden_activation=nn.ReLU,\n",
-    "#                                       output_activation=nn.ReLU,\n",
-    "#                                       layer_norm=False)\n",
+    "#         self.output_network = NodeNetwork(input_dim+hidden_dim, hidden_dim, output_dim,\n",
+    "#                                         layer_norm=False)\n",
+    "        self.output_network = make_mlp(input_dim+hidden_dim, [hidden_dim, hidden_dim, output_dim],\n",
+    "                                       hidden_activation=nn.ReLU,\n",
+    "                                      output_activation=None,\n",
+    "                                      layer_norm=False)\n",
     "\n",
     "    def forward(self, inputs):\n",
     "        \"\"\"Apply forward pass of the model\"\"\"\n",
@@ -1482,7 +1551,48 @@
     "            x = torch.cat([x, inputs.x], dim=-1)\n",
     "        # Apply final edge network\n",
     "        e = self.edge_network(x, inputs.edge_index)\n",
-    "        return e, self.output_network(x, e, inputs.edge_index)"
+    "        return e, self.output_network(x)\n",
+    "    \n",
+    "class Edge_Track_Truth_Net(nn.Module):\n",
+    "    \"\"\"\n",
+    "    Segment classification graph neural network model.\n",
+    "    Consists of an input network, an edge network, and a node network.\n",
+    "    \"\"\"\n",
+    "    def __init__(self, input_dim=3, hidden_dim=8, n_graph_iters=3,\n",
+    "                 output_dim=3, hidden_activation=nn.ReLU, layer_norm=True):\n",
+    "        super(Edge_Track_Truth_Net, self).__init__()\n",
+    "        self.n_graph_iters = n_graph_iters\n",
+    "        # Setup the input network\n",
+    "        self.input_network = make_mlp(input_dim, [hidden_dim],\n",
+    "                                      hidden_activation=nn.ReLU,\n",
+    "                                      layer_norm=False)\n",
+    "        # Setup the node layers\n",
+    "        self.node_network = TwoHopAttNetwork(input_dim+hidden_dim, hidden_dim, hidden_dim,\n",
+    "                                        hidden_activation=nn.ReLU, layer_norm=False)\n",
+    "        \n",
+    "#         self.output_network = NodeNetwork(input_dim+hidden_dim, hidden_dim, output_dim,\n",
+    "#                                         layer_norm=False)\n",
+    "        self.output_network = make_mlp(input_dim+hidden_dim, [hidden_dim, hidden_dim, hidden_dim, output_dim],\n",
+    "                                       hidden_activation=nn.ReLU,\n",
+    "                                      output_activation=None,\n",
+    "                                      layer_norm=False)\n",
+    "\n",
+    "    def forward(self, inputs):\n",
+    "        \"\"\"Apply forward pass of the model\"\"\"\n",
+    "        # Apply input network to get hidden representation\n",
+    "        x = self.input_network(inputs.x)\n",
+    "        # Shortcut connect the inputs onto the hidden representation\n",
+    "        x = torch.cat([x, inputs.x], dim=-1)\n",
+    "        # Loop over iterations of edge and node networks\n",
+    "        for i in range(self.n_graph_iters):\n",
+    "            # Apply edge network\n",
+    "            e = inputs.y_edges\n",
+    "            # Apply node network\n",
+    "            x = self.node_network(x, e, inputs.edge_index)\n",
+    "            # Shortcut connect the inputs onto the hidden representation\n",
+    "            x = torch.cat([x, inputs.x], dim=-1)\n",
+    "        # Apply final edge network\n",
+    "        return self.output_network(x)"
    ]
   },
   {
@@ -1501,28 +1611,28 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [],
    "source": [
-    "train_dataset = cut_full_dataset[:int(0.2 * len(cut_full_dataset))]\n",
+    "train_dataset = cut_full_dataset[:int(0.5 * len(cut_full_dataset))]\n",
     "test_dataset = cut_full_dataset[int(0.9 * len(cut_full_dataset)):]\n",
-    "train_loader = DataLoader(train_dataset, batch_size=2, shuffle=True)\n",
-    "test_loader = DataLoader(test_dataset, batch_size=2, shuffle=True)"
+    "train_loader = DataLoader(train_dataset, batch_size=1, shuffle=True)\n",
+    "test_loader = DataLoader(test_dataset, batch_size=1, shuffle=True)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "200"
+       "500"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1533,7 +1643,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
@@ -1548,33 +1658,99 @@
     "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
     "print(\"Using \", device)\n",
     "# model = Edge_Class_Net( input_dim=2, hidden_dim=64, n_graph_iters=4).to(device)\n",
-    "model = Edge_Track_Net(input_dim=3, hidden_dim=32, n_graph_iters=4, output_dim=1).to(device)\n",
+    "model = Edge_Track_Truth_Net(input_dim=3, hidden_dim=16, n_graph_iters=3, output_dim=1).to(device)\n",
     "# data = dataset[0].to(device)\n",
-    "learning_rate=0.001\n",
+    "learning_rate=0.002\n",
+    "# optimizer = torch.optim.SGD([\n",
+    "#                                 {'params': model.input_network.parameters()},\n",
+    "#                                 {'params': model.edge_network.parameters()},\n",
+    "#                                 {'params': model.node_network.parameters()},\n",
+    "#                                 {'params': model.output_network.parameters(), 'lr': learning_rate*10}], lr=learning_rate, momentum=0.9)\n",
+    "# optimizer = torch.optim.Adam([\n",
+    "#                                 {'params': model.input_network.parameters()},\n",
+    "#                                 {'params': model.edge_network.parameters()},\n",
+    "#                                 {'params': model.node_network.parameters(), 'lr': learning_rate*10},\n",
+    "#                                 {'params': model.output_network.parameters(), 'lr': learning_rate*10}], lr=learning_rate, weight_decay=1e-4)\n",
     "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-4)\n",
-    "scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.9)"
+    "scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.8)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 139,
+   "execution_count": 9,
    "metadata": {},
    "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/murnanedaniel/node_regression\" target=\"_blank\">https://app.wandb.ai/murnanedaniel/node_regression</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/murnanedaniel/node_regression/runs/bcwlxqbm\" target=\"_blank\">https://app.wandb.ai/murnanedaniel/node_regression/runs/bcwlxqbm</a><br/>\n",
+       "            "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: Network error resolved after 0:00:11.300320, resuming normal operation.\n",
+      "wandb: psutil not installed, only GPU stats will be reported.  Install with pip install psutil\n",
+      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+     ]
+    },
     {
      "data": {
       "text/plain": [
-       "[<matplotlib.lines.Line2D at 0x2aab83484da0>]"
+       "[<wandb.wandb_torch.TorchGraph at 0x2aab52983e48>]"
       ]
      },
-     "execution_count": 139,
+     "execution_count": 9,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: Network error resolved after 0:00:23.720535, resuming normal operation.\n",
+      "wandb: Network error resolved after 0:00:23.765376, resuming normal operation.\n",
+      "wandb: ERROR Error uploading \"wandb-metadata.json\": CommError, <Response [400]>\n",
+      "requests_with_retry encountered retryable exception: HTTPSConnectionPool(host='api.wandb.ai', port=443): Max retries exceeded with url: /files/murnanedaniel/node_regression/bcwlxqbm/file_stream (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x2aab5296e748>: Failed to establish a new connection: [Errno 110] Connection timed out',)). args: ('https://api.wandb.ai/files/murnanedaniel/node_regression/bcwlxqbm/file_stream',), kwargs: {'json': {'files': {'wandb-events.jsonl': {'offset': 0, 'content': ['{\"system.gpu.0.gpu\": 0.0, \"system.gpu.0.memory\": 0.0, \"system.gpu.0.memory_allocated\": 4.62, \"system.gpu.0.temp\": 32.0, \"_wandb\": true, \"_timestamp\": 1576192216, \"_runtime\": 56}\\n']}}}}\n"
+     ]
+    }
+   ],
+   "source": [
+    "wandb.init(project=\"node_regression\")\n",
+    "wandb.watch(model)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 47,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "[<matplotlib.lines.Line2D at 0x2aab7fcdaf60>]"
+      ]
+     },
+     "execution_count": 47,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
-       "<Figure size 1152x288 with 3 Axes>"
+       "<Figure size 1152x288 with 2 Axes>"
       ]
      },
      "metadata": {
@@ -1584,11 +1760,12 @@
     }
    ],
    "source": [
-    "fig, axs = plt.subplots(1,3)\n",
+    "fig, axs = plt.subplots(1,2)\n",
     "fig.set_size_inches(16,4)\n",
-    "axs[0].plot(np.arange(len(loss_v)-10), loss_v[10:])\n",
+    "axs[0].plot(np.arange(len(loss_v_node)), loss_v_node)\n",
+    "# axs[1].plot(np.arange(len(loss_v_edge)), loss_v_edge)\n",
     "axs[1].plot(np.arange(len(acc_v_node)), acc_v_node)\n",
-    "axs[2].plot(np.arange(len(acc_v_edge)), acc_v_edge)"
+    "# axs[3].plot(np.arange(len(acc_v_edge)), acc_v_edge)"
    ]
   },
   {
@@ -1597,863 +1774,1493 @@
    "metadata": {},
    "outputs": [
     {
-     "name": "stdout",
+     "name": "stderr",
      "output_type": "stream",
      "text": [
-      "Epoch:  1 , loss:  0.7998195290565491 , node accuracy:  0.042927115009036225 , edge accuracy:  0.8200164866408935  lr:  [0.001]\n",
-      "Epoch:  2 , loss:  0.6286984086036682 , node accuracy:  0.040572568487003094 , edge accuracy:  0.832733395391287  lr:  [0.001]\n",
-      "Epoch:  3 , loss:  0.732262372970581 , node accuracy:  0.04050407136118298 , edge accuracy:  0.8347139230436985  lr:  [0.001]\n",
-      "Epoch:  4 , loss:  0.575960099697113 , node accuracy:  0.04019836497698092 , edge accuracy:  0.8363110053432875  lr:  [0.001]\n",
-      "Epoch:  5 , loss:  0.5199928879737854 , node accuracy:  0.040155849519575335 , edge accuracy:  0.8364715214807968  lr:  [0.001]\n",
-      "Epoch:  6 , loss:  0.4467678368091583 , node accuracy:  0.04018351830931548 , edge accuracy:  0.8370733682154077  lr:  [0.001]\n",
-      "Epoch:  7 , loss:  0.5279882550239563 , node accuracy:  0.04012649360850957 , edge accuracy:  0.8370048292451879  lr:  [0.001]\n",
-      "Epoch:  8 , loss:  0.7085729837417603 , node accuracy:  0.04016698452032441 , edge accuracy:  0.8373690978913169  lr:  [0.001]\n"
+      "wandb: psutil not installed, only GPU stats will be reported.  Install with pip install psutil\n",
+      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n",
+      "Failed to connect to W&B servers after 10 seconds.                    Letting user process proceed while attempting to reconnect.\n"
      ]
     }
    ],
    "source": [
     "model.train()\n",
-    "loss_v = []\n",
+    "loss_v_node = []\n",
+    "# loss_v_edge = []\n",
     "acc_v_node = []\n",
-    "acc_v_edge = []\n",
+    "# acc_v_edge = []\n",
     "ep = 0\n",
-    "for epoch in range(100):\n",
+    "for epoch in range(200):\n",
     "    ep += 1\n",
     "    node_correct = 0\n",
-    "    edge_correct = 0\n",
+    "#     edge_correct = 0\n",
     "    node_total = 0\n",
-    "    edge_total = 0 \n",
+    "#     edge_total = 0 \n",
     "    for batch in train_loader:\n",
     "#         print(batch)\n",
     "        optimizer.zero_grad()\n",
     "        data = batch.to(device)\n",
-    "        edge_pred, node_pred = model(data)\n",
+    "        node_pred = model(data)\n",
     "#         print(edge_pred.shape, data.y_edges.shape, node_pred.shape, data.y_params.shape)\n",
     "#         print(edge_pred, data.y_edges, node_pred, data.y_params)\n",
-    "        losses = [F.binary_cross_entropy_with_logits(edge_pred.float(), data.y_edges.float()), 0.001*F.mse_loss(node_pred.float(), data.y_params.float())]\n",
+    "#         losses = [F.binary_cross_entropy_with_logits(edge_pred.float(), data.y_edges.float()), F.mse_loss(node_pred.float(), data.y_params.float())]\n",
     "#         print(node_pred, data.y_nodes)\n",
     "#         print(\"Losses: \", losses[0].item(), losses[1].item())\n",
-    "#         loss = F.mse_loss(node_pred, data.y_params.float())\n",
-    "        loss = sum(losses)\n",
-    "        loss_v.append(loss)\n",
+    "        loss = F.mse_loss(node_pred, data.y_params)\n",
+    "#         loss = sum(losses)\n",
+    "#         loss_v_edge.append(losses[0])\n",
+    "        loss_v_node.append(loss)\n",
     "        loss.backward()\n",
     "        optimizer.step()\n",
-    "        edge_pred = torch.sigmoid(edge_pred)\n",
-    "        edge_correct += ((edge_pred > 0.5) == (data.y_edges > 0.5)).sum().item()\n",
+    "#         edge_pred = torch.sigmoid(edge_pred)\n",
+    "#         edge_correct += ((edge_pred > 0.5) == (data.y_edges > 0.5)).sum().item()\n",
     "        # A \"correct\" track parameter is one where the pred. is within 5% of the truth\n",
     "#         print(node_pred, data.y_nodes)\n",
     "#         print((((node_pred - data.y_nodes)/data.y_nodes)**2 < 0.05**2).sum().item())\n",
     "        node_correct += (((node_pred - data.y_params)/data.y_params)**2 < 0.1**2).sum().item()\n",
     "        node_total += len(node_pred)\n",
-    "        edge_total += len(edge_pred)\n",
+    "#         edge_total += len(edge_pred)\n",
     "#         print(out, data.y, )\n",
     "    node_acc = node_correct/node_total\n",
-    "    edge_acc = edge_correct / edge_total\n",
+    "#     edge_acc = edge_correct / edge_total\n",
     "    scheduler.step()\n",
-    "    print(\"Epoch: \" , ep, \", loss: \", loss.item(), \", node accuracy: \", node_acc, \", edge accuracy: \", edge_acc, \" lr: \", scheduler.get_lr())\n",
+    "#     print(\"Epoch: \" , ep, \", loss: \", loss.item(), \", node accuracy: \", node_acc*100, \"%, edge accuracy: \", edge_acc*100, \"%, lr: \", scheduler.get_lr())\n",
+    "    print(\"Epoch: \" , ep, \", loss: \", loss.item(), \", node accuracy: \", node_acc*100, \"%, lr: \", scheduler.get_lr())\n",
     "    acc_v_node.append(node_acc)\n",
-    "    acc_v_edge.append(edge_acc)\n",
+    "    wandb.log({\"Test Accuracy\": node_acc, \"Test Loss\": loss.item()})\n",
+    "#     acc_v_edge.append(edge_acc)\n",
     "\n",
     "#     if node_acc > 0.5:\n",
     "#         break\n",
-    "fig, axs = plt.subplots(1,3)\n",
+    "fig, axs = plt.subplots(1,2)\n",
     "fig.set_size_inches(16,4)\n",
-    "axs[0].plot(np.arange(len(loss_v)-10), loss_v[10:])\n",
+    "axs[0].plot(np.arange(len(loss_v_node)-10), loss_v_node[10:])\n",
+    "# axs[1].plot(np.arange(len(loss_v_edge)-10), loss_v_edge[10:])\n",
     "axs[1].plot(np.arange(len(acc_v_node)), acc_v_node)\n",
-    "axs[2].plot(np.arange(len(acc_v_edge)), acc_v_edge)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 42,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "13.484405994415283 13.484405994415283\n"
-     ]
-    }
-   ],
-   "source": [
-    "torch.cuda.empty_cache()\n",
-    "torch.cuda.reset_max_memory_allocated()\n",
-    "torch.cuda.reset_max_memory_cached()\n",
-    "print(torch.cuda.memory_allocated(0)/1024**3, torch.cuda.max_memory_allocated(0)/1024**3)"
+    "# axs[3].plot(np.arange(len(acc_v_edge)), acc_v_edge)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 57,
+   "execution_count": 52,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "tensor([6.3371e-01, 1.2481e-04, 9.6756e-05,  ..., 9.9400e-01, 9.9787e-01,\n",
-      "        8.2649e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 1., 1.], device='cuda:0') tensor([[ 1.5715],\n",
-      "        [ 0.5701],\n",
-      "        [13.6160],\n",
-      "        ...,\n",
-      "        [ 1.3305],\n",
-      "        [ 7.2867],\n",
-      "        [ 6.9683]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[63.3021],\n",
-      "        [63.3021],\n",
-      "        [63.3021],\n",
-      "        ...,\n",
-      "        [ 0.3630],\n",
-      "        [ 0.3630],\n",
-      "        [ 0.3630]], device='cuda:0')\n",
-      "Accuracy: 0.0375\n",
-      "tensor([9.9742e-01, 1.4877e-04, 3.3513e-04,  ..., 8.9183e-01, 7.1162e-01,\n",
-      "        7.0020e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[ 0.7292],\n",
-      "        [ 0.5435],\n",
-      "        [ 0.9654],\n",
-      "        ...,\n",
-      "        [14.1774],\n",
-      "        [13.7110],\n",
-      "        [13.0482]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.4460],\n",
-      "        [0.4460],\n",
-      "        [0.4460],\n",
-      "        ...,\n",
-      "        [1.8646],\n",
-      "        [1.8646],\n",
-      "        [1.8646]], device='cuda:0')\n",
-      "Accuracy: 0.0337\n",
-      "tensor([9.7150e-01, 1.0385e-04, 1.2531e-03,  ..., 2.0462e-03, 2.8011e-01,\n",
-      "        6.7641e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[1.1098],\n",
-      "        [0.5423],\n",
-      "        [0.5456],\n",
-      "        ...,\n",
-      "        [0.9280],\n",
-      "        [0.8626],\n",
-      "        [1.1622]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0569],\n",
-      "        [0.0569],\n",
-      "        [0.0569],\n",
-      "        ...,\n",
-      "        [8.0154],\n",
-      "        [8.0154],\n",
-      "        [8.0154]], device='cuda:0')\n",
-      "Accuracy: 0.0363\n",
-      "tensor([2.4325e-01, 1.1887e-04, 5.5876e-04,  ..., 9.6752e-01, 2.1461e-01,\n",
-      "        7.7381e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6849],\n",
-      "        [0.5458],\n",
-      "        [0.9192],\n",
-      "        ...,\n",
-      "        [0.6772],\n",
-      "        [7.2738],\n",
-      "        [6.1074]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[2.1139],\n",
-      "        [2.1139],\n",
-      "        [2.1139],\n",
-      "        ...,\n",
-      "        [3.9318],\n",
-      "        [3.9318],\n",
-      "        [3.9318]], device='cuda:0')\n",
-      "Accuracy: 0.0361\n",
-      "tensor([9.9032e-01, 1.2744e-01, 1.6800e-04,  ..., 9.8953e-01, 8.3447e-01,\n",
-      "        1.5724e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 1., 0.], device='cuda:0') tensor([[0.7098],\n",
-      "        [0.5436],\n",
-      "        [0.5460],\n",
-      "        ...,\n",
-      "        [1.0879],\n",
-      "        [2.7611],\n",
-      "        [8.4110]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[2.5095],\n",
-      "        [2.5095],\n",
-      "        [2.5095],\n",
-      "        ...,\n",
-      "        [5.1271],\n",
-      "        [5.1271],\n",
-      "        [5.1271]], device='cuda:0')\n",
-      "Accuracy: 0.0325\n",
-      "tensor([8.6973e-01, 1.6951e-04, 1.6392e-04,  ..., 9.6008e-02, 9.9416e-01,\n",
-      "        8.2875e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[ 0.8158],\n",
-      "        [ 0.5432],\n",
-      "        [ 0.6423],\n",
-      "        ...,\n",
-      "        [ 3.0944],\n",
-      "        [10.2323],\n",
-      "        [ 0.9616]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.5287],\n",
-      "        [0.5287],\n",
-      "        [0.5287],\n",
-      "        ...,\n",
-      "        [6.7962],\n",
-      "        [6.7962],\n",
-      "        [6.7962]], device='cuda:0')\n",
-      "Accuracy: 0.0351\n",
-      "tensor([9.9511e-01, 1.3140e-04, 1.4977e-04,  ..., 1.9575e-04, 9.9504e-01,\n",
-      "        9.8382e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.6525],\n",
-      "        [0.5424],\n",
-      "        [0.8683],\n",
-      "        ...,\n",
-      "        [1.4378],\n",
-      "        [2.9625],\n",
-      "        [2.0328]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[3.4463],\n",
-      "        [3.4463],\n",
-      "        [3.4463],\n",
-      "        ...,\n",
-      "        [0.5728],\n",
-      "        [0.5728],\n",
-      "        [0.5728]], device='cuda:0')\n",
-      "Accuracy: 0.0354\n",
-      "tensor([7.8903e-01, 2.8118e-03, 5.7416e-04,  ..., 4.6416e-01, 1.1951e-04,\n",
-      "        9.4196e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[3.9413],\n",
-      "        [0.9036],\n",
-      "        [9.4332],\n",
-      "        ...,\n",
-      "        [0.8195],\n",
-      "        [1.9732],\n",
-      "        [3.7097]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0314],\n",
-      "        [0.0314],\n",
-      "        [0.0314],\n",
-      "        ...,\n",
-      "        [0.0686],\n",
-      "        [0.0686],\n",
-      "        [0.0686]], device='cuda:0')\n",
-      "Accuracy: 0.0342\n",
-      "tensor([8.7638e-01, 1.0924e-04, 1.0771e-04,  ..., 1.2790e-02, 2.9906e-02,\n",
-      "        1.3434e-02], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') tensor([[0.7203],\n",
-      "        [0.5467],\n",
-      "        [1.0233],\n",
-      "        ...,\n",
-      "        [0.5462],\n",
-      "        [0.5487],\n",
-      "        [3.3905]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2186],\n",
-      "        [0.2186],\n",
-      "        [0.2186],\n",
-      "        ...,\n",
-      "        [0.0403],\n",
-      "        [0.0403],\n",
-      "        [0.0403]], device='cuda:0')\n",
-      "Accuracy: 0.0349\n",
-      "tensor([9.8768e-01, 9.7742e-05, 2.7992e-02,  ..., 1.7775e-01, 1.6944e-01,\n",
-      "        2.2894e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.7063],\n",
-      "        [0.5915],\n",
-      "        [1.0360],\n",
-      "        ...,\n",
-      "        [3.9350],\n",
-      "        [1.1334],\n",
-      "        [1.5988]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[ 0.0349],\n",
-      "        [ 0.0349],\n",
-      "        [ 0.0349],\n",
-      "        ...,\n",
-      "        [32.7402],\n",
-      "        [32.7402],\n",
-      "        [32.7402]], device='cuda:0')\n",
-      "Accuracy: 0.0358\n",
-      "tensor([9.8840e-01, 1.9351e-04, 2.5222e-04,  ..., 4.7956e-03, 1.0587e-03,\n",
-      "        9.4449e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') tensor([[0.9140],\n",
-      "        [0.5431],\n",
-      "        [0.5767],\n",
-      "        ...,\n",
-      "        [0.5397],\n",
-      "        [0.7263],\n",
-      "        [8.6720]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.3607],\n",
-      "        [0.3607],\n",
-      "        [0.3607],\n",
-      "        ...,\n",
-      "        [0.1135],\n",
-      "        [0.1135],\n",
-      "        [0.1135]], device='cuda:0')\n",
-      "Accuracy: 0.0335\n",
-      "tensor([8.6358e-02, 1.4355e-01, 1.9970e-04,  ..., 9.9696e-01, 8.0943e-04,\n",
-      "        9.7098e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 1., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[7.1680],\n",
-      "        [0.5435],\n",
-      "        [0.9238],\n",
-      "        ...,\n",
-      "        [0.6047],\n",
-      "        [2.3098],\n",
-      "        [5.3418]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[4.3154],\n",
-      "        [4.3154],\n",
-      "        [4.3154],\n",
-      "        ...,\n",
-      "        [0.2060],\n",
-      "        [0.2060],\n",
-      "        [0.2060]], device='cuda:0')\n",
-      "Accuracy: 0.0345\n",
-      "tensor([4.3749e-01, 1.7056e-04, 1.1816e-04,  ..., 9.6023e-01, 9.9551e-01,\n",
-      "        1.8150e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 1., 0.], device='cuda:0') tensor([[ 0.7187],\n",
-      "        [ 0.5534],\n",
-      "        [ 0.8164],\n",
-      "        ...,\n",
-      "        [15.4443],\n",
-      "        [ 6.8037],\n",
-      "        [ 5.4404]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[2.2738],\n",
-      "        [2.2738],\n",
-      "        [2.2738],\n",
-      "        ...,\n",
-      "        [0.0978],\n",
-      "        [0.0978],\n",
-      "        [0.0978]], device='cuda:0')\n",
-      "Accuracy: 0.0350\n",
-      "tensor([9.2696e-05, 8.7801e-05, 9.5737e-05,  ..., 8.8211e-01, 1.6481e-03,\n",
-      "        9.2225e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([0., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.7574],\n",
-      "        [0.9120],\n",
-      "        [7.5483],\n",
-      "        ...,\n",
-      "        [0.5395],\n",
-      "        [0.8428],\n",
-      "        [6.1476]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[30.9913],\n",
-      "        [30.9913],\n",
-      "        [30.9913],\n",
-      "        ...,\n",
-      "        [ 0.3478],\n",
-      "        [ 0.3478],\n",
-      "        [ 0.3478]], device='cuda:0')\n",
-      "Accuracy: 0.0341\n",
-      "tensor([4.6446e-01, 1.5978e-04, 1.7472e-01,  ..., 5.8727e-01, 5.0097e-01,\n",
-      "        5.0055e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6067],\n",
-      "        [0.5435],\n",
-      "        [1.0965],\n",
-      "        ...,\n",
-      "        [0.9453],\n",
-      "        [0.8330],\n",
-      "        [1.0036]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2520],\n",
-      "        [0.2520],\n",
-      "        [0.2520],\n",
-      "        ...,\n",
-      "        [0.3966],\n",
-      "        [0.3966],\n",
-      "        [0.3966]], device='cuda:0')\n",
-      "Accuracy: 0.0348\n",
-      "tensor([7.9539e-01, 1.2997e-01, 1.9766e-04,  ..., 9.3179e-01, 1.4623e-02,\n",
-      "        9.8409e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.5707],\n",
-      "        [0.6216],\n",
-      "        [0.8513],\n",
-      "        ...,\n",
-      "        [0.6348],\n",
-      "        [0.6736],\n",
-      "        [0.8960]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0417],\n",
-      "        [0.0417],\n",
-      "        [0.0417],\n",
-      "        ...,\n",
-      "        [0.2276],\n",
-      "        [0.2276],\n",
-      "        [0.2276]], device='cuda:0')\n",
-      "Accuracy: 0.0355\n"
+      "tensor([[ 8.9318],\n",
+      "        [11.8650],\n",
+      "        [11.2290],\n",
+      "        ...,\n",
+      "        [ 0.7272],\n",
+      "        [ 0.6703],\n",
+      "        [ 0.7702]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.2125],\n",
+      "        [15.2125],\n",
+      "        [15.2125],\n",
+      "        ...,\n",
+      "        [ 0.5958],\n",
+      "        [ 0.5958],\n",
+      "        [ 0.5958]], device='cuda:0')\n",
+      "Accuracy: 39.7417%\n",
+      "tensor([[13.8930],\n",
+      "        [14.0282],\n",
+      "        [17.2821],\n",
+      "        ...,\n",
+      "        [ 1.9400],\n",
+      "        [ 1.5565],\n",
+      "        [ 1.8785]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[40.8148],\n",
+      "        [40.8148],\n",
+      "        [40.8148],\n",
+      "        ...,\n",
+      "        [ 1.7936],\n",
+      "        [ 1.7936],\n",
+      "        [ 1.7936]], device='cuda:0')\n",
+      "Accuracy: 40.2185%\n",
+      "tensor([[0.6895],\n",
+      "        [0.6651],\n",
+      "        [0.6577],\n",
+      "        ...,\n",
+      "        [1.0724],\n",
+      "        [1.4556],\n",
+      "        [1.4310]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9864],\n",
+      "        [18.9864],\n",
+      "        [18.9864],\n",
+      "        ...,\n",
+      "        [ 0.6766],\n",
+      "        [ 0.6766],\n",
+      "        [ 0.6766]], device='cuda:0')\n",
+      "Accuracy: 40.0350%\n",
+      "tensor([[1.1658],\n",
+      "        [1.1077],\n",
+      "        [0.6554],\n",
+      "        ...,\n",
+      "        [0.8939],\n",
+      "        [0.8615],\n",
+      "        [0.7666]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9864],\n",
+      "        [18.9864],\n",
+      "        [18.9864],\n",
+      "        ...,\n",
+      "        [ 0.6721],\n",
+      "        [ 0.6721],\n",
+      "        [ 0.6721]], device='cuda:0')\n",
+      "Accuracy: 40.3253%\n",
+      "tensor([[2.3222],\n",
+      "        [2.5033],\n",
+      "        [2.3553],\n",
+      "        ...,\n",
+      "        [0.9325],\n",
+      "        [0.8848],\n",
+      "        [0.8664]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[2.8667],\n",
+      "        [2.8667],\n",
+      "        [2.8667],\n",
+      "        ...,\n",
+      "        [0.8440],\n",
+      "        [0.8440],\n",
+      "        [0.8440]], device='cuda:0')\n",
+      "Accuracy: 40.4110%\n",
+      "tensor([[12.1352],\n",
+      "        [14.0357],\n",
+      "        [17.5757],\n",
+      "        ...,\n",
+      "        [ 0.7509],\n",
+      "        [ 0.8472],\n",
+      "        [ 0.9719]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.9097],\n",
+      "        [15.9097],\n",
+      "        [15.9097],\n",
+      "        ...,\n",
+      "        [ 0.8866],\n",
+      "        [ 0.8866],\n",
+      "        [ 0.8866]], device='cuda:0')\n",
+      "Accuracy: 40.0428%\n",
+      "tensor([[0.9942],\n",
+      "        [1.1208],\n",
+      "        [1.1194],\n",
+      "        ...,\n",
+      "        [0.9826],\n",
+      "        [0.8489],\n",
+      "        [0.9707]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.6542],\n",
+      "        [1.6542],\n",
+      "        [1.6542],\n",
+      "        ...,\n",
+      "        [1.2293],\n",
+      "        [1.2293],\n",
+      "        [1.2293]], device='cuda:0')\n",
+      "Accuracy: 38.8717%\n",
+      "tensor([[ 3.4424],\n",
+      "        [ 5.2534],\n",
+      "        [23.1656],\n",
+      "        ...,\n",
+      "        [ 0.8685],\n",
+      "        [ 0.5717],\n",
+      "        [ 0.5412]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[45.7979],\n",
+      "        [45.7979],\n",
+      "        [45.7979],\n",
+      "        ...,\n",
+      "        [ 0.5170],\n",
+      "        [ 0.5170],\n",
+      "        [ 0.5170]], device='cuda:0')\n",
+      "Accuracy: 39.7613%\n",
+      "tensor([[ 9.1288],\n",
+      "        [11.8913],\n",
+      "        [11.2297],\n",
+      "        ...,\n",
+      "        [ 0.7391],\n",
+      "        [ 0.9998],\n",
+      "        [ 0.6972]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.2125],\n",
+      "        [15.2125],\n",
+      "        [15.2125],\n",
+      "        ...,\n",
+      "        [ 1.6608],\n",
+      "        [ 1.6608],\n",
+      "        [ 1.6608]], device='cuda:0')\n",
+      "Accuracy: 40.3495%\n",
+      "tensor([[ 9.4903],\n",
+      "        [ 8.7859],\n",
+      "        [10.1595],\n",
+      "        ...,\n",
+      "        [ 1.2201],\n",
+      "        [ 1.3347],\n",
+      "        [ 1.2632]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[12.6091],\n",
+      "        [12.6091],\n",
+      "        [12.6091],\n",
+      "        ...,\n",
+      "        [ 1.7351],\n",
+      "        [ 1.7351],\n",
+      "        [ 1.7351]], device='cuda:0')\n",
+      "Accuracy: 39.1402%\n",
+      "tensor([[28.3547],\n",
+      "        [63.4533],\n",
+      "        [81.7252],\n",
+      "        ...,\n",
+      "        [ 0.7373],\n",
+      "        [ 0.6272],\n",
+      "        [ 0.6428]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[214.2887],\n",
+      "        [214.2887],\n",
+      "        [214.2887],\n",
+      "        ...,\n",
+      "        [  0.6889],\n",
+      "        [  0.6889],\n",
+      "        [  0.6889]], device='cuda:0')\n",
+      "Accuracy: 38.7976%\n",
+      "tensor([[1.1035],\n",
+      "        [1.3030],\n",
+      "        [2.1136],\n",
+      "        ...,\n",
+      "        [0.5246],\n",
+      "        [0.5279],\n",
+      "        [0.5917]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[77.3769],\n",
+      "        [77.3769],\n",
+      "        [77.3769],\n",
+      "        ...,\n",
+      "        [ 0.5297],\n",
+      "        [ 0.5297],\n",
+      "        [ 0.5297]], device='cuda:0')\n",
+      "Accuracy: 39.7328%\n",
+      "tensor([[0.9875],\n",
+      "        [0.9888],\n",
+      "        [0.9942],\n",
+      "        ...,\n",
+      "        [1.1358],\n",
+      "        [0.9484],\n",
+      "        [1.0132]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0031],\n",
+      "        [1.0031],\n",
+      "        [1.0031],\n",
+      "        ...,\n",
+      "        [1.0928],\n",
+      "        [1.0928],\n",
+      "        [1.0928]], device='cuda:0')\n",
+      "Accuracy: 39.4175%\n",
+      "tensor([[14.6370],\n",
+      "        [19.4894],\n",
+      "        [18.1789],\n",
+      "        ...,\n",
+      "        [ 0.9971],\n",
+      "        [ 0.8656],\n",
+      "        [ 0.9496]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[10.8352],\n",
+      "        [10.8352],\n",
+      "        [10.8352],\n",
+      "        ...,\n",
+      "        [ 0.6337],\n",
+      "        [ 0.6337],\n",
+      "        [ 0.6337]], device='cuda:0')\n",
+      "Accuracy: 39.8321%\n",
+      "tensor([[2.1587],\n",
+      "        [2.2499],\n",
+      "        [2.0766],\n",
+      "        ...,\n",
+      "        [0.8286],\n",
+      "        [1.1595],\n",
+      "        [1.3049]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.9701],\n",
+      "        [1.9701],\n",
+      "        [1.9701],\n",
+      "        ...,\n",
+      "        [0.6973],\n",
+      "        [0.6973],\n",
+      "        [0.6973]], device='cuda:0')\n",
+      "Accuracy: 39.2101%\n",
+      "tensor([[1.1895],\n",
+      "        [1.2553],\n",
+      "        [1.3382],\n",
+      "        ...,\n",
+      "        [0.6514],\n",
+      "        [0.6962],\n",
+      "        [0.6892]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.6419],\n",
+      "        [1.6419],\n",
+      "        [1.6419],\n",
+      "        ...,\n",
+      "        [0.7746],\n",
+      "        [0.7746],\n",
+      "        [0.7746]], device='cuda:0')\n",
+      "Accuracy: 39.8810%\n",
+      "tensor([[0.6917],\n",
+      "        [0.6471],\n",
+      "        [0.6083],\n",
+      "        ...,\n",
+      "        [0.9881],\n",
+      "        [0.6713],\n",
+      "        [0.7153]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[9.5957],\n",
+      "        [9.5957],\n",
+      "        [9.5957],\n",
+      "        ...,\n",
+      "        [0.5030],\n",
+      "        [0.5053],\n",
+      "        [0.5053]], device='cuda:0')\n",
+      "Accuracy: 39.1109%\n",
+      "tensor([[ 7.0304],\n",
+      "        [20.3012],\n",
+      "        [30.0342],\n",
+      "        ...,\n",
+      "        [ 0.7923],\n",
+      "        [ 1.3118],\n",
+      "        [ 1.0547]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[103.9713],\n",
+      "        [103.9713],\n",
+      "        [103.9713],\n",
+      "        ...,\n",
+      "        [  0.5964],\n",
+      "        [  0.5964],\n",
+      "        [  0.5964]], device='cuda:0')\n",
+      "Accuracy: 39.0858%\n",
+      "tensor([[ 9.0399],\n",
+      "        [11.7952],\n",
+      "        [11.1465],\n",
+      "        ...,\n",
+      "        [ 0.6030],\n",
+      "        [ 0.7784],\n",
+      "        [ 0.8715]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.2125],\n",
+      "        [15.2125],\n",
+      "        [15.2125],\n",
+      "        ...,\n",
+      "        [ 0.8757],\n",
+      "        [ 0.8757],\n",
+      "        [ 0.8757]], device='cuda:0')\n",
+      "Accuracy: 39.4866%\n",
+      "tensor([[0.9135],\n",
+      "        [1.0143],\n",
+      "        [1.2914],\n",
+      "        ...,\n",
+      "        [0.8385],\n",
+      "        [0.8471],\n",
+      "        [0.7578]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0432],\n",
+      "        [1.0432],\n",
+      "        [1.0432],\n",
+      "        ...,\n",
+      "        [0.5182],\n",
+      "        [0.5182],\n",
+      "        [0.5182]], device='cuda:0')\n",
+      "Accuracy: 40.1606%\n",
+      "tensor([[1.6345],\n",
+      "        [1.6915],\n",
+      "        [1.5431],\n",
+      "        ...,\n",
+      "        [0.6044],\n",
+      "        [0.7311],\n",
+      "        [0.9333]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.9438],\n",
+      "        [1.9438],\n",
+      "        [1.9438],\n",
+      "        ...,\n",
+      "        [0.5980],\n",
+      "        [0.5980],\n",
+      "        [0.5980]], device='cuda:0')\n",
+      "Accuracy: 39.1989%\n",
+      "tensor([[10.2383],\n",
+      "        [ 8.0740],\n",
+      "        [ 7.1587],\n",
+      "        ...,\n",
+      "        [ 1.0393],\n",
+      "        [ 1.1273],\n",
+      "        [ 1.0783]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.2037],\n",
+      "        [7.2037],\n",
+      "        [7.2037],\n",
+      "        ...,\n",
+      "        [1.1689],\n",
+      "        [1.1689],\n",
+      "        [1.1689]], device='cuda:0')\n",
+      "Accuracy: 39.5244%\n",
+      "tensor([[0.7564],\n",
+      "        [0.7558],\n",
+      "        [0.6647],\n",
+      "        ...,\n",
+      "        [0.6475],\n",
+      "        [0.6273],\n",
+      "        [0.6765]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7752],\n",
+      "        [0.7752],\n",
+      "        [0.7752],\n",
+      "        ...,\n",
+      "        [0.5488],\n",
+      "        [0.5488],\n",
+      "        [0.5488]], device='cuda:0')\n",
+      "Accuracy: 40.0390%\n",
+      "tensor([[ 2.1219],\n",
+      "        [ 4.1635],\n",
+      "        [31.8953],\n",
+      "        ...,\n",
+      "        [ 0.7448],\n",
+      "        [ 0.6810],\n",
+      "        [ 0.6063]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[103.9713],\n",
+      "        [103.9713],\n",
+      "        [103.9713],\n",
+      "        ...,\n",
+      "        [  0.6936],\n",
+      "        [  0.6936],\n",
+      "        [  0.6936]], device='cuda:0')\n",
+      "Accuracy: 40.3640%\n",
+      "tensor([[5.5135],\n",
+      "        [4.3961],\n",
+      "        [4.6118],\n",
+      "        ...,\n",
+      "        [0.6515],\n",
+      "        [0.7172],\n",
+      "        [0.7335]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[4.7416],\n",
+      "        [4.7416],\n",
+      "        [4.7416],\n",
+      "        ...,\n",
+      "        [0.5174],\n",
+      "        [0.5174],\n",
+      "        [0.5174]], device='cuda:0')\n",
+      "Accuracy: 41.8565%\n",
+      "tensor([[0.7226],\n",
+      "        [0.8478],\n",
+      "        [0.6117],\n",
+      "        ...,\n",
+      "        [0.7012],\n",
+      "        [0.7081],\n",
+      "        [0.6395]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.2959],\n",
+      "        [18.2959],\n",
+      "        [18.2959],\n",
+      "        ...,\n",
+      "        [ 0.5716],\n",
+      "        [ 0.5716],\n",
+      "        [ 0.5716]], device='cuda:0')\n",
+      "Accuracy: 39.6079%\n",
+      "tensor([[0.7796],\n",
+      "        [0.8318],\n",
+      "        [0.7697],\n",
+      "        ...,\n",
+      "        [0.9296],\n",
+      "        [0.9273],\n",
+      "        [1.0580]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.8145],\n",
+      "        [0.8145],\n",
+      "        [0.5644],\n",
+      "        ...,\n",
+      "        [1.2768],\n",
+      "        [1.2768],\n",
+      "        [1.2768]], device='cuda:0')\n",
+      "Accuracy: 39.3381%\n",
+      "tensor([[10.2519],\n",
+      "        [ 8.6586],\n",
+      "        [ 7.7297],\n",
+      "        ...,\n",
+      "        [ 1.2707],\n",
+      "        [ 1.0032],\n",
+      "        [ 0.6826]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[12.3305],\n",
+      "        [12.3305],\n",
+      "        [12.3305],\n",
+      "        ...,\n",
+      "        [ 0.6648],\n",
+      "        [ 0.6648],\n",
+      "        [ 0.6648]], device='cuda:0')\n",
+      "Accuracy: 38.8127%\n",
+      "tensor([[0.9996],\n",
+      "        [0.8601],\n",
+      "        [0.9708],\n",
+      "        ...,\n",
+      "        [0.6847],\n",
+      "        [0.6144],\n",
+      "        [0.5791]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.2671],\n",
+      "        [1.2671],\n",
+      "        [1.2671],\n",
+      "        ...,\n",
+      "        [0.6528],\n",
+      "        [0.6528],\n",
+      "        [0.6528]], device='cuda:0')\n",
+      "Accuracy: 40.3468%\n",
+      "tensor([[19.1213],\n",
+      "        [16.8965],\n",
+      "        [17.0006],\n",
+      "        ...,\n",
+      "        [ 1.2032],\n",
+      "        [ 1.2859],\n",
+      "        [ 1.1205]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[11.3675],\n",
+      "        [11.3675],\n",
+      "        [11.3675],\n",
+      "        ...,\n",
+      "        [ 1.1216],\n",
+      "        [ 1.1216],\n",
+      "        [ 1.1216]], device='cuda:0')\n",
+      "Accuracy: 40.6948%\n",
+      "tensor([[3.6168],\n",
+      "        [5.2099],\n",
+      "        [5.1324],\n",
+      "        ...,\n",
+      "        [2.8753],\n",
+      "        [3.4861],\n",
+      "        [2.0596]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[5.4117],\n",
+      "        [5.4117],\n",
+      "        [5.4117],\n",
+      "        ...,\n",
+      "        [1.7091],\n",
+      "        [1.7091],\n",
+      "        [1.7091]], device='cuda:0')\n",
+      "Accuracy: 40.0502%\n",
+      "tensor([[10.3463],\n",
+      "        [ 8.6515],\n",
+      "        [ 7.7605],\n",
+      "        ...,\n",
+      "        [ 0.6446],\n",
+      "        [ 0.6453],\n",
+      "        [ 0.7479]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[12.3305],\n",
+      "        [12.3305],\n",
+      "        [12.3305],\n",
+      "        ...,\n",
+      "        [ 0.5811],\n",
+      "        [ 0.5811],\n",
+      "        [ 0.5811]], device='cuda:0')\n",
+      "Accuracy: 39.0119%\n",
+      "tensor([[0.9783],\n",
+      "        [1.0397],\n",
+      "        [1.0651],\n",
+      "        ...,\n",
+      "        [0.6647],\n",
+      "        [0.7699],\n",
+      "        [0.8835]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[41.3389],\n",
+      "        [41.3389],\n",
+      "        [41.3389],\n",
+      "        ...,\n",
+      "        [ 2.3012],\n",
+      "        [ 2.3012],\n",
+      "        [ 2.3012]], device='cuda:0')\n",
+      "Accuracy: 40.6840%\n",
+      "tensor([[0.6630],\n",
+      "        [0.6878],\n",
+      "        [0.6975],\n",
+      "        ...,\n",
+      "        [0.8447],\n",
+      "        [0.8768],\n",
+      "        [1.0330]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7537],\n",
+      "        [0.7537],\n",
+      "        [0.7537],\n",
+      "        ...,\n",
+      "        [0.7055],\n",
+      "        [0.7055],\n",
+      "        [0.7055]], device='cuda:0')\n",
+      "Accuracy: 39.3853%\n",
+      "tensor([[3.9761],\n",
+      "        [4.5978],\n",
+      "        [6.2752],\n",
+      "        ...,\n",
+      "        [0.6555],\n",
+      "        [0.9929],\n",
+      "        [0.9387]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[114.3767],\n",
+      "        [114.3767],\n",
+      "        [114.3767],\n",
+      "        ...,\n",
+      "        [  0.5394],\n",
+      "        [  0.5394],\n",
+      "        [  0.5394]], device='cuda:0')\n",
+      "Accuracy: 40.5195%\n",
+      "tensor([[0.9683],\n",
+      "        [1.0184],\n",
+      "        [1.0687],\n",
+      "        ...,\n",
+      "        [2.1319],\n",
+      "        [2.1325],\n",
+      "        [2.3955]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[2.1535],\n",
+      "        [2.1535],\n",
+      "        [2.1535],\n",
+      "        ...,\n",
+      "        [2.0440],\n",
+      "        [2.0440],\n",
+      "        [2.0440]], device='cuda:0')\n",
+      "Accuracy: 40.0183%\n",
+      "tensor([[1.0741],\n",
+      "        [1.1577],\n",
+      "        [1.1884],\n",
+      "        ...,\n",
+      "        [0.7665],\n",
+      "        [0.7874],\n",
+      "        [0.8470]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0568],\n",
+      "        [1.0568],\n",
+      "        [1.0568],\n",
+      "        ...,\n",
+      "        [0.5111],\n",
+      "        [0.5111],\n",
+      "        [0.5111]], device='cuda:0')\n",
+      "Accuracy: 38.4389%\n",
+      "tensor([[1.6255],\n",
+      "        [1.6056],\n",
+      "        [1.8206],\n",
+      "        ...,\n",
+      "        [0.7076],\n",
+      "        [0.8283],\n",
+      "        [0.8569]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.5487],\n",
+      "        [1.5487],\n",
+      "        [1.5487],\n",
+      "        ...,\n",
+      "        [0.8363],\n",
+      "        [0.8363],\n",
+      "        [0.8363]], device='cuda:0')\n",
+      "Accuracy: 39.5117%\n",
+      "tensor([[0.6603],\n",
+      "        [1.6645],\n",
+      "        [4.5902],\n",
+      "        ...,\n",
+      "        [0.7540],\n",
+      "        [0.7077],\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "tensor([9.9341e-01, 2.5245e-04, 1.8199e-04,  ..., 9.0931e-02, 8.6608e-01,\n",
-      "        1.8489e-03], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 0.], device='cuda:0') tensor([[0.5448],\n",
-      "        [0.5467],\n",
-      "        [0.8112],\n",
-      "        ...,\n",
-      "        [1.7237],\n",
-      "        [1.7570],\n",
-      "        [5.0801]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.1209],\n",
-      "        [0.1209],\n",
-      "        [0.1209],\n",
-      "        ...,\n",
-      "        [2.2227],\n",
-      "        [2.2227],\n",
-      "        [2.2227]], device='cuda:0')\n",
-      "Accuracy: 0.0350\n",
-      "tensor([3.5646e-01, 1.3433e-04, 2.6260e-04,  ..., 5.4933e-04, 5.9468e-04,\n",
-      "        9.8144e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.7382],\n",
-      "        [0.5465],\n",
-      "        [0.6196],\n",
-      "        ...,\n",
-      "        [1.1391],\n",
-      "        [1.2705],\n",
-      "        [1.7194]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0023],\n",
-      "        [0.0023],\n",
-      "        [0.0023],\n",
-      "        ...,\n",
-      "        [0.1175],\n",
-      "        [0.1175],\n",
-      "        [0.1175]], device='cuda:0')\n",
-      "Accuracy: 0.0338\n",
-      "tensor([3.0108e-02, 1.3733e-03, 8.1862e-05,  ..., 1.4494e-03, 6.4844e-01,\n",
-      "        1.0903e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([0., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[7.9655],\n",
-      "        [1.5169],\n",
-      "        [0.7510],\n",
-      "        ...,\n",
-      "        [1.3972],\n",
-      "        [3.3405],\n",
-      "        [1.0085]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[51.9062],\n",
-      "        [51.9062],\n",
-      "        [51.9062],\n",
-      "        ...,\n",
-      "        [ 0.2006],\n",
-      "        [ 0.2006],\n",
-      "        [ 0.2006]], device='cuda:0')\n",
-      "Accuracy: 0.0340\n",
-      "tensor([4.4391e-01, 1.0845e-04, 9.7740e-05,  ..., 9.9425e-01, 2.3081e-04,\n",
-      "        9.7540e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.7346],\n",
-      "        [0.5472],\n",
-      "        [0.5459],\n",
-      "        ...,\n",
-      "        [0.5880],\n",
-      "        [0.8285],\n",
-      "        [2.3015]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0423],\n",
-      "        [0.0423],\n",
-      "        [0.0423],\n",
-      "        ...,\n",
-      "        [0.3633],\n",
-      "        [0.3633],\n",
-      "        [0.3633]], device='cuda:0')\n",
-      "Accuracy: 0.0356\n",
-      "tensor([8.6055e-01, 1.6129e-04, 1.2192e-04,  ..., 1.9832e-01, 1.3138e-01,\n",
-      "        3.0419e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[3.3039],\n",
-      "        [0.6548],\n",
-      "        [0.6124],\n",
-      "        ...,\n",
-      "        [0.9618],\n",
-      "        [1.2512],\n",
-      "        [2.3853]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[ 0.1545],\n",
-      "        [ 0.1545],\n",
-      "        [ 0.1545],\n",
-      "        ...,\n",
-      "        [18.5391],\n",
-      "        [18.5391],\n",
-      "        [18.5391]], device='cuda:0')\n",
-      "Accuracy: 0.0352\n",
-      "tensor([0.4641, 0.4169, 0.7636,  ..., 0.9914, 0.9883, 0.9748], device='cuda:0',\n",
-      "       grad_fn=<SigmoidBackward>) tensor([1., 0., 1.,  ..., 1., 1., 1.], device='cuda:0') tensor([[ 9.2842],\n",
-      "        [10.4451],\n",
-      "        [ 7.8896],\n",
-      "        ...,\n",
-      "        [ 1.4973],\n",
-      "        [ 1.1776],\n",
-      "        [ 1.7480]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[83.8616],\n",
-      "        [83.8616],\n",
-      "        [83.8616],\n",
-      "        ...,\n",
-      "        [ 0.0908],\n",
-      "        [ 0.0908],\n",
-      "        [ 0.0908]], device='cuda:0')\n",
-      "Accuracy: 0.0336\n",
-      "tensor([8.6679e-01, 2.9149e-03, 1.2847e-04,  ..., 9.8813e-01, 9.9544e-01,\n",
-      "        9.9051e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 1., 1.], device='cuda:0') tensor([[0.8661],\n",
-      "        [0.5415],\n",
-      "        [0.5461],\n",
-      "        ...,\n",
-      "        [0.7583],\n",
-      "        [1.5500],\n",
-      "        [1.8687]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[2.6424],\n",
-      "        [2.6424],\n",
-      "        [2.6424],\n",
-      "        ...,\n",
-      "        [0.4221],\n",
-      "        [0.4221],\n",
-      "        [0.4221]], device='cuda:0')\n",
-      "Accuracy: 0.0348\n",
-      "tensor([5.3342e-01, 1.5163e-04, 1.2795e-04,  ..., 4.2354e-02, 3.2658e-04,\n",
-      "        9.8938e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.9908],\n",
-      "        [0.5889],\n",
-      "        [0.8017],\n",
+      "        [0.6972]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[34.2068],\n",
+      "        [34.2068],\n",
+      "        [34.2068],\n",
       "        ...,\n",
-      "        [1.0144],\n",
-      "        [1.4240],\n",
-      "        [4.2202]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[3.3233],\n",
-      "        [3.3233],\n",
-      "        [3.3233],\n",
-      "        ...,\n",
-      "        [0.6371],\n",
-      "        [0.6371],\n",
-      "        [0.6371]], device='cuda:0')\n",
-      "Accuracy: 0.0381\n",
-      "tensor([9.6733e-01, 2.6323e-04, 2.2965e-04,  ..., 9.3327e-01, 3.5791e-03,\n",
-      "        9.8144e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6911],\n",
-      "        [0.5462],\n",
-      "        [0.5439],\n",
-      "        ...,\n",
-      "        [0.9134],\n",
-      "        [7.5918],\n",
-      "        [1.0038]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[10.6444],\n",
-      "        [10.6444],\n",
-      "        [10.6444],\n",
-      "        ...,\n",
-      "        [ 0.2166],\n",
-      "        [ 0.2166],\n",
-      "        [ 0.2166]], device='cuda:0')\n",
-      "Accuracy: 0.0332\n",
-      "tensor([9.8665e-01, 1.0347e-04, 8.7657e-05,  ..., 3.9000e-03, 9.8597e-01,\n",
-      "        4.2907e-03], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 0.], device='cuda:0') tensor([[0.7773],\n",
-      "        [0.5452],\n",
-      "        [3.0912],\n",
-      "        ...,\n",
-      "        [1.2596],\n",
-      "        [1.2275],\n",
-      "        [1.6707]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.4743],\n",
-      "        [0.4743],\n",
-      "        [0.4743],\n",
-      "        ...,\n",
-      "        [0.1173],\n",
-      "        [0.1173],\n",
-      "        [0.1173]], device='cuda:0')\n",
-      "Accuracy: 0.0351\n",
-      "tensor([7.3535e-01, 1.3217e-04, 1.1330e-04,  ..., 2.4735e-04, 2.8507e-03,\n",
-      "        8.7266e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.8854],\n",
-      "        [0.5451],\n",
-      "        [0.6782],\n",
-      "        ...,\n",
-      "        [0.6149],\n",
-      "        [0.9327],\n",
-      "        [0.9552]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.6060],\n",
-      "        [1.6060],\n",
-      "        [1.6060],\n",
-      "        ...,\n",
-      "        [0.0386],\n",
-      "        [0.0386],\n",
-      "        [0.0386]], device='cuda:0')\n",
-      "Accuracy: 0.0348\n",
-      "tensor([9.7652e-01, 8.5466e-05, 2.7331e-04,  ..., 1.6046e-01, 5.7225e-04,\n",
-      "        9.8357e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.7516],\n",
-      "        [0.5424],\n",
-      "        [0.5460],\n",
-      "        ...,\n",
-      "        [0.9380],\n",
-      "        [1.7524],\n",
-      "        [4.1151]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0254],\n",
-      "        [0.0254],\n",
-      "        [0.0254],\n",
-      "        ...,\n",
-      "        [0.1382],\n",
-      "        [0.1382],\n",
-      "        [0.1382]], device='cuda:0')\n",
-      "Accuracy: 0.0359\n",
-      "tensor([4.6875e-01, 2.8193e-01, 1.7245e-04,  ..., 1.4696e-02, 3.4589e-02,\n",
-      "        8.3899e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.8937],\n",
-      "        [0.6325],\n",
-      "        [0.8045],\n",
-      "        ...,\n",
-      "        [1.8717],\n",
-      "        [2.4681],\n",
-      "        [5.7391]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0755],\n",
-      "        [0.0755],\n",
-      "        [0.0755],\n",
-      "        ...,\n",
-      "        [8.9241],\n",
-      "        [8.9241],\n",
-      "        [8.9241]], device='cuda:0')\n",
-      "Accuracy: 0.0348\n",
-      "tensor([5.7931e-01, 1.9722e-01, 5.3190e-04,  ..., 1.7703e-03, 1.9580e-04,\n",
-      "        2.2929e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.5925],\n",
-      "        [0.7365],\n",
-      "        [0.6088],\n",
-      "        ...,\n",
-      "        [0.5674],\n",
-      "        [0.6823],\n",
-      "        [1.2497]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.5226],\n",
-      "        [0.5226],\n",
-      "        [0.5226],\n",
-      "        ...,\n",
-      "        [0.0704],\n",
-      "        [0.0704],\n",
-      "        [0.0704]], device='cuda:0')\n",
-      "Accuracy: 0.0352\n",
-      "tensor([7.6390e-01, 4.5444e-03, 1.1119e-04,  ..., 9.8995e-01, 5.4751e-01,\n",
-      "        3.9858e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6109],\n",
-      "        [0.5443],\n",
-      "        [0.5476],\n",
-      "        ...,\n",
-      "        [6.4189],\n",
-      "        [0.8579],\n",
-      "        [7.5937]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.1732],\n",
-      "        [0.1732],\n",
-      "        [0.1732],\n",
-      "        ...,\n",
-      "        [0.5081],\n",
-      "        [0.5081],\n",
-      "        [0.5081]], device='cuda:0')\n",
-      "Accuracy: 0.0370\n",
-      "tensor([9.8327e-01, 1.3564e-04, 1.3634e-04,  ..., 7.9088e-01, 5.0286e-01,\n",
-      "        5.7304e-02], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 0.], device='cuda:0') tensor([[0.7074],\n",
-      "        [0.5430],\n",
-      "        [1.2764],\n",
-      "        ...,\n",
-      "        [6.5383],\n",
-      "        [1.2499],\n",
-      "        [1.2671]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.0848],\n",
-      "        [1.0848],\n",
-      "        [1.0848],\n",
-      "        ...,\n",
-      "        [1.2075],\n",
-      "        [1.2075],\n",
-      "        [1.2075]], device='cuda:0')\n",
-      "Accuracy: 0.0368\n",
-      "tensor([4.7669e-02, 5.2056e-04, 6.5352e-02,  ..., 9.8914e-01, 9.3796e-02,\n",
-      "        8.5225e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.8733],\n",
-      "        [0.9494],\n",
-      "        [0.8729],\n",
-      "        ...,\n",
-      "        [1.3489],\n",
-      "        [1.8896],\n",
-      "        [1.8478]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.1149],\n",
-      "        [1.1149],\n",
-      "        [1.1149],\n",
-      "        ...,\n",
-      "        [0.3781],\n",
-      "        [0.3781],\n",
-      "        [0.3781]], device='cuda:0')\n",
-      "Accuracy: 0.0349\n",
-      "tensor([8.4347e-01, 1.4776e-04, 4.5167e-04,  ..., 1.6111e-04, 9.9050e-01,\n",
-      "        9.9732e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.5422],\n",
-      "        [0.7242],\n",
-      "        [0.5855],\n",
-      "        ...,\n",
-      "        [8.0421],\n",
-      "        [3.3055],\n",
-      "        [8.1637]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.0212e-01],\n",
-      "        [1.0212e-01],\n",
-      "        [1.0212e-01],\n",
-      "        ...,\n",
-      "        [1.3067e+02],\n",
-      "        [1.3067e+02],\n",
-      "        [1.3067e+02]], device='cuda:0')\n",
-      "Accuracy: 0.0357\n"
+      "        [ 0.5591],\n",
+      "        [ 0.5591],\n",
+      "        [ 0.5591]], device='cuda:0')\n",
+      "Accuracy: 40.2999%\n",
+      "tensor([[10.2161],\n",
+      "        [ 8.5189],\n",
+      "        [ 7.6812],\n",
+      "        ...,\n",
+      "        [ 0.6470],\n",
+      "        [ 0.6614],\n",
+      "        [ 0.5862]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[12.3305],\n",
+      "        [12.3305],\n",
+      "        [12.3305],\n",
+      "        ...,\n",
+      "        [ 0.5768],\n",
+      "        [ 0.5768],\n",
+      "        [ 0.5768]], device='cuda:0')\n",
+      "Accuracy: 40.0605%\n",
+      "tensor([[0.9681],\n",
+      "        [1.0175],\n",
+      "        [1.0679],\n",
+      "        ...,\n",
+      "        [0.6423],\n",
+      "        [0.6531],\n",
+      "        [0.6582]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[2.1535],\n",
+      "        [2.1535],\n",
+      "        [2.1535],\n",
+      "        ...,\n",
+      "        [0.5419],\n",
+      "        [0.5419],\n",
+      "        [0.5419]], device='cuda:0')\n",
+      "Accuracy: 39.3605%\n",
+      "tensor([[0.9883],\n",
+      "        [0.9892],\n",
+      "        [0.9956],\n",
+      "        ...,\n",
+      "        [0.7058],\n",
+      "        [0.7919],\n",
+      "        [0.9199]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0031],\n",
+      "        [1.0031],\n",
+      "        [1.0031],\n",
+      "        ...,\n",
+      "        [0.7900],\n",
+      "        [0.7900],\n",
+      "        [0.7900]], device='cuda:0')\n",
+      "Accuracy: 39.9850%\n",
+      "tensor([[1.4345],\n",
+      "        [1.4077],\n",
+      "        [1.2925],\n",
+      "        ...,\n",
+      "        [1.1382],\n",
+      "        [1.3562],\n",
+      "        [1.0842]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.5719],\n",
+      "        [1.5719],\n",
+      "        [1.5719],\n",
+      "        ...,\n",
+      "        [1.4316],\n",
+      "        [1.4316],\n",
+      "        [1.4316]], device='cuda:0')\n",
+      "Accuracy: 39.1546%\n",
+      "tensor([[3.0630],\n",
+      "        [2.7623],\n",
+      "        [3.2913],\n",
+      "        ...,\n",
+      "        [0.6739],\n",
+      "        [0.5828],\n",
+      "        [0.6157]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[49.4070],\n",
+      "        [49.4070],\n",
+      "        [49.4070],\n",
+      "        ...,\n",
+      "        [ 0.5294],\n",
+      "        [ 0.5294],\n",
+      "        [ 0.5294]], device='cuda:0')\n",
+      "Accuracy: 40.2626%\n",
+      "tensor([[11.9847],\n",
+      "        [13.2803],\n",
+      "        [10.4962],\n",
+      "        ...,\n",
+      "        [ 0.7002],\n",
+      "        [ 0.5775],\n",
+      "        [ 0.5533]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[103.9713],\n",
+      "        [103.9713],\n",
+      "        [103.9713],\n",
+      "        ...,\n",
+      "        [  0.5163],\n",
+      "        [  0.5163],\n",
+      "        [  0.5163]], device='cuda:0')\n",
+      "Accuracy: 40.2963%\n",
+      "tensor([[1.0355],\n",
+      "        [0.8637],\n",
+      "        [0.8407],\n",
+      "        ...,\n",
+      "        [1.0183],\n",
+      "        [0.8709],\n",
+      "        [0.9781]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.4545],\n",
+      "        [7.4545],\n",
+      "        [7.4545],\n",
+      "        ...,\n",
+      "        [0.5515],\n",
+      "        [0.5515],\n",
+      "        [0.5515]], device='cuda:0')\n",
+      "Accuracy: 39.2724%\n",
+      "tensor([[1.6573],\n",
+      "        [1.7834],\n",
+      "        [1.5776],\n",
+      "        ...,\n",
+      "        [0.7427],\n",
+      "        [0.7284],\n",
+      "        [0.8567]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.6736],\n",
+      "        [1.6736],\n",
+      "        [1.6736],\n",
+      "        ...,\n",
+      "        [0.5688],\n",
+      "        [0.5688],\n",
+      "        [0.5688]], device='cuda:0')\n",
+      "Accuracy: 40.3407%\n",
+      "tensor([[11.2320],\n",
+      "        [13.0427],\n",
+      "        [16.5677],\n",
+      "        ...,\n",
+      "        [ 0.6959],\n",
+      "        [ 0.6481],\n",
+      "        [ 0.7528]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[15.9097],\n",
+      "        [15.9097],\n",
+      "        [15.9097],\n",
+      "        ...,\n",
+      "        [ 0.5118],\n",
+      "        [ 0.5118],\n",
+      "        [ 0.5118]], device='cuda:0')\n",
+      "Accuracy: 39.8308%\n",
+      "tensor([[3.6314],\n",
+      "        [5.2184],\n",
+      "        [5.1166],\n",
+      "        ...,\n",
+      "        [0.6317],\n",
+      "        [0.6797],\n",
+      "        [0.5500]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[5.4117],\n",
+      "        [5.4117],\n",
+      "        [5.4117],\n",
+      "        ...,\n",
+      "        [0.5336],\n",
+      "        [0.5336],\n",
+      "        [0.5336]], device='cuda:0')\n",
+      "Accuracy: 39.5466%\n",
+      "tensor([[ 0.6881],\n",
+      "        [11.6658],\n",
+      "        [ 6.5289],\n",
+      "        ...,\n",
+      "        [ 0.6949],\n",
+      "        [ 0.7447],\n",
+      "        [ 0.8752]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9864],\n",
+      "        [18.9864],\n",
+      "        [18.9864],\n",
+      "        ...,\n",
+      "        [ 0.5053],\n",
+      "        [ 0.5053],\n",
+      "        [ 0.5053]], device='cuda:0')\n",
+      "Accuracy: 39.3142%\n",
+      "tensor([[8.2489],\n",
+      "        [7.2578],\n",
+      "        [7.3865],\n",
+      "        ...,\n",
+      "        [0.6723],\n",
+      "        [0.6653],\n",
+      "        [0.6261]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.0816],\n",
+      "        [7.0816],\n",
+      "        [7.0816],\n",
+      "        ...,\n",
+      "        [0.6795],\n",
+      "        [0.6795],\n",
+      "        [0.6795]], device='cuda:0')\n",
+      "Accuracy: 39.4279%\n",
+      "tensor([[42.7952],\n",
+      "        [48.9230],\n",
+      "        [46.6251],\n",
+      "        ...,\n",
+      "        [ 0.6276],\n",
+      "        [ 0.6505],\n",
+      "        [ 0.5349]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[214.2887],\n",
+      "        [214.2887],\n",
+      "        [214.2887],\n",
+      "        ...,\n",
+      "        [  0.5513],\n",
+      "        [  0.5513],\n",
+      "        [  0.5513]], device='cuda:0')\n",
+      "Accuracy: 40.1457%\n",
+      "tensor([[1.6206],\n",
+      "        [1.4773],\n",
+      "        [2.0015],\n",
+      "        ...,\n",
+      "        [0.8882],\n",
+      "        [0.9505],\n",
+      "        [0.8475]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[2.0819],\n",
+      "        [2.0819],\n",
+      "        [2.0819],\n",
+      "        ...,\n",
+      "        [0.9285],\n",
+      "        [0.9285],\n",
+      "        [0.9285]], device='cuda:0')\n",
+      "Accuracy: 40.2122%\n",
+      "tensor([[1.3236],\n",
+      "        [1.3064],\n",
+      "        [1.1554],\n",
+      "        ...,\n",
+      "        [0.6435],\n",
+      "        [0.6298],\n",
+      "        [0.6163]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.2227],\n",
+      "        [1.2227],\n",
+      "        [1.2227],\n",
+      "        ...,\n",
+      "        [0.5580],\n",
+      "        [0.5580],\n",
+      "        [0.5580]], device='cuda:0')\n",
+      "Accuracy: 39.8365%\n",
+      "tensor([[0.6796],\n",
+      "        [0.7947],\n",
+      "        [0.8771],\n",
+      "        ...,\n",
+      "        [0.7633],\n",
+      "        [0.9490],\n",
+      "        [1.0927]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.4249],\n",
+      "        [18.4249],\n",
+      "        [18.4249],\n",
+      "        ...,\n",
+      "        [ 0.8176],\n",
+      "        [ 0.8176],\n",
+      "        [ 0.8176]], device='cuda:0')\n",
+      "Accuracy: 37.5792%\n",
+      "tensor([[1.0066],\n",
+      "        [0.8420],\n",
+      "        [0.9938],\n",
+      "        ...,\n",
+      "        [0.7329],\n",
+      "        [0.8331],\n",
+      "        [0.7742]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.7756],\n",
+      "        [1.7756],\n",
+      "        [1.7756],\n",
+      "        ...,\n",
+      "        [0.8164],\n",
+      "        [0.8164],\n",
+      "        [0.8164]], device='cuda:0')\n",
+      "Accuracy: 40.5097%\n",
+      "tensor([[0.7226],\n",
+      "        [0.8432],\n",
+      "        [0.6172],\n",
+      "        ...,\n",
+      "        [1.5072],\n",
+      "        [1.1013],\n",
+      "        [1.3276]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[9.5957],\n",
+      "        [9.5957],\n",
+      "        [9.5957],\n",
+      "        ...,\n",
+      "        [1.1248],\n",
+      "        [1.1248],\n",
+      "        [1.1248]], device='cuda:0')\n",
+      "Accuracy: 39.2459%\n",
+      "tensor([[1.1484],\n",
+      "        [1.2153],\n",
+      "        [1.1721],\n",
+      "        ...,\n",
+      "        [0.6316],\n",
+      "        [0.6301],\n",
+      "        [0.6537]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7752],\n",
+      "        [0.7752],\n",
+      "        [0.7752],\n",
+      "        ...,\n",
+      "        [0.5931],\n",
+      "        [0.5931],\n",
+      "        [0.5931]], device='cuda:0')\n",
+      "Accuracy: 40.2219%\n",
+      "tensor([[2.6271],\n",
+      "        [2.6988],\n",
+      "        [3.3629],\n",
+      "        ...,\n",
+      "        [0.6870],\n",
+      "        [0.6212],\n",
+      "        [0.6703]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[3.5017],\n",
+      "        [3.5017],\n",
+      "        [3.5017],\n",
+      "        ...,\n",
+      "        [0.6006],\n",
+      "        [0.6006],\n",
+      "        [0.6006]], device='cuda:0')\n",
+      "Accuracy: 39.0849%\n",
+      "tensor([[0.6733],\n",
+      "        [0.6504],\n",
+      "        [0.6597],\n",
+      "        ...,\n",
+      "        [1.0149],\n",
+      "        [1.2987],\n",
+      "        [0.9066]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6718],\n",
+      "        [0.6718],\n",
+      "        [0.6718],\n",
+      "        ...,\n",
+      "        [0.6416],\n",
+      "        [0.6416],\n",
+      "        [0.6416]], device='cuda:0')\n",
+      "Accuracy: 40.3180%\n",
+      "tensor([[0.9803],\n",
+      "        [0.9679],\n",
+      "        [0.9910],\n",
+      "        ...,\n",
+      "        [0.6828],\n",
+      "        [0.6682],\n",
+      "        [0.6200]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[5.4676],\n",
+      "        [5.4676],\n",
+      "        [5.4676],\n",
+      "        ...,\n",
+      "        [0.7276],\n",
+      "        [0.7276],\n",
+      "        [0.7276]], device='cuda:0')\n",
+      "Accuracy: 40.6631%\n",
+      "tensor([[14.7487],\n",
+      "        [19.8781],\n",
+      "        [18.3167],\n",
+      "        ...,\n",
+      "        [ 0.6486],\n",
+      "        [ 0.6342],\n",
+      "        [ 0.6402]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[10.8352],\n",
+      "        [10.8352],\n",
+      "        [10.8352],\n",
+      "        ...,\n",
+      "        [ 0.6237],\n",
+      "        [ 0.6237],\n",
+      "        [ 0.6237]], device='cuda:0')\n",
+      "Accuracy: 39.3348%\n",
+      "tensor([[1.0005],\n",
+      "        [1.1341],\n",
+      "        [1.1276],\n",
+      "        ...,\n",
+      "        [0.6037],\n",
+      "        [0.6033],\n",
+      "        [0.5284]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6658],\n",
+      "        [0.6658],\n",
+      "        [0.6658],\n",
+      "        ...,\n",
+      "        [0.5664],\n",
+      "        [0.5664],\n",
+      "        [0.5664]], device='cuda:0')\n",
+      "Accuracy: 40.1885%\n",
+      "tensor([[16.8904],\n",
+      "        [20.8417],\n",
+      "        [20.3371],\n",
+      "        ...,\n",
+      "        [ 0.7235],\n",
+      "        [ 0.6742],\n",
+      "        [ 0.7453]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[62.8775],\n",
+      "        [62.8775],\n",
+      "        [62.8775],\n",
+      "        ...,\n",
+      "        [ 0.7276],\n",
+      "        [ 0.7276],\n",
+      "        [ 0.7276]], device='cuda:0')\n",
+      "Accuracy: 39.7209%\n",
+      "tensor([[0.8520],\n",
+      "        [0.8058],\n",
+      "        [1.3407],\n",
+      "        ...,\n",
+      "        [0.8619],\n",
+      "        [0.9751],\n",
+      "        [0.8014]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.1269],\n",
+      "        [1.1269],\n",
+      "        [1.1269],\n",
+      "        ...,\n",
+      "        [0.7729],\n",
+      "        [0.7729],\n",
+      "        [0.7729]], device='cuda:0')\n",
+      "Accuracy: 40.4717%\n",
+      "tensor([[0.6712],\n",
+      "        [0.6263],\n",
+      "        [0.5953],\n",
+      "        ...,\n",
+      "        [0.5279],\n",
+      "        [0.5198],\n",
+      "        [0.5139]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[9.9181],\n",
+      "        [9.9181],\n",
+      "        [9.9181],\n",
+      "        ...,\n",
+      "        [0.5163],\n",
+      "        [0.5163],\n",
+      "        [0.5163]], device='cuda:0')\n",
+      "Accuracy: 39.5578%\n",
+      "tensor([[0.8464],\n",
+      "        [0.8655],\n",
+      "        [0.9052],\n",
+      "        ...,\n",
+      "        [0.8541],\n",
+      "        [0.9607],\n",
+      "        [0.9901]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[28.2485],\n",
+      "        [28.2485],\n",
+      "        [28.2485],\n",
+      "        ...,\n",
+      "        [ 0.5693],\n",
+      "        [ 0.5693],\n",
+      "        [ 0.5693]], device='cuda:0')\n",
+      "Accuracy: 38.7823%\n",
+      "tensor([[0.9980],\n",
+      "        [0.8870],\n",
+      "        [0.9275],\n",
+      "        ...,\n",
+      "        [1.7981],\n",
+      "        [1.4017],\n",
+      "        [1.2597]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.8174],\n",
+      "        [1.8174],\n",
+      "        [1.8174],\n",
+      "        ...,\n",
+      "        [1.5891],\n",
+      "        [1.5891],\n",
+      "        [1.5891]], device='cuda:0')\n",
+      "Accuracy: 39.9508%\n",
+      "tensor([[0.9969],\n",
+      "        [0.9015],\n",
+      "        [0.9987],\n",
+      "        ...,\n",
+      "        [0.6854],\n",
+      "        [0.7988],\n",
+      "        [0.6971]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6272],\n",
+      "        [0.6272],\n",
+      "        [0.6272],\n",
+      "        ...,\n",
+      "        [0.5574],\n",
+      "        [0.5574],\n",
+      "        [0.5574]], device='cuda:0')\n",
+      "Accuracy: 39.1757%\n",
+      "tensor([[5.6407],\n",
+      "        [5.8813],\n",
+      "        [5.0981],\n",
+      "        ...,\n",
+      "        [0.6493],\n",
+      "        [0.5865],\n",
+      "        [0.6767]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[4.2333],\n",
+      "        [4.2333],\n",
+      "        [4.2333],\n",
+      "        ...,\n",
+      "        [0.6468],\n",
+      "        [0.6468],\n",
+      "        [0.6468]], device='cuda:0')\n",
+      "Accuracy: 39.7403%\n",
+      "tensor([[2.6274],\n",
+      "        [2.7943],\n",
+      "        [3.6031],\n",
+      "        ...,\n",
+      "        [1.1684],\n",
+      "        [1.0011],\n",
+      "        [1.0178]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[3.5017],\n",
+      "        [3.5017],\n",
+      "        [3.5017],\n",
+      "        ...,\n",
+      "        [1.0661],\n",
+      "        [1.0661],\n",
+      "        [1.0661]], device='cuda:0')\n",
+      "Accuracy: 38.7006%\n",
+      "tensor([[3.1372],\n",
+      "        [4.5701],\n",
+      "        [7.6276],\n",
+      "        ...,\n",
+      "        [0.5648],\n",
+      "        [0.6136],\n",
+      "        [0.7399]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9803],\n",
+      "        [18.9803],\n",
+      "        [18.9803],\n",
+      "        ...,\n",
+      "        [ 0.7229],\n",
+      "        [ 0.7229],\n",
+      "        [ 0.7229]], device='cuda:0')\n",
+      "Accuracy: 39.4491%\n",
+      "tensor([[12.9539],\n",
+      "        [12.2334],\n",
+      "        [11.3214],\n",
+      "        ...,\n",
+      "        [ 0.6566],\n",
+      "        [ 0.5275],\n",
+      "        [ 0.5185]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[10.0892],\n",
+      "        [10.0892],\n",
+      "        [10.0892],\n",
+      "        ...,\n",
+      "        [ 0.5517],\n",
+      "        [ 0.5517],\n",
+      "        [ 0.5517]], device='cuda:0')\n",
+      "Accuracy: 40.2761%\n",
+      "tensor([[3.6755],\n",
+      "        [3.6912],\n",
+      "        [4.2473],\n",
+      "        ...,\n",
+      "        [0.8420],\n",
+      "        [0.9263],\n",
+      "        [0.8659]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[4.1409],\n",
+      "        [4.1409],\n",
+      "        [4.1409],\n",
+      "        ...,\n",
+      "        [0.6053],\n",
+      "        [0.6053],\n",
+      "        [0.6053]], device='cuda:0')\n",
+      "Accuracy: 39.6207%\n",
+      "tensor([[0.9930],\n",
+      "        [1.1189],\n",
+      "        [1.1182],\n",
+      "        ...,\n",
+      "        [1.0980],\n",
+      "        [0.9079],\n",
+      "        [0.9797]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.6542],\n",
+      "        [1.6542],\n",
+      "        [1.6542],\n",
+      "        ...,\n",
+      "        [1.0477],\n",
+      "        [1.0477],\n",
+      "        [1.0477]], device='cuda:0')\n",
+      "Accuracy: 40.8742%\n",
+      "tensor([[2.3119],\n",
+      "        [3.0012],\n",
+      "        [3.4853],\n",
+      "        ...,\n",
+      "        [0.7756],\n",
+      "        [0.8348],\n",
+      "        [0.7605]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[4.2260],\n",
+      "        [4.2260],\n",
+      "        [4.2260],\n",
+      "        ...,\n",
+      "        [0.8264],\n",
+      "        [0.8264],\n",
+      "        [0.8264]], device='cuda:0')\n",
+      "Accuracy: 39.4977%\n",
+      "tensor([[0.9552],\n",
+      "        [0.9512],\n",
+      "        [1.1259],\n",
+      "        ...,\n",
+      "        [0.7132],\n",
+      "        [0.8764],\n",
+      "        [0.7109]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[18.9803],\n",
+      "        [18.9803],\n",
+      "        [18.9803],\n",
+      "        ...,\n",
+      "        [ 0.5077],\n",
+      "        [ 0.5077],\n",
+      "        [ 0.5077]], device='cuda:0')\n",
+      "Accuracy: 40.1390%\n",
+      "tensor([[1.0961],\n",
+      "        [1.0131],\n",
+      "        [0.9886],\n",
+      "        ...,\n",
+      "        [0.9215],\n",
+      "        [0.8816],\n",
+      "        [1.0348]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6300],\n",
+      "        [0.6300],\n",
+      "        [0.6300],\n",
+      "        ...,\n",
+      "        [0.6538],\n",
+      "        [0.6538],\n",
+      "        [0.6538]], device='cuda:0')\n",
+      "Accuracy: 39.7940%\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "tensor([1.9595e-01, 4.9849e-01, 9.5157e-05,  ..., 8.5482e-01, 4.3373e-01,\n",
-      "        8.3115e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[ 0.7067],\n",
-      "        [ 3.8614],\n",
-      "        [10.1679],\n",
-      "        ...,\n",
-      "        [ 0.8682],\n",
-      "        [ 0.5501],\n",
-      "        [ 1.4535]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.3448e+02],\n",
-      "        [1.3448e+02],\n",
-      "        [1.3448e+02],\n",
-      "        ...,\n",
-      "        [6.0341e-02],\n",
-      "        [6.0341e-02],\n",
-      "        [6.0341e-02]], device='cuda:0')\n",
-      "Accuracy: 0.0353\n",
-      "tensor([0.3161, 0.1951, 0.2565,  ..., 0.0008, 0.4652, 0.3716], device='cuda:0',\n",
-      "       grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[1.5366],\n",
-      "        [0.5426],\n",
-      "        [0.5455],\n",
+      "tensor([[0.9016],\n",
+      "        [1.0014],\n",
+      "        [1.2399],\n",
+      "        ...,\n",
+      "        [0.6275],\n",
+      "        [0.6268],\n",
+      "        [0.6755]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0432],\n",
+      "        [1.0432],\n",
+      "        [1.0432],\n",
+      "        ...,\n",
+      "        [0.6954],\n",
+      "        [0.6954],\n",
+      "        [0.6954]], device='cuda:0')\n",
+      "Accuracy: 39.1318%\n",
+      "tensor([[0.9803],\n",
+      "        [0.9692],\n",
+      "        [0.9925],\n",
+      "        ...,\n",
+      "        [0.5200],\n",
+      "        [0.5255],\n",
+      "        [0.5377]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[5.4676],\n",
+      "        [5.4676],\n",
+      "        [5.4676],\n",
+      "        ...,\n",
+      "        [0.5036],\n",
+      "        [0.5036],\n",
+      "        [0.5036]], device='cuda:0')\n",
+      "Accuracy: 39.6506%\n",
+      "tensor([[19.0480],\n",
+      "        [23.0835],\n",
+      "        [21.6653],\n",
+      "        ...,\n",
+      "        [ 1.5495],\n",
+      "        [ 1.5566],\n",
+      "        [ 1.3213]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[66.0761],\n",
+      "        [66.0761],\n",
+      "        [66.0761],\n",
+      "        ...,\n",
+      "        [ 1.1489],\n",
+      "        [ 1.1489],\n",
+      "        [ 1.1489]], device='cuda:0')\n",
+      "Accuracy: 39.7656%\n",
+      "tensor([[10.7145],\n",
+      "        [ 6.7402],\n",
+      "        [ 8.7517],\n",
+      "        ...,\n",
+      "        [ 0.8141],\n",
+      "        [ 0.7114],\n",
+      "        [ 0.8462]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[9.6110],\n",
+      "        [9.6110],\n",
+      "        [9.6110],\n",
+      "        ...,\n",
+      "        [0.7663],\n",
+      "        [0.7663],\n",
+      "        [0.7663]], device='cuda:0')\n",
+      "Accuracy: 38.7527%\n",
+      "tensor([[10.4775],\n",
+      "        [ 8.1635],\n",
+      "        [ 6.9152],\n",
+      "        ...,\n",
+      "        [ 0.8971],\n",
+      "        [ 1.0843],\n",
+      "        [ 0.8726]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.2037],\n",
+      "        [7.2037],\n",
+      "        [7.2037],\n",
+      "        ...,\n",
+      "        [0.8917],\n",
+      "        [0.8917],\n",
+      "        [0.8917]], device='cuda:0')\n",
+      "Accuracy: 38.9668%\n",
+      "tensor([[32.4640],\n",
+      "        [32.3690],\n",
+      "        [43.8462],\n",
+      "        ...,\n",
+      "        [ 1.8761],\n",
+      "        [ 1.6347],\n",
+      "        [ 1.5169]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[77.1132],\n",
+      "        [77.1132],\n",
+      "        [77.1132],\n",
+      "        ...,\n",
+      "        [ 1.6917],\n",
+      "        [ 1.6917],\n",
+      "        [ 1.6917]], device='cuda:0')\n",
+      "Accuracy: 39.9223%\n",
+      "tensor([[0.9733],\n",
+      "        [0.9466],\n",
+      "        [0.9591],\n",
+      "        ...,\n",
+      "        [0.5838],\n",
+      "        [0.5999],\n",
+      "        [0.7291]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.9247],\n",
+      "        [0.9247],\n",
+      "        [0.9247],\n",
+      "        ...,\n",
+      "        [0.5667],\n",
+      "        [0.5667],\n",
+      "        [0.5667]], device='cuda:0')\n",
+      "Accuracy: 39.6083%\n",
+      "tensor([[1.0348],\n",
+      "        [0.8618],\n",
+      "        [0.8457],\n",
+      "        ...,\n",
+      "        [0.8780],\n",
+      "        [0.9837],\n",
+      "        [0.5215]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[7.4545],\n",
+      "        [7.4545],\n",
+      "        [7.4545],\n",
+      "        ...,\n",
+      "        [1.2338],\n",
+      "        [1.2338],\n",
+      "        [1.2338]], device='cuda:0')\n",
+      "Accuracy: 39.0186%\n",
+      "tensor([[1.0539],\n",
+      "        [1.0836],\n",
+      "        [1.0144],\n",
       "        ...,\n",
+      "        [0.9879],\n",
+      "        [0.8594],\n",
+      "        [0.7651]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6624],\n",
+      "        [0.6624],\n",
+      "        [0.6624],\n",
+      "        ...,\n",
+      "        [1.0003],\n",
+      "        [1.0003],\n",
+      "        [1.0003]], device='cuda:0')\n",
+      "Accuracy: 40.4452%\n",
+      "tensor([[0.6560],\n",
+      "        [0.7484],\n",
+      "        [0.8034],\n",
+      "        ...,\n",
+      "        [0.8664],\n",
+      "        [0.8966],\n",
+      "        [0.7544]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.5559],\n",
+      "        [0.5559],\n",
+      "        [0.5559],\n",
+      "        ...,\n",
+      "        [1.0908],\n",
+      "        [1.0908],\n",
+      "        [1.1814]], device='cuda:0')\n",
+      "Accuracy: 39.5069%\n",
+      "tensor([[0.6713],\n",
+      "        [0.6502],\n",
+      "        [0.6608],\n",
+      "        ...,\n",
+      "        [1.1412],\n",
+      "        [1.2072],\n",
+      "        [0.9134]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.6718],\n",
+      "        [0.6718],\n",
+      "        [0.6718],\n",
+      "        ...,\n",
+      "        [1.1390],\n",
+      "        [1.1390],\n",
+      "        [1.1390]], device='cuda:0')\n",
+      "Accuracy: 39.1823%\n",
+      "tensor([[1.6302],\n",
+      "        [1.2663],\n",
+      "        [1.7483],\n",
+      "        ...,\n",
+      "        [0.7675],\n",
+      "        [0.7321],\n",
+      "        [0.6926]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.7191],\n",
+      "        [1.7191],\n",
+      "        [1.7191],\n",
+      "        ...,\n",
+      "        [0.7097],\n",
+      "        [0.7097],\n",
+      "        [0.7097]], device='cuda:0')\n",
+      "Accuracy: 40.5287%\n",
+      "tensor([[0.9975],\n",
+      "        [0.9531],\n",
+      "        [0.9131],\n",
+      "        ...,\n",
+      "        [1.1248],\n",
+      "        [0.7863],\n",
+      "        [1.0304]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[3.8672],\n",
+      "        [3.8672],\n",
+      "        [3.8672],\n",
+      "        ...,\n",
+      "        [0.5144],\n",
+      "        [0.5074],\n",
+      "        [0.5074]], device='cuda:0')\n",
+      "Accuracy: 40.6298%\n",
+      "tensor([[0.8473],\n",
+      "        [0.8746],\n",
+      "        [0.7258],\n",
+      "        ...,\n",
+      "        [0.6936],\n",
+      "        [0.7743],\n",
+      "        [0.7342]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0484],\n",
+      "        [1.0484],\n",
+      "        [1.0484],\n",
+      "        ...,\n",
+      "        [0.7965],\n",
+      "        [0.7965],\n",
+      "        [0.7965]], device='cuda:0')\n",
+      "Accuracy: 39.0264%\n",
+      "tensor([[8.5380],\n",
+      "        [7.4409],\n",
+      "        [8.9080],\n",
+      "        ...,\n",
+      "        [0.9483],\n",
+      "        [0.8375],\n",
+      "        [0.7380]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[6.1454],\n",
+      "        [6.1454],\n",
+      "        [6.1454],\n",
+      "        ...,\n",
+      "        [0.8144],\n",
+      "        [0.8144],\n",
+      "        [0.8144]], device='cuda:0')\n",
+      "Accuracy: 39.3465%\n",
+      "tensor([[0.9399],\n",
+      "        [0.9246],\n",
+      "        [0.9130],\n",
+      "        ...,\n",
+      "        [0.6532],\n",
+      "        [0.6188],\n",
+      "        [0.6643]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7312],\n",
+      "        [0.7312],\n",
+      "        [0.7312],\n",
+      "        ...,\n",
+      "        [0.6452],\n",
+      "        [0.6452],\n",
+      "        [0.6452]], device='cuda:0')\n",
+      "Accuracy: 38.6133%\n",
+      "tensor([[17.3492],\n",
+      "        [21.3735],\n",
+      "        [20.9378],\n",
+      "        ...,\n",
+      "        [ 0.7750],\n",
+      "        [ 0.7245],\n",
+      "        [ 0.8494]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[62.8775],\n",
+      "        [62.8775],\n",
+      "        [62.8775],\n",
+      "        ...,\n",
+      "        [ 1.1988],\n",
+      "        [ 0.5820],\n",
+      "        [ 0.5820]], device='cuda:0')\n",
+      "Accuracy: 40.3640%\n",
+      "tensor([[0.7486],\n",
+      "        [0.7896],\n",
+      "        [0.9446],\n",
+      "        ...,\n",
+      "        [0.9740],\n",
+      "        [0.8918],\n",
+      "        [0.8121]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.9247],\n",
+      "        [0.9247],\n",
+      "        [0.9247],\n",
+      "        ...,\n",
+      "        [0.6448],\n",
+      "        [0.6448],\n",
+      "        [0.6448]], device='cuda:0')\n",
+      "Accuracy: 38.9745%\n",
+      "tensor([[0.7439],\n",
+      "        [0.7359],\n",
+      "        [0.6380],\n",
+      "        ...,\n",
+      "        [0.5949],\n",
+      "        [0.8614],\n",
+      "        [0.9297]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.7752],\n",
+      "        [0.7752],\n",
+      "        [0.7752],\n",
+      "        ...,\n",
+      "        [0.6405],\n",
+      "        [0.6405],\n",
+      "        [0.6405]], device='cuda:0')\n",
+      "Accuracy: 40.1297%\n",
+      "tensor([[1.0853],\n",
+      "        [1.0139],\n",
+      "        [1.0190],\n",
+      "        ...,\n",
+      "        [1.0269],\n",
+      "        [1.0126],\n",
+      "        [0.8494]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[1.0948],\n",
+      "        [1.0948],\n",
       "        [1.0948],\n",
-      "        [1.4515],\n",
-      "        [4.6992]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0791],\n",
-      "        [0.0791],\n",
-      "        [0.0791],\n",
-      "        ...,\n",
-      "        [0.4389],\n",
-      "        [0.4389],\n",
-      "        [0.4389]], device='cuda:0')\n",
-      "Accuracy: 0.0350\n",
-      "tensor([6.1782e-01, 9.1888e-04, 1.2533e-04,  ..., 9.7308e-01, 1.7723e-04,\n",
-      "        9.8832e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.1526],\n",
-      "        [0.9570],\n",
-      "        [0.6574],\n",
-      "        ...,\n",
-      "        [3.2503],\n",
-      "        [1.7889],\n",
-      "        [1.2714]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2002],\n",
-      "        [0.2002],\n",
-      "        [0.2002],\n",
-      "        ...,\n",
-      "        [0.7439],\n",
-      "        [0.7439],\n",
-      "        [0.7439]], device='cuda:0')\n",
-      "Accuracy: 0.0351\n",
-      "tensor([0.5141, 0.1407, 0.5748,  ..., 0.9726, 0.0903, 0.7708], device='cuda:0',\n",
-      "       grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.6482],\n",
-      "        [0.5417],\n",
-      "        [1.0431],\n",
-      "        ...,\n",
-      "        [0.5490],\n",
-      "        [0.7944],\n",
-      "        [6.8744]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0854],\n",
-      "        [0.0854],\n",
-      "        [0.0854],\n",
-      "        ...,\n",
-      "        [0.3277],\n",
-      "        [0.3277],\n",
-      "        [0.3277]], device='cuda:0')\n",
-      "Accuracy: 0.0344\n",
-      "tensor([9.4967e-01, 1.9661e-04, 1.2988e-04,  ..., 8.0945e-01, 9.2410e-02,\n",
-      "        9.7857e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.0679],\n",
-      "        [0.5420],\n",
-      "        [0.5454],\n",
-      "        ...,\n",
-      "        [3.0806],\n",
-      "        [1.5062],\n",
-      "        [7.9585]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2910],\n",
-      "        [0.2910],\n",
-      "        [0.2910],\n",
-      "        ...,\n",
-      "        [0.1204],\n",
-      "        [0.1204],\n",
-      "        [0.1204]], device='cuda:0')\n",
-      "Accuracy: 0.0367\n",
-      "tensor([5.0405e-01, 1.1651e-04, 1.2058e-01,  ..., 5.6051e-03, 9.4491e-01,\n",
-      "        9.7349e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.6300],\n",
-      "        [0.7620],\n",
-      "        [0.6761],\n",
       "        ...,\n",
-      "        [0.5419],\n",
-      "        [0.9048],\n",
-      "        [4.7914]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.5109],\n",
-      "        [0.5109],\n",
-      "        [0.5109],\n",
-      "        ...,\n",
-      "        [0.1410],\n",
-      "        [0.1410],\n",
-      "        [0.1410]], device='cuda:0')\n",
-      "Accuracy: 0.0372\n",
-      "tensor([0.3892, 0.0886, 0.0253,  ..., 0.1251, 0.0016, 0.7245], device='cuda:0',\n",
-      "       grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[ 2.6081],\n",
-      "        [ 0.5434],\n",
-      "        [ 0.5428],\n",
-      "        ...,\n",
-      "        [ 2.4864],\n",
-      "        [ 2.4090],\n",
-      "        [15.0986]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.0438],\n",
-      "        [1.0438],\n",
-      "        [1.0438],\n",
-      "        ...,\n",
-      "        [1.8620],\n",
-      "        [1.8620],\n",
-      "        [1.8620]], device='cuda:0')\n",
-      "Accuracy: 0.0347\n",
-      "tensor([8.3795e-01, 1.0678e-04, 1.7930e-04,  ..., 9.8179e-01, 4.2272e-01,\n",
-      "        4.1965e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.7973],\n",
-      "        [0.5431],\n",
-      "        [0.6561],\n",
-      "        ...,\n",
-      "        [0.5996],\n",
-      "        [0.5500],\n",
-      "        [2.7891]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.9852],\n",
-      "        [1.9852],\n",
-      "        [1.9852],\n",
-      "        ...,\n",
-      "        [0.0100],\n",
-      "        [0.0100],\n",
-      "        [0.0100]], device='cuda:0')\n",
-      "Accuracy: 0.0356\n",
-      "tensor([4.4137e-01, 7.3130e-04, 1.2012e-04,  ..., 9.3023e-01, 1.3134e-01,\n",
-      "        8.5316e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[0.8385],\n",
-      "        [0.5448],\n",
-      "        [0.5467],\n",
-      "        ...,\n",
-      "        [0.6612],\n",
-      "        [1.0554],\n",
-      "        [5.1643]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.7683],\n",
-      "        [0.7683],\n",
-      "        [0.7683],\n",
-      "        ...,\n",
-      "        [0.0732],\n",
-      "        [0.0732],\n",
-      "        [0.0732]], device='cuda:0')\n",
-      "Accuracy: 0.0355\n",
-      "tensor([1.9255e-01, 1.3474e-04, 1.1974e-03,  ..., 8.4294e-01, 6.4017e-04,\n",
-      "        9.7782e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.2746],\n",
-      "        [0.6322],\n",
-      "        [0.9034],\n",
-      "        ...,\n",
-      "        [1.1458],\n",
-      "        [1.3878],\n",
-      "        [1.7722]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[4.5390],\n",
-      "        [4.5390],\n",
-      "        [4.5390],\n",
-      "        ...,\n",
-      "        [0.7533],\n",
-      "        [0.7533],\n",
-      "        [0.7533]], device='cuda:0')\n",
-      "Accuracy: 0.0364\n",
-      "tensor([8.0751e-04, 8.8880e-05, 1.2780e-04,  ..., 2.1240e-03, 9.8284e-01,\n",
-      "        9.9026e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([0., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[3.3026],\n",
-      "        [3.1837],\n",
-      "        [0.8561],\n",
-      "        ...,\n",
-      "        [0.5356],\n",
-      "        [0.8326],\n",
-      "        [6.9366]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[14.8994],\n",
-      "        [14.8994],\n",
-      "        [14.8994],\n",
-      "        ...,\n",
-      "        [ 0.2008],\n",
-      "        [ 0.2008],\n",
-      "        [ 0.2008]], device='cuda:0')\n",
-      "Accuracy: 0.0342\n",
-      "tensor([9.9185e-01, 1.0765e-04, 9.1675e-05,  ..., 2.4229e-02, 9.7195e-01,\n",
-      "        9.0920e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.7104],\n",
-      "        [0.5441],\n",
-      "        [0.5452],\n",
-      "        ...,\n",
-      "        [1.2240],\n",
-      "        [1.1488],\n",
-      "        [0.9144]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[1.5634],\n",
-      "        [1.5634],\n",
-      "        [1.5634],\n",
-      "        ...,\n",
-      "        [1.9763],\n",
-      "        [1.9763],\n",
-      "        [1.9763]], device='cuda:0')\n",
-      "Accuracy: 0.0341\n",
-      "tensor([9.8652e-01, 1.3592e-04, 2.0944e-04,  ..., 8.6725e-01, 1.3076e-02,\n",
-      "        9.9441e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 1., 1.], device='cuda:0') tensor([[0.7453],\n",
-      "        [0.5453],\n",
-      "        [0.5456],\n",
-      "        ...,\n",
-      "        [0.5436],\n",
-      "        [0.9128],\n",
-      "        [0.9530]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[10.9352],\n",
-      "        [10.9352],\n",
-      "        [10.9352],\n",
-      "        ...,\n",
-      "        [ 0.2870],\n",
-      "        [ 0.2870],\n",
-      "        [ 0.2870]], device='cuda:0')\n",
-      "Accuracy: 0.0357\n",
-      "tensor([2.5748e-01, 8.3904e-05, 4.6140e-01,  ..., 9.9685e-01, 1.1448e-02,\n",
-      "        7.5961e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 1., 0., 1.], device='cuda:0') tensor([[1.0213],\n",
-      "        [0.5444],\n",
-      "        [0.7075],\n",
-      "        ...,\n",
-      "        [0.7741],\n",
-      "        [3.9515],\n",
-      "        [2.3138]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.0163],\n",
-      "        [0.0163],\n",
-      "        [0.0163],\n",
-      "        ...,\n",
-      "        [6.3676],\n",
-      "        [6.3676],\n",
-      "        [6.3676]], device='cuda:0')\n",
-      "Accuracy: 0.0344\n",
-      "tensor([4.4654e-01, 1.7093e-04, 8.6026e-05,  ..., 2.3539e-01, 4.6134e-03,\n",
-      "        8.4370e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 1.], device='cuda:0') tensor([[0.9188],\n",
-      "        [0.6421],\n",
-      "        [0.5606],\n",
-      "        ...,\n",
-      "        [1.3088],\n",
-      "        [1.6571],\n",
-      "        [2.0567]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2370],\n",
-      "        [0.2370],\n",
-      "        [0.2370],\n",
-      "        ...,\n",
-      "        [0.1704],\n",
-      "        [0.1704],\n",
-      "        [0.1704]], device='cuda:0')\n",
-      "Accuracy: 0.0341\n",
-      "tensor([2.2003e-01, 5.1669e-01, 3.2341e-04,  ..., 5.6173e-02, 3.2754e-03,\n",
-      "        8.9267e-01], device='cuda:0', grad_fn=<SigmoidBackward>) tensor([1., 0., 0.,  ..., 0., 0., 0.], device='cuda:0') tensor([[0.8634],\n",
-      "        [0.5831],\n",
-      "        [0.7467],\n",
-      "        ...,\n",
-      "        [1.3825],\n",
-      "        [1.5989],\n",
-      "        [2.9171]], device='cuda:0', grad_fn=<ReluBackward0>) tensor([[0.2142],\n",
-      "        [0.2142],\n",
-      "        [0.2142],\n",
-      "        ...,\n",
-      "        [0.3064],\n",
-      "        [0.3064],\n",
-      "        [0.3064]], device='cuda:0')\n",
-      "Accuracy: 0.0325\n"
+      "        [0.8433],\n",
+      "        [0.8433],\n",
+      "        [0.8433]], device='cuda:0')\n",
+      "Accuracy: 39.8106%\n",
+      "tensor([[0.7379],\n",
+      "        [0.7385],\n",
+      "        [0.6666],\n",
+      "        ...,\n",
+      "        [0.7068],\n",
+      "        [0.8132],\n",
+      "        [0.8594]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[0.9289],\n",
+      "        [0.9289],\n",
+      "        [0.9289],\n",
+      "        ...,\n",
+      "        [0.5385],\n",
+      "        [0.5385],\n",
+      "        [0.5385]], device='cuda:0')\n",
+      "Accuracy: 40.2084%\n",
+      "tensor([[35.6363],\n",
+      "        [40.4104],\n",
+      "        [31.6950],\n",
+      "        ...,\n",
+      "        [ 0.9692],\n",
+      "        [ 1.0891],\n",
+      "        [ 1.0799]], device='cuda:0', grad_fn=<AddmmBackward>) tensor([[81.0337],\n",
+      "        [81.0337],\n",
+      "        [81.0337],\n",
+      "        ...,\n",
+      "        [ 0.7141],\n",
+      "        [ 0.7141],\n",
+      "        [ 0.7141]], device='cuda:0')\n",
+      "Accuracy: 39.1416%\n"
      ]
     }
    ],
@@ -2462,1298 +3269,45 @@
     "for batch in test_loader:\n",
     "#     print(batch)\n",
     "    data = batch.to(device)\n",
-    "    edge_pred, node_pred = model(data)\n",
-    "    edge_pred = torch.sigmoid(edge_pred)\n",
-    "    print(edge_pred, data.y_edges, node_pred, data.y_params)\n",
+    "    node_pred = model(data)\n",
+    "#     edge_pred = torch.sigmoid(edge_pred)\n",
+    "#     print(edge_pred, data.y_edges, node_pred, data.y_params)\n",
+    "    print(node_pred, data.y_params)\n",
+    "#     edge_correct = ((edge_pred > 0.5) == (data.y_edges > 0.5)).sum().item()\n",
     "    correct = (((node_pred - data.y_params)/data.y_params)**2 < 0.1**2).sum().item()\n",
-    "    acc = correct / (len(node_pred))\n",
-    "    print('Accuracy: {:.4f}'.format(acc))"
+    "    acc = correct / (len(node_pred))*100\n",
+    "#     edge_acc = edge_correct / len(edge_pred)*100\n",
+    "#     print('Accuracy: {:.4f}%'.format(acc), ', edge accuracy: {:.4f}%'.format(edge_acc))\n",
+    "    print('Accuracy: {:.4f}%'.format(acc))"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 123,
+   "execution_count": 42,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "False True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "False True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "False True\n",
-      "False False\n",
-      "False True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True False\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True True\n",
-      "False False\n",
-      "False False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "True True\n",
-      "True False\n",
-      "True True\n",
-      "False True\n",
-      "False False\n",
-      "True False\n"
+      "13.484405994415283 13.484405994415283\n"
      ]
     }
    ],
    "source": [
-    "for pred, dat in zip(edge_pred, data.y):\n",
-    "    print(pred.item() < 0.5, dat.item() < 0.5)"
+    "torch.cuda.empty_cache()\n",
+    "torch.cuda.reset_max_memory_allocated()\n",
+    "torch.cuda.reset_max_memory_cached()\n",
+    "print(torch.cuda.memory_allocated(0)/1024**3, torch.cuda.max_memory_allocated(0)/1024**3)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "print(full_graphs[0][0])"
    ]
   },
   {
